declare const AssetControllerFindAll: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number. Starts from 1";
                };
                readonly limit: {
                    readonly type: "number";
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of items per page";
                };
                readonly createdAt: {
                    readonly type: "object";
                    readonly properties: {
                        readonly isnull: {
                            readonly type: "boolean";
                            readonly description: "Returns null values";
                        };
                        readonly notnull: {
                            readonly type: "boolean";
                            readonly description: "Returns not null values";
                        };
                        readonly gt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than the given date";
                            readonly examples: readonly ["2020-01-01"];
                        };
                        readonly gte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than or equal to the given date";
                        };
                        readonly lt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than the given date";
                        };
                        readonly lte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than or equal to the given date";
                        };
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by created date";
                };
                readonly ids: {
                    readonly type: "string";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0", "c3611c05-df51-4b47-b601-f2eac02f4ef2"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by id. Returns items with given ids";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["page", "limit", "count", "hasMore", "data"];
            readonly properties: {
                readonly page: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly description: "Page number. Starts from 1";
                    readonly examples: readonly [1];
                };
                readonly limit: {
                    readonly type: "number";
                    readonly default: 200;
                    readonly description: "Number of items per page";
                    readonly examples: readonly [10];
                };
                readonly count: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly hasMore: {
                    readonly type: "boolean";
                };
                readonly query: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly default: 1;
                            readonly description: "Page number. Starts from 1";
                            readonly examples: readonly [1];
                        };
                        readonly limit: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly maximum: 200;
                            readonly default: 200;
                            readonly description: "Number of items per page";
                            readonly examples: readonly [10];
                        };
                        readonly createdAt: {
                            readonly description: "Filter by created date";
                            readonly type: "object";
                            readonly properties: {
                                readonly isnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns null values";
                                };
                                readonly notnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns not null values";
                                };
                                readonly gt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than the given date";
                                    readonly examples: readonly ["2020-01-01"];
                                };
                                readonly gte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than or equal to the given date";
                                };
                                readonly lt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than the given date";
                                };
                                readonly lte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than or equal to the given date";
                                };
                            };
                        };
                    };
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["id", "name", "chainId", "address", "currency", "symbol", "decimals", "isEIP5827Supported"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Asset id";
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Asset name";
                            };
                            readonly chainId: {
                                readonly type: "number";
                                readonly description: "Asset chain id";
                                readonly examples: readonly [1];
                            };
                            readonly address: {
                                readonly type: "string";
                                readonly description: "Asset address on chain";
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                readonly description: "Asset currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                            };
                            readonly symbol: {
                                readonly type: "string";
                                readonly description: "Asset symbol";
                            };
                            readonly decimals: {
                                readonly type: "number";
                                readonly description: "Asset decimals in which it is represented on chain";
                                readonly examples: readonly [1];
                            };
                            readonly coingeckoId: {
                                readonly type: "string";
                                readonly description: "Asset coingecko id";
                            };
                            readonly superToken: {
                                readonly description: "SuperToken data";
                                readonly type: "object";
                                readonly required: readonly ["address", "decimals", "symbol"];
                                readonly properties: {
                                    readonly address: {
                                        readonly type: "string";
                                        readonly description: "SuperToken's address";
                                    };
                                    readonly decimals: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly symbol: {
                                        readonly type: "string";
                                        readonly description: "SuperToken's symbol";
                                    };
                                };
                            };
                            readonly isEIP5827Supported: {
                                readonly type: "boolean";
                                readonly description: "Is EIP5827 supported";
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AssetControllerGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Asset id";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Asset name";
                };
                readonly chainId: {
                    readonly type: "number";
                    readonly description: "Asset chain id";
                    readonly examples: readonly [1];
                };
                readonly address: {
                    readonly type: "string";
                    readonly description: "Asset address on chain";
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                    readonly description: "Asset currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                };
                readonly symbol: {
                    readonly type: "string";
                    readonly description: "Asset symbol";
                };
                readonly decimals: {
                    readonly type: "number";
                    readonly description: "Asset decimals in which it is represented on chain";
                    readonly examples: readonly [1];
                };
                readonly coingeckoId: {
                    readonly type: "string";
                    readonly description: "Asset coingecko id";
                };
                readonly superToken: {
                    readonly description: "SuperToken data";
                    readonly type: "object";
                    readonly required: readonly ["address", "decimals", "symbol"];
                    readonly properties: {
                        readonly address: {
                            readonly type: "string";
                            readonly description: "SuperToken's address";
                        };
                        readonly decimals: {
                            readonly type: "number";
                            readonly examples: readonly [1];
                        };
                        readonly symbol: {
                            readonly type: "string";
                            readonly description: "SuperToken's symbol";
                        };
                    };
                };
                readonly isEIP5827Supported: {
                    readonly type: "boolean";
                    readonly description: "Is EIP5827 supported";
                };
            };
            readonly required: readonly ["id", "name", "chainId", "address", "currency", "symbol", "decimals", "isEIP5827Supported"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AuthControllerGetCurrentUser: {
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly firstName: {
                    readonly type: "string";
                };
                readonly lastName: {
                    readonly type: "string";
                };
                readonly email: {
                    readonly type: "string";
                };
                readonly address: {
                    readonly type: "string";
                };
                readonly role: {
                    readonly type: "string";
                };
                readonly accountType: {
                    readonly type: "string";
                    readonly enum: readonly ["email", "wallet"];
                    readonly description: "`email` `wallet`";
                };
                readonly profilePicture: {
                    readonly type: "string";
                };
                readonly flags: {
                    readonly type: "object";
                    readonly properties: {
                        readonly introModal: {
                            readonly type: "boolean";
                        };
                    };
                };
                readonly phone: {
                    readonly type: "string";
                };
                readonly position: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["pending", "active", "suspended"];
                    readonly description: "`pending` `active` `suspended`";
                };
                readonly organization: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly type: {
                            readonly type: "string";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["pending", "active", "suspended"];
                            readonly description: "`pending` `active` `suspended`";
                        };
                        readonly ownerId: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly paymentSetting: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly paymentMethodTypes: {
                                    readonly type: "array";
                                    readonly description: "A list of the types of payment methods";
                                    readonly minItems: 1;
                                    readonly maxItems: 1;
                                    readonly items: {
                                        readonly type: "string";
                                        readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                        readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                                    };
                                    readonly examples: readonly ["wallet"];
                                };
                                readonly allowedChains: {
                                    readonly description: "The list of chains allowed for the payment. If not provided, all chains supported by the organization are enabled.";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly chainId: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly blacklistCurrencies: {
                                                readonly type: "array";
                                                readonly description: "The list of currencies to disable for the payment. Note: This field is only used for checkout session API atm.";
                                                readonly items: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                                    readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                                };
                                                readonly examples: readonly ["usdc"];
                                            };
                                            readonly withdrawalAddress: {
                                                readonly type: "string";
                                                readonly description: "This is optional, default withdrawal address configured in dashboard under settings > payment methods is used. The custom withdrawal address to use for this chain instead of stored default withdrawal address.";
                                            };
                                            readonly withdrawalAddresses: {
                                                readonly description: "The list of withdrawal addresses to split the payment. If provided, the sum of all split percentages should be 100.";
                                                readonly minItems: 2;
                                                readonly maxItems: 4;
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly splitPercentage: {
                                                            readonly type: "number";
                                                            readonly minimum: 0;
                                                            readonly maximum: 100;
                                                            readonly examples: readonly [1];
                                                        };
                                                        readonly address: {
                                                            readonly type: "string";
                                                            readonly description: "The withdrawal address for the split percentage";
                                                        };
                                                    };
                                                    readonly required: readonly ["splitPercentage", "address"];
                                                };
                                            };
                                        };
                                        readonly required: readonly ["chainId"];
                                    };
                                };
                                readonly allowedCurrencies: {
                                    readonly type: "array";
                                    readonly description: "The list of currencies allowed for the payment.";
                                    readonly items: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                    };
                                    readonly examples: readonly ["usdc", "usdt"];
                                };
                                readonly preferredChainId: {
                                    readonly type: "number";
                                    readonly description: "The preferred chain's id";
                                    readonly examples: readonly [1];
                                };
                                readonly preferredCurrency: {
                                    readonly type: "string";
                                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                    readonly description: "The preferred currency for payment\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                };
                                readonly allowSwap: {
                                    readonly type: "boolean";
                                    readonly description: "Whether the user can swap the payment currency";
                                    readonly default: false;
                                };
                                readonly applyFee: {
                                    readonly type: "boolean";
                                    readonly description: "Whether add a application fee to the user payment";
                                    readonly default: false;
                                };
                                readonly feePercentage: {
                                    readonly type: "number";
                                    readonly minimum: 0;
                                    readonly maximum: 100;
                                    readonly description: "Percent that will be added to subtotal as a fee";
                                    readonly examples: readonly [1];
                                };
                                readonly applyGasFee: {
                                    readonly type: "boolean";
                                    readonly description: "Whether add a transaction fee to the user payment";
                                    readonly default: false;
                                };
                                readonly allowSplitPayments: {
                                    readonly type: "boolean";
                                    readonly description: "Whether the user can split the payment";
                                };
                                readonly slippagePercentage: {
                                    readonly type: "number";
                                    readonly minimum: 0;
                                    readonly maximum: 100;
                                    readonly description: "The slippage percentage allowed for swaps and withdrawals";
                                    readonly default: 10;
                                    readonly examples: readonly [1];
                                };
                            };
                            readonly required: readonly ["id", "feePercentage"];
                        };
                        readonly features: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                        readonly referralCode: {
                            readonly type: "string";
                        };
                    };
                    readonly required: readonly ["id", "name", "type", "status", "ownerId"];
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["id", "firstName", "lastName", "email", "role", "accountType", "status", "organization"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AuthControllerGetPointsAccessToken: {
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly token: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["token"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ChainControllerFindAll: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number. Starts from 1";
                };
                readonly limit: {
                    readonly type: "number";
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of items per page";
                };
                readonly createdAt: {
                    readonly type: "object";
                    readonly properties: {
                        readonly isnull: {
                            readonly type: "boolean";
                            readonly description: "Returns null values";
                        };
                        readonly notnull: {
                            readonly type: "boolean";
                            readonly description: "Returns not null values";
                        };
                        readonly gt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than the given date";
                            readonly examples: readonly ["2020-01-01"];
                        };
                        readonly gte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than or equal to the given date";
                        };
                        readonly lt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than the given date";
                        };
                        readonly lte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than or equal to the given date";
                        };
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by created date";
                };
                readonly ids: {
                    readonly type: "string";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0", "c3611c05-df51-4b47-b601-f2eac02f4ef2"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by id. Returns items with given ids";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["page", "limit", "count", "hasMore", "data"];
            readonly properties: {
                readonly page: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly description: "Page number. Starts from 1";
                    readonly examples: readonly [1];
                };
                readonly limit: {
                    readonly type: "number";
                    readonly default: 200;
                    readonly description: "Number of items per page";
                    readonly examples: readonly [10];
                };
                readonly count: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly hasMore: {
                    readonly type: "boolean";
                };
                readonly query: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly default: 1;
                            readonly description: "Page number. Starts from 1";
                            readonly examples: readonly [1];
                        };
                        readonly limit: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly maximum: 200;
                            readonly default: 200;
                            readonly description: "Number of items per page";
                            readonly examples: readonly [10];
                        };
                        readonly createdAt: {
                            readonly description: "Filter by created date";
                            readonly type: "object";
                            readonly properties: {
                                readonly isnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns null values";
                                };
                                readonly notnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns not null values";
                                };
                                readonly gt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than the given date";
                                    readonly examples: readonly ["2020-01-01"];
                                };
                                readonly gte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than or equal to the given date";
                                };
                                readonly lt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than the given date";
                                };
                                readonly lte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than or equal to the given date";
                                };
                            };
                        };
                    };
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["id", "name", "icon", "currency", "blockExplorerTransactionUrl", "blockExplorerName", "type", "isBeta", "assets", "isTestnet", "isEIP1559Supported", "hasMonitoring", "isPublic"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "number";
                                readonly description: "Chain id";
                                readonly examples: readonly [1];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Chain name";
                            };
                            readonly icon: {
                                readonly type: "string";
                                readonly description: "Chain icon";
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                readonly description: "Chain currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                            };
                            readonly blockExplorerTransactionUrl: {
                                readonly type: "string";
                                readonly description: "Chain block explorer transaction url";
                            };
                            readonly blockExplorerName: {
                                readonly type: "string";
                                readonly description: "Chain block explorer name";
                            };
                            readonly type: {
                                readonly description: "Chain type\n\n`evm` `solana` `tron` `stripe` `binance_pay`";
                                readonly type: "string";
                                readonly enum: readonly ["evm", "solana", "tron", "stripe", "binance_pay"];
                            };
                            readonly isBeta: {
                                readonly type: "boolean";
                                readonly description: "Is beta asset";
                            };
                            readonly assets: {
                                readonly description: "Chain assets";
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly required: readonly ["id", "name", "chainId", "address", "currency", "symbol", "decimals", "isEIP5827Supported"];
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "Asset id";
                                        };
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "Asset name";
                                        };
                                        readonly chainId: {
                                            readonly type: "number";
                                            readonly description: "Asset chain id";
                                            readonly examples: readonly [1];
                                        };
                                        readonly address: {
                                            readonly type: "string";
                                            readonly description: "Asset address on chain";
                                        };
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                            readonly description: "Asset currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                        };
                                        readonly symbol: {
                                            readonly type: "string";
                                            readonly description: "Asset symbol";
                                        };
                                        readonly decimals: {
                                            readonly type: "number";
                                            readonly description: "Asset decimals in which it is represented on chain";
                                            readonly examples: readonly [1];
                                        };
                                        readonly coingeckoId: {
                                            readonly type: "string";
                                            readonly description: "Asset coingecko id";
                                        };
                                        readonly superToken: {
                                            readonly description: "SuperToken data";
                                            readonly type: "object";
                                            readonly required: readonly ["address", "decimals", "symbol"];
                                            readonly properties: {
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's address";
                                                };
                                                readonly decimals: {
                                                    readonly type: "number";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly symbol: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's symbol";
                                                };
                                            };
                                        };
                                        readonly isEIP5827Supported: {
                                            readonly type: "boolean";
                                            readonly description: "Is EIP5827 supported";
                                        };
                                    };
                                };
                            };
                            readonly isTestnet: {
                                readonly type: "boolean";
                            };
                            readonly isEIP1559Supported: {
                                readonly type: "boolean";
                            };
                            readonly hasMonitoring: {
                                readonly type: "boolean";
                            };
                            readonly forkOf: {
                                readonly type: "number";
                                readonly examples: readonly [1];
                            };
                            readonly isPublic: {
                                readonly type: "boolean";
                                readonly description: "Is public chain";
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ChainControllerGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "number";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "number";
                    readonly description: "Chain id";
                    readonly examples: readonly [1];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Chain name";
                };
                readonly icon: {
                    readonly type: "string";
                    readonly description: "Chain icon";
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                    readonly description: "Chain currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                };
                readonly blockExplorerTransactionUrl: {
                    readonly type: "string";
                    readonly description: "Chain block explorer transaction url";
                };
                readonly blockExplorerName: {
                    readonly type: "string";
                    readonly description: "Chain block explorer name";
                };
                readonly type: {
                    readonly description: "Chain type\n\n`evm` `solana` `tron` `stripe` `binance_pay`";
                    readonly type: "string";
                    readonly enum: readonly ["evm", "solana", "tron", "stripe", "binance_pay"];
                };
                readonly isBeta: {
                    readonly type: "boolean";
                    readonly description: "Is beta asset";
                };
                readonly assets: {
                    readonly description: "Chain assets";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Asset id";
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Asset name";
                            };
                            readonly chainId: {
                                readonly type: "number";
                                readonly description: "Asset chain id";
                                readonly examples: readonly [1];
                            };
                            readonly address: {
                                readonly type: "string";
                                readonly description: "Asset address on chain";
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                readonly description: "Asset currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                            };
                            readonly symbol: {
                                readonly type: "string";
                                readonly description: "Asset symbol";
                            };
                            readonly decimals: {
                                readonly type: "number";
                                readonly description: "Asset decimals in which it is represented on chain";
                                readonly examples: readonly [1];
                            };
                            readonly coingeckoId: {
                                readonly type: "string";
                                readonly description: "Asset coingecko id";
                            };
                            readonly superToken: {
                                readonly description: "SuperToken data";
                                readonly type: "object";
                                readonly required: readonly ["address", "decimals", "symbol"];
                                readonly properties: {
                                    readonly address: {
                                        readonly type: "string";
                                        readonly description: "SuperToken's address";
                                    };
                                    readonly decimals: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly symbol: {
                                        readonly type: "string";
                                        readonly description: "SuperToken's symbol";
                                    };
                                };
                            };
                            readonly isEIP5827Supported: {
                                readonly type: "boolean";
                                readonly description: "Is EIP5827 supported";
                            };
                        };
                        readonly required: readonly ["id", "name", "chainId", "address", "currency", "symbol", "decimals", "isEIP5827Supported"];
                    };
                };
                readonly isTestnet: {
                    readonly type: "boolean";
                };
                readonly isEIP1559Supported: {
                    readonly type: "boolean";
                };
                readonly hasMonitoring: {
                    readonly type: "boolean";
                };
                readonly forkOf: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly isPublic: {
                    readonly type: "boolean";
                    readonly description: "Is public chain";
                };
            };
            readonly required: readonly ["id", "name", "icon", "currency", "blockExplorerTransactionUrl", "blockExplorerName", "type", "isBeta", "assets", "isTestnet", "isEIP1559Supported", "hasMonitoring", "isPublic"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ConstantsControllerGetPrices: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly currency: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["currency"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly prices: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly price: {
                                readonly type: "number";
                                readonly examples: readonly [1];
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                            };
                            readonly coingeckoId: {
                                readonly type: "string";
                            };
                        };
                        readonly required: readonly ["price", "currency"];
                    };
                };
            };
            readonly required: readonly ["prices"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CouponControllerArchive: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Coupon id";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly description: "Organization id";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the coupon displayed to customers on for instance invoices or receipts.";
                };
                readonly percentOff: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly maximum: 100;
                    readonly description: "Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.";
                    readonly examples: readonly [1];
                };
                readonly amountOff: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "Fixed amount that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.";
                    readonly minimum: 0;
                    readonly examples: readonly ["9223372036854775807"];
                    readonly maximum: 9223372036854776000;
                };
                readonly currency: {
                    readonly type: "string";
                    readonly description: "Name of the currency displayed to customers on for instance invoices or receipts.";
                };
                readonly maxRedemptions: {
                    readonly type: "number";
                    readonly description: "Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.";
                    readonly examples: readonly [1];
                };
                readonly redeemBy: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Date after which the coupon can no longer be redeemed";
                };
                readonly isEnable: {
                    readonly type: "boolean";
                    readonly description: "Taking account of the above properties, whether this coupon can still be applied to a customer.";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Time at which this coupon was created.";
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                    readonly additionalProperties: true;
                };
                readonly isArchived: {
                    readonly type: "boolean";
                    readonly description: "Whether the coupon is archived.";
                };
                readonly archivedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Date at which the coupon was archived";
                };
                readonly promotionCodes: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Promotion code id";
                            };
                            readonly organizationId: {
                                readonly type: "string";
                                readonly description: "Organization id";
                            };
                            readonly code: {
                                readonly type: "string";
                                readonly description: "The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer.";
                                readonly maxLength: 20;
                                readonly minLength: 2;
                            };
                            readonly couponId: {
                                readonly type: "string";
                                readonly description: "Coupon id";
                            };
                            readonly isActive: {
                                readonly type: "boolean";
                                readonly description: "Whether the promotion code is currently active. A promotion code is only active if the coupon is also enabled.";
                            };
                            readonly expiredAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "Date at which the promotion code can no longer be redeemed. If the coupon has specified a redeems_by, then this value cannot be after the coupon’s redeems_by.";
                            };
                            readonly maxRedemptions: {
                                readonly type: "number";
                                readonly description: "Maximum number of times this promotion code can be redeemed. If the coupon has specified a max_redemptions, then this value cannot be greater than the coupon’s max_redemptions.";
                                readonly examples: readonly [1];
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "Date at which the promotion code was created";
                            };
                            readonly metadata: {
                                readonly type: "object";
                                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                readonly additionalProperties: true;
                            };
                        };
                        readonly required: readonly ["id", "organizationId", "code", "couponId", "isActive"];
                    };
                };
                readonly status: {
                    readonly description: "The status of the coupon.\n\n`active` `expired` `disabled` `limit_reached`";
                    readonly type: "string";
                    readonly enum: readonly ["active", "expired", "disabled", "limit_reached"];
                };
                readonly timesRedeemed: {
                    readonly type: "number";
                    readonly description: "Number of times this coupon has been applied.";
                    readonly examples: readonly [1];
                };
            };
            readonly required: readonly ["id", "organizationId", "name", "isEnable", "isArchived", "promotionCodes", "status"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CouponControllerCreate: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "Name of the coupon displayed to customers on for instance invoices or receipts.";
            };
            readonly percentOff: {
                readonly type: "number";
                readonly minimum: 0;
                readonly maximum: 100;
                readonly description: "Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.";
                readonly examples: readonly [1];
            };
            readonly amountOff: {
                readonly format: "int64";
                readonly type: "integer";
                readonly description: "Fixed amount that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.";
                readonly minimum: 0;
                readonly examples: readonly ["9223372036854775807"];
                readonly maximum: 9223372036854776000;
            };
            readonly currency: {
                readonly type: "string";
                readonly description: "Name of the currency displayed to customers on for instance invoices or receipts.";
            };
            readonly maxRedemptions: {
                readonly type: "number";
                readonly description: "Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.";
                readonly examples: readonly [1];
            };
            readonly redeemBy: {
                readonly format: "date-time";
                readonly type: "string";
                readonly description: "Date after which the coupon can no longer be redeemed";
            };
            readonly metadata: {
                readonly type: "object";
                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                readonly additionalProperties: true;
            };
            readonly isEnable: {
                readonly type: "boolean";
                readonly description: "Taking account of the above properties, whether this coupon can still be applied to a customer.";
            };
            readonly promotionCodeData: {
                readonly description: "The items to be used to create promotion code";
                readonly type: "object";
                readonly required: readonly ["data"];
                readonly properties: {
                    readonly data: {
                        readonly minItems: 1;
                        readonly maxItems: 1;
                        readonly description: "The line items to be used to create promotion code";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly required: readonly ["code"];
                            readonly properties: {
                                readonly code: {
                                    readonly type: "string";
                                    readonly description: "The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer.";
                                    readonly maxLength: 20;
                                    readonly minLength: 2;
                                };
                                readonly expiredAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Date at which the promotion code can no longer be redeemed. If the coupon has specified a redeems_by, then this value cannot be after the coupon’s redeems_by.";
                                };
                                readonly maxRedemptions: {
                                    readonly type: "number";
                                    readonly description: "Maximum number of times this promotion code can be redeemed. If the coupon has specified a max_redemptions, then this value cannot be greater than the coupon’s max_redemptions.";
                                    readonly examples: readonly [1];
                                };
                                readonly metadata: {
                                    readonly type: "object";
                                    readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                    readonly additionalProperties: true;
                                };
                            };
                        };
                    };
                };
            };
        };
        readonly required: readonly ["name", "promotionCodeData"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Coupon id";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly description: "Organization id";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the coupon displayed to customers on for instance invoices or receipts.";
                };
                readonly percentOff: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly maximum: 100;
                    readonly description: "Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.";
                    readonly examples: readonly [1];
                };
                readonly amountOff: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "Fixed amount that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.";
                    readonly minimum: 0;
                    readonly examples: readonly ["9223372036854775807"];
                    readonly maximum: 9223372036854776000;
                };
                readonly currency: {
                    readonly type: "string";
                    readonly description: "Name of the currency displayed to customers on for instance invoices or receipts.";
                };
                readonly maxRedemptions: {
                    readonly type: "number";
                    readonly description: "Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.";
                    readonly examples: readonly [1];
                };
                readonly redeemBy: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Date after which the coupon can no longer be redeemed";
                };
                readonly isEnable: {
                    readonly type: "boolean";
                    readonly description: "Taking account of the above properties, whether this coupon can still be applied to a customer.";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Time at which this coupon was created.";
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                    readonly additionalProperties: true;
                };
                readonly isArchived: {
                    readonly type: "boolean";
                    readonly description: "Whether the coupon is archived.";
                };
                readonly archivedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Date at which the coupon was archived";
                };
                readonly promotionCodes: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Promotion code id";
                            };
                            readonly organizationId: {
                                readonly type: "string";
                                readonly description: "Organization id";
                            };
                            readonly code: {
                                readonly type: "string";
                                readonly description: "The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer.";
                                readonly maxLength: 20;
                                readonly minLength: 2;
                            };
                            readonly couponId: {
                                readonly type: "string";
                                readonly description: "Coupon id";
                            };
                            readonly isActive: {
                                readonly type: "boolean";
                                readonly description: "Whether the promotion code is currently active. A promotion code is only active if the coupon is also enabled.";
                            };
                            readonly expiredAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "Date at which the promotion code can no longer be redeemed. If the coupon has specified a redeems_by, then this value cannot be after the coupon’s redeems_by.";
                            };
                            readonly maxRedemptions: {
                                readonly type: "number";
                                readonly description: "Maximum number of times this promotion code can be redeemed. If the coupon has specified a max_redemptions, then this value cannot be greater than the coupon’s max_redemptions.";
                                readonly examples: readonly [1];
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "Date at which the promotion code was created";
                            };
                            readonly metadata: {
                                readonly type: "object";
                                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                readonly additionalProperties: true;
                            };
                        };
                        readonly required: readonly ["id", "organizationId", "code", "couponId", "isActive"];
                    };
                };
                readonly status: {
                    readonly description: "The status of the coupon.\n\n`active` `expired` `disabled` `limit_reached`";
                    readonly type: "string";
                    readonly enum: readonly ["active", "expired", "disabled", "limit_reached"];
                };
                readonly timesRedeemed: {
                    readonly type: "number";
                    readonly description: "Number of times this coupon has been applied.";
                    readonly examples: readonly [1];
                };
            };
            readonly required: readonly ["id", "organizationId", "name", "isEnable", "isArchived", "promotionCodes", "status"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CouponControllerDisable: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Coupon id";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly description: "Organization id";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the coupon displayed to customers on for instance invoices or receipts.";
                };
                readonly percentOff: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly maximum: 100;
                    readonly description: "Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.";
                    readonly examples: readonly [1];
                };
                readonly amountOff: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "Fixed amount that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.";
                    readonly minimum: 0;
                    readonly examples: readonly ["9223372036854775807"];
                    readonly maximum: 9223372036854776000;
                };
                readonly currency: {
                    readonly type: "string";
                    readonly description: "Name of the currency displayed to customers on for instance invoices or receipts.";
                };
                readonly maxRedemptions: {
                    readonly type: "number";
                    readonly description: "Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.";
                    readonly examples: readonly [1];
                };
                readonly redeemBy: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Date after which the coupon can no longer be redeemed";
                };
                readonly isEnable: {
                    readonly type: "boolean";
                    readonly description: "Taking account of the above properties, whether this coupon can still be applied to a customer.";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Time at which this coupon was created.";
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                    readonly additionalProperties: true;
                };
                readonly isArchived: {
                    readonly type: "boolean";
                    readonly description: "Whether the coupon is archived.";
                };
                readonly archivedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Date at which the coupon was archived";
                };
                readonly promotionCodes: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Promotion code id";
                            };
                            readonly organizationId: {
                                readonly type: "string";
                                readonly description: "Organization id";
                            };
                            readonly code: {
                                readonly type: "string";
                                readonly description: "The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer.";
                                readonly maxLength: 20;
                                readonly minLength: 2;
                            };
                            readonly couponId: {
                                readonly type: "string";
                                readonly description: "Coupon id";
                            };
                            readonly isActive: {
                                readonly type: "boolean";
                                readonly description: "Whether the promotion code is currently active. A promotion code is only active if the coupon is also enabled.";
                            };
                            readonly expiredAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "Date at which the promotion code can no longer be redeemed. If the coupon has specified a redeems_by, then this value cannot be after the coupon’s redeems_by.";
                            };
                            readonly maxRedemptions: {
                                readonly type: "number";
                                readonly description: "Maximum number of times this promotion code can be redeemed. If the coupon has specified a max_redemptions, then this value cannot be greater than the coupon’s max_redemptions.";
                                readonly examples: readonly [1];
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "Date at which the promotion code was created";
                            };
                            readonly metadata: {
                                readonly type: "object";
                                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                readonly additionalProperties: true;
                            };
                        };
                        readonly required: readonly ["id", "organizationId", "code", "couponId", "isActive"];
                    };
                };
                readonly status: {
                    readonly description: "The status of the coupon.\n\n`active` `expired` `disabled` `limit_reached`";
                    readonly type: "string";
                    readonly enum: readonly ["active", "expired", "disabled", "limit_reached"];
                };
                readonly timesRedeemed: {
                    readonly type: "number";
                    readonly description: "Number of times this coupon has been applied.";
                    readonly examples: readonly [1];
                };
            };
            readonly required: readonly ["id", "organizationId", "name", "isEnable", "isArchived", "promotionCodes", "status"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CouponControllerEnable: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Coupon id";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly description: "Organization id";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the coupon displayed to customers on for instance invoices or receipts.";
                };
                readonly percentOff: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly maximum: 100;
                    readonly description: "Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.";
                    readonly examples: readonly [1];
                };
                readonly amountOff: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "Fixed amount that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.";
                    readonly minimum: 0;
                    readonly examples: readonly ["9223372036854775807"];
                    readonly maximum: 9223372036854776000;
                };
                readonly currency: {
                    readonly type: "string";
                    readonly description: "Name of the currency displayed to customers on for instance invoices or receipts.";
                };
                readonly maxRedemptions: {
                    readonly type: "number";
                    readonly description: "Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.";
                    readonly examples: readonly [1];
                };
                readonly redeemBy: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Date after which the coupon can no longer be redeemed";
                };
                readonly isEnable: {
                    readonly type: "boolean";
                    readonly description: "Taking account of the above properties, whether this coupon can still be applied to a customer.";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Time at which this coupon was created.";
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                    readonly additionalProperties: true;
                };
                readonly isArchived: {
                    readonly type: "boolean";
                    readonly description: "Whether the coupon is archived.";
                };
                readonly archivedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Date at which the coupon was archived";
                };
                readonly promotionCodes: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Promotion code id";
                            };
                            readonly organizationId: {
                                readonly type: "string";
                                readonly description: "Organization id";
                            };
                            readonly code: {
                                readonly type: "string";
                                readonly description: "The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer.";
                                readonly maxLength: 20;
                                readonly minLength: 2;
                            };
                            readonly couponId: {
                                readonly type: "string";
                                readonly description: "Coupon id";
                            };
                            readonly isActive: {
                                readonly type: "boolean";
                                readonly description: "Whether the promotion code is currently active. A promotion code is only active if the coupon is also enabled.";
                            };
                            readonly expiredAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "Date at which the promotion code can no longer be redeemed. If the coupon has specified a redeems_by, then this value cannot be after the coupon’s redeems_by.";
                            };
                            readonly maxRedemptions: {
                                readonly type: "number";
                                readonly description: "Maximum number of times this promotion code can be redeemed. If the coupon has specified a max_redemptions, then this value cannot be greater than the coupon’s max_redemptions.";
                                readonly examples: readonly [1];
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "Date at which the promotion code was created";
                            };
                            readonly metadata: {
                                readonly type: "object";
                                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                readonly additionalProperties: true;
                            };
                        };
                        readonly required: readonly ["id", "organizationId", "code", "couponId", "isActive"];
                    };
                };
                readonly status: {
                    readonly description: "The status of the coupon.\n\n`active` `expired` `disabled` `limit_reached`";
                    readonly type: "string";
                    readonly enum: readonly ["active", "expired", "disabled", "limit_reached"];
                };
                readonly timesRedeemed: {
                    readonly type: "number";
                    readonly description: "Number of times this coupon has been applied.";
                    readonly examples: readonly [1];
                };
            };
            readonly required: readonly ["id", "organizationId", "name", "isEnable", "isArchived", "promotionCodes", "status"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CouponControllerGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Coupon id";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly description: "Organization id";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the coupon displayed to customers on for instance invoices or receipts.";
                };
                readonly percentOff: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly maximum: 100;
                    readonly description: "Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.";
                    readonly examples: readonly [1];
                };
                readonly amountOff: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "Fixed amount that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.";
                    readonly minimum: 0;
                    readonly examples: readonly ["9223372036854775807"];
                    readonly maximum: 9223372036854776000;
                };
                readonly currency: {
                    readonly type: "string";
                    readonly description: "Name of the currency displayed to customers on for instance invoices or receipts.";
                };
                readonly maxRedemptions: {
                    readonly type: "number";
                    readonly description: "Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.";
                    readonly examples: readonly [1];
                };
                readonly redeemBy: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Date after which the coupon can no longer be redeemed";
                };
                readonly isEnable: {
                    readonly type: "boolean";
                    readonly description: "Taking account of the above properties, whether this coupon can still be applied to a customer.";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Time at which this coupon was created.";
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                    readonly additionalProperties: true;
                };
                readonly isArchived: {
                    readonly type: "boolean";
                    readonly description: "Whether the coupon is archived.";
                };
                readonly archivedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Date at which the coupon was archived";
                };
                readonly promotionCodes: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Promotion code id";
                            };
                            readonly organizationId: {
                                readonly type: "string";
                                readonly description: "Organization id";
                            };
                            readonly code: {
                                readonly type: "string";
                                readonly description: "The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer.";
                                readonly maxLength: 20;
                                readonly minLength: 2;
                            };
                            readonly couponId: {
                                readonly type: "string";
                                readonly description: "Coupon id";
                            };
                            readonly isActive: {
                                readonly type: "boolean";
                                readonly description: "Whether the promotion code is currently active. A promotion code is only active if the coupon is also enabled.";
                            };
                            readonly expiredAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "Date at which the promotion code can no longer be redeemed. If the coupon has specified a redeems_by, then this value cannot be after the coupon’s redeems_by.";
                            };
                            readonly maxRedemptions: {
                                readonly type: "number";
                                readonly description: "Maximum number of times this promotion code can be redeemed. If the coupon has specified a max_redemptions, then this value cannot be greater than the coupon’s max_redemptions.";
                                readonly examples: readonly [1];
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "Date at which the promotion code was created";
                            };
                            readonly metadata: {
                                readonly type: "object";
                                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                readonly additionalProperties: true;
                            };
                        };
                        readonly required: readonly ["id", "organizationId", "code", "couponId", "isActive"];
                    };
                };
                readonly status: {
                    readonly description: "The status of the coupon.\n\n`active` `expired` `disabled` `limit_reached`";
                    readonly type: "string";
                    readonly enum: readonly ["active", "expired", "disabled", "limit_reached"];
                };
                readonly timesRedeemed: {
                    readonly type: "number";
                    readonly description: "Number of times this coupon has been applied.";
                    readonly examples: readonly [1];
                };
            };
            readonly required: readonly ["id", "organizationId", "name", "isEnable", "isArchived", "promotionCodes", "status"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CouponControllerSearch: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly minimum: 1;
                    readonly default: 1;
                    readonly type: "number";
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number. Starts from 1";
                };
                readonly limit: {
                    readonly minimum: 1;
                    readonly maximum: 200;
                    readonly default: 200;
                    readonly type: "number";
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of items per page";
                };
                readonly isnull: {
                    readonly type: "boolean";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Returns null values";
                };
                readonly notnull: {
                    readonly type: "boolean";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Returns not null values";
                };
                readonly gt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Returns values greater than the given date";
                };
                readonly gte: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Returns values greater than or equal to the given date";
                };
                readonly lt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Returns values less than the given date";
                };
                readonly lte: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Returns values less than or equal to the given date";
                };
                readonly ids: {
                    readonly format: "uuid";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0", "c3611c05-df51-4b47-b601-f2eac02f4ef2"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by id. Returns items with given ids";
                };
                readonly isEnable: {
                    readonly type: "boolean";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "If true, only active coupons will be returned";
                };
                readonly isArchived: {
                    readonly type: "boolean";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "If true, only archived coupons will be returned";
                };
                readonly searchText: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["page", "limit", "count", "hasMore", "data"];
            readonly properties: {
                readonly page: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly description: "Page number. Starts from 1";
                    readonly examples: readonly [1];
                };
                readonly limit: {
                    readonly type: "number";
                    readonly default: 200;
                    readonly description: "Number of items per page";
                    readonly examples: readonly [10];
                };
                readonly count: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly hasMore: {
                    readonly type: "boolean";
                };
                readonly query: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly default: 1;
                            readonly description: "Page number. Starts from 1";
                            readonly examples: readonly [1];
                        };
                        readonly limit: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly maximum: 200;
                            readonly default: 200;
                            readonly description: "Number of items per page";
                            readonly examples: readonly [10];
                        };
                        readonly createdAt: {
                            readonly description: "Filter by created date";
                            readonly type: "object";
                            readonly properties: {
                                readonly isnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns null values";
                                };
                                readonly notnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns not null values";
                                };
                                readonly gt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than the given date";
                                    readonly examples: readonly ["2020-01-01"];
                                };
                                readonly gte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than or equal to the given date";
                                };
                                readonly lt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than the given date";
                                };
                                readonly lte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than or equal to the given date";
                                };
                            };
                        };
                    };
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["id", "organizationId", "name", "isEnable", "isArchived", "promotionCodes", "status"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Coupon id";
                            };
                            readonly organizationId: {
                                readonly type: "string";
                                readonly description: "Organization id";
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Name of the coupon displayed to customers on for instance invoices or receipts.";
                            };
                            readonly percentOff: {
                                readonly type: "number";
                                readonly minimum: 0;
                                readonly maximum: 100;
                                readonly description: "Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.";
                                readonly examples: readonly [1];
                            };
                            readonly amountOff: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly description: "Fixed amount that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.";
                                readonly minimum: 0;
                                readonly examples: readonly ["9223372036854775807"];
                                readonly maximum: 9223372036854776000;
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly description: "Name of the currency displayed to customers on for instance invoices or receipts.";
                            };
                            readonly maxRedemptions: {
                                readonly type: "number";
                                readonly description: "Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.";
                                readonly examples: readonly [1];
                            };
                            readonly redeemBy: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "Date after which the coupon can no longer be redeemed";
                            };
                            readonly isEnable: {
                                readonly type: "boolean";
                                readonly description: "Taking account of the above properties, whether this coupon can still be applied to a customer.";
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "Time at which this coupon was created.";
                            };
                            readonly metadata: {
                                readonly type: "object";
                                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                readonly additionalProperties: true;
                            };
                            readonly isArchived: {
                                readonly type: "boolean";
                                readonly description: "Whether the coupon is archived.";
                            };
                            readonly archivedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "Date at which the coupon was archived";
                            };
                            readonly promotionCodes: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly required: readonly ["id", "organizationId", "code", "couponId", "isActive"];
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "Promotion code id";
                                        };
                                        readonly organizationId: {
                                            readonly type: "string";
                                            readonly description: "Organization id";
                                        };
                                        readonly code: {
                                            readonly type: "string";
                                            readonly description: "The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer.";
                                            readonly maxLength: 20;
                                            readonly minLength: 2;
                                        };
                                        readonly couponId: {
                                            readonly type: "string";
                                            readonly description: "Coupon id";
                                        };
                                        readonly isActive: {
                                            readonly type: "boolean";
                                            readonly description: "Whether the promotion code is currently active. A promotion code is only active if the coupon is also enabled.";
                                        };
                                        readonly expiredAt: {
                                            readonly format: "date-time";
                                            readonly type: "string";
                                            readonly description: "Date at which the promotion code can no longer be redeemed. If the coupon has specified a redeems_by, then this value cannot be after the coupon’s redeems_by.";
                                        };
                                        readonly maxRedemptions: {
                                            readonly type: "number";
                                            readonly description: "Maximum number of times this promotion code can be redeemed. If the coupon has specified a max_redemptions, then this value cannot be greater than the coupon’s max_redemptions.";
                                            readonly examples: readonly [1];
                                        };
                                        readonly createdAt: {
                                            readonly format: "date-time";
                                            readonly type: "string";
                                            readonly description: "Date at which the promotion code was created";
                                        };
                                        readonly metadata: {
                                            readonly type: "object";
                                            readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                            readonly additionalProperties: true;
                                        };
                                    };
                                };
                            };
                            readonly status: {
                                readonly description: "The status of the coupon.\n\n`active` `expired` `disabled` `limit_reached`";
                                readonly type: "string";
                                readonly enum: readonly ["active", "expired", "disabled", "limit_reached"];
                            };
                            readonly timesRedeemed: {
                                readonly type: "number";
                                readonly description: "Number of times this coupon has been applied.";
                                readonly examples: readonly [1];
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CouponControllerUpdate: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "Name of the coupon displayed to customers on for instance invoices or receipts.";
            };
            readonly maxRedemptions: {
                readonly type: "number";
                readonly description: "Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.";
                readonly examples: readonly [1];
            };
            readonly redeemBy: {
                readonly format: "date-time";
                readonly type: "string";
                readonly description: "Date after which the coupon can no longer be redeemed";
            };
            readonly metadata: {
                readonly type: "object";
                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                readonly additionalProperties: true;
            };
            readonly isEnable: {
                readonly type: "boolean";
                readonly description: "Taking account of the above properties, whether this coupon can still be applied to a customer.";
            };
        };
        readonly required: readonly ["name"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Coupon id";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly description: "Organization id";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the coupon displayed to customers on for instance invoices or receipts.";
                };
                readonly percentOff: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly maximum: 100;
                    readonly description: "Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.";
                    readonly examples: readonly [1];
                };
                readonly amountOff: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "Fixed amount that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.";
                    readonly minimum: 0;
                    readonly examples: readonly ["9223372036854775807"];
                    readonly maximum: 9223372036854776000;
                };
                readonly currency: {
                    readonly type: "string";
                    readonly description: "Name of the currency displayed to customers on for instance invoices or receipts.";
                };
                readonly maxRedemptions: {
                    readonly type: "number";
                    readonly description: "Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.";
                    readonly examples: readonly [1];
                };
                readonly redeemBy: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Date after which the coupon can no longer be redeemed";
                };
                readonly isEnable: {
                    readonly type: "boolean";
                    readonly description: "Taking account of the above properties, whether this coupon can still be applied to a customer.";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Time at which this coupon was created.";
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                    readonly additionalProperties: true;
                };
                readonly isArchived: {
                    readonly type: "boolean";
                    readonly description: "Whether the coupon is archived.";
                };
                readonly archivedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Date at which the coupon was archived";
                };
                readonly promotionCodes: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Promotion code id";
                            };
                            readonly organizationId: {
                                readonly type: "string";
                                readonly description: "Organization id";
                            };
                            readonly code: {
                                readonly type: "string";
                                readonly description: "The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer.";
                                readonly maxLength: 20;
                                readonly minLength: 2;
                            };
                            readonly couponId: {
                                readonly type: "string";
                                readonly description: "Coupon id";
                            };
                            readonly isActive: {
                                readonly type: "boolean";
                                readonly description: "Whether the promotion code is currently active. A promotion code is only active if the coupon is also enabled.";
                            };
                            readonly expiredAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "Date at which the promotion code can no longer be redeemed. If the coupon has specified a redeems_by, then this value cannot be after the coupon’s redeems_by.";
                            };
                            readonly maxRedemptions: {
                                readonly type: "number";
                                readonly description: "Maximum number of times this promotion code can be redeemed. If the coupon has specified a max_redemptions, then this value cannot be greater than the coupon’s max_redemptions.";
                                readonly examples: readonly [1];
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "Date at which the promotion code was created";
                            };
                            readonly metadata: {
                                readonly type: "object";
                                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                readonly additionalProperties: true;
                            };
                        };
                        readonly required: readonly ["id", "organizationId", "code", "couponId", "isActive"];
                    };
                };
                readonly status: {
                    readonly description: "The status of the coupon.\n\n`active` `expired` `disabled` `limit_reached`";
                    readonly type: "string";
                    readonly enum: readonly ["active", "expired", "disabled", "limit_reached"];
                };
                readonly timesRedeemed: {
                    readonly type: "number";
                    readonly description: "Number of times this coupon has been applied.";
                    readonly examples: readonly [1];
                };
            };
            readonly required: readonly ["id", "organizationId", "name", "isEnable", "isArchived", "promotionCodes", "status"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CustomerControllerCreate: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "The name";
            };
            readonly phone: {
                readonly type: "string";
                readonly description: "The phone";
            };
            readonly organizationName: {
                readonly type: "string";
                readonly description: "The organization name";
            };
            readonly address: {
                readonly description: "The address";
                readonly type: "object";
                readonly properties: {
                    readonly line1: {
                        readonly type: "string";
                    };
                    readonly line2: {
                        readonly type: "string";
                    };
                    readonly city: {
                        readonly type: "string";
                    };
                    readonly state: {
                        readonly type: "string";
                    };
                    readonly postalCode: {
                        readonly type: "string";
                    };
                    readonly country: {
                        readonly type: "string";
                    };
                };
            };
            readonly customerReferenceId: {
                readonly type: "string";
                readonly description: "Customer's reference id";
            };
            readonly shipping: {
                readonly description: "Customer's shipping address";
                readonly type: "object";
                readonly properties: {
                    readonly name: {
                        readonly type: "string";
                        readonly description: "The name";
                    };
                    readonly email: {
                        readonly type: "string";
                        readonly description: "The email";
                    };
                    readonly phone: {
                        readonly type: "string";
                        readonly description: "The phone";
                    };
                    readonly organizationName: {
                        readonly type: "string";
                        readonly description: "The organization name";
                    };
                    readonly address: {
                        readonly description: "The address";
                        readonly type: "object";
                        readonly properties: {
                            readonly line1: {
                                readonly type: "string";
                            };
                            readonly line2: {
                                readonly type: "string";
                            };
                            readonly city: {
                                readonly type: "string";
                            };
                            readonly state: {
                                readonly type: "string";
                            };
                            readonly postalCode: {
                                readonly type: "string";
                            };
                            readonly country: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
            readonly visibility: {
                readonly type: "string";
                readonly enum: readonly [10, 20];
                readonly description: "Customer's visibility. If Dashboard then displayed on dashboard UI. If API then only returned in API response only.";
            };
            readonly metadata: {
                readonly type: "object";
                readonly description: "Customer's metadata";
                readonly additionalProperties: true;
            };
            readonly email: {
                readonly type: "string";
                readonly description: "The email";
            };
            readonly taxIds: {
                readonly type: "object";
                readonly properties: {
                    readonly object: {
                        readonly type: "string";
                    };
                    readonly data: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly value: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                };
            };
        };
        readonly required: readonly ["email"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly name: {
                    readonly type: "string";
                    readonly description: "The name";
                };
                readonly email: {
                    readonly type: "string";
                    readonly description: "The email";
                };
                readonly phone: {
                    readonly type: "string";
                    readonly description: "The phone";
                };
                readonly organizationName: {
                    readonly type: "string";
                    readonly description: "The organization name";
                };
                readonly address: {
                    readonly description: "The address";
                    readonly type: "object";
                    readonly properties: {
                        readonly line1: {
                            readonly type: "string";
                        };
                        readonly line2: {
                            readonly type: "string";
                        };
                        readonly city: {
                            readonly type: "string";
                        };
                        readonly state: {
                            readonly type: "string";
                        };
                        readonly postalCode: {
                            readonly type: "string";
                        };
                        readonly country: {
                            readonly type: "string";
                        };
                    };
                };
                readonly id: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Customer's id";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Customer's created at";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Customer's updated at";
                };
                readonly customerReferenceId: {
                    readonly type: "string";
                    readonly description: "Customer's reference id";
                };
                readonly shipping: {
                    readonly description: "Customer's shipping address";
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                };
                readonly taxIds: {
                    readonly type: "object";
                    readonly properties: {
                        readonly object: {
                            readonly type: "string";
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly updatedAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly value: {
                                        readonly type: "string";
                                    };
                                    readonly country: {
                                        readonly type: "string";
                                    };
                                    readonly customerId: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                    };
                                };
                                readonly required: readonly ["id", "customerId"];
                            };
                        };
                    };
                };
                readonly visibility: {
                    readonly description: "Customer's visibility. If Dashboard then displayed on dashboard UI. If API then only returned in API response only.\n\n`10` `20`";
                    readonly type: "string";
                    readonly enum: readonly [10, 20];
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly description: "Customer's metadata";
                    readonly additionalProperties: true;
                };
                readonly customerNumber: {
                    readonly type: "string";
                    readonly description: "Customer number assigned by the system";
                };
            };
            readonly required: readonly ["id", "customerNumber"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CustomerControllerDelete: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "string";
                };
                readonly statusCode: {
                    readonly type: "number";
                };
            };
            readonly required: readonly ["message", "statusCode"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CustomerControllerFindAll: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number. Starts from 1";
                };
                readonly limit: {
                    readonly type: "number";
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of items per page";
                };
                readonly createdAt: {
                    readonly type: "object";
                    readonly properties: {
                        readonly isnull: {
                            readonly type: "boolean";
                            readonly description: "Returns null values";
                        };
                        readonly notnull: {
                            readonly type: "boolean";
                            readonly description: "Returns not null values";
                        };
                        readonly gt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than the given date";
                            readonly examples: readonly ["2020-01-01"];
                        };
                        readonly gte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than or equal to the given date";
                        };
                        readonly lt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than the given date";
                        };
                        readonly lte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than or equal to the given date";
                        };
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by created date";
                };
                readonly ids: {
                    readonly type: "string";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0", "c3611c05-df51-4b47-b601-f2eac02f4ef2"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by id. Returns items with given ids";
                };
                readonly visibility: {
                    readonly type: "string";
                    readonly enum: readonly [10, 20];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly email: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly customerReferenceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["page", "limit", "count", "hasMore", "data"];
            readonly properties: {
                readonly page: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly description: "Page number. Starts from 1";
                    readonly examples: readonly [1];
                };
                readonly limit: {
                    readonly type: "number";
                    readonly default: 200;
                    readonly description: "Number of items per page";
                    readonly examples: readonly [10];
                };
                readonly count: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly hasMore: {
                    readonly type: "boolean";
                };
                readonly query: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly default: 1;
                            readonly description: "Page number. Starts from 1";
                            readonly examples: readonly [1];
                        };
                        readonly limit: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly maximum: 200;
                            readonly default: 200;
                            readonly description: "Number of items per page";
                            readonly examples: readonly [10];
                        };
                        readonly createdAt: {
                            readonly description: "Filter by created date";
                            readonly type: "object";
                            readonly properties: {
                                readonly isnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns null values";
                                };
                                readonly notnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns not null values";
                                };
                                readonly gt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than the given date";
                                    readonly examples: readonly ["2020-01-01"];
                                };
                                readonly gte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than or equal to the given date";
                                };
                                readonly lt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than the given date";
                                };
                                readonly lte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than or equal to the given date";
                                };
                            };
                        };
                    };
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["id", "customerNumber"];
                        readonly properties: {
                            readonly name: {
                                readonly type: "string";
                                readonly description: "The name";
                            };
                            readonly email: {
                                readonly type: "string";
                                readonly description: "The email";
                            };
                            readonly phone: {
                                readonly type: "string";
                                readonly description: "The phone";
                            };
                            readonly organizationName: {
                                readonly type: "string";
                                readonly description: "The organization name";
                            };
                            readonly address: {
                                readonly description: "The address";
                                readonly type: "object";
                                readonly properties: {
                                    readonly line1: {
                                        readonly type: "string";
                                    };
                                    readonly line2: {
                                        readonly type: "string";
                                    };
                                    readonly city: {
                                        readonly type: "string";
                                    };
                                    readonly state: {
                                        readonly type: "string";
                                    };
                                    readonly postalCode: {
                                        readonly type: "string";
                                    };
                                    readonly country: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "Customer's id";
                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "Customer's created at";
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "Customer's updated at";
                            };
                            readonly customerReferenceId: {
                                readonly type: "string";
                                readonly description: "Customer's reference id";
                            };
                            readonly shipping: {
                                readonly description: "Customer's shipping address";
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "The name";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                        readonly description: "The email";
                                    };
                                    readonly phone: {
                                        readonly type: "string";
                                        readonly description: "The phone";
                                    };
                                    readonly organizationName: {
                                        readonly type: "string";
                                        readonly description: "The organization name";
                                    };
                                    readonly address: {
                                        readonly description: "The address";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly line1: {
                                                readonly type: "string";
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                            };
                                            readonly city: {
                                                readonly type: "string";
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                            };
                                            readonly postalCode: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                            };
                            readonly taxIds: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly object: {
                                        readonly type: "string";
                                    };
                                    readonly data: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["id", "customerId"];
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly createdAt: {
                                                    readonly format: "date-time";
                                                    readonly type: "string";
                                                };
                                                readonly updatedAt: {
                                                    readonly format: "date-time";
                                                    readonly type: "string";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                };
                                                readonly value: {
                                                    readonly type: "string";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                };
                                                readonly customerId: {
                                                    readonly type: "string";
                                                    readonly format: "uuid";
                                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            readonly visibility: {
                                readonly description: "Customer's visibility. If Dashboard then displayed on dashboard UI. If API then only returned in API response only.\n\n`10` `20`";
                                readonly type: "string";
                                readonly enum: readonly [10, 20];
                            };
                            readonly metadata: {
                                readonly type: "object";
                                readonly description: "Customer's metadata";
                                readonly additionalProperties: true;
                            };
                            readonly customerNumber: {
                                readonly type: "string";
                                readonly description: "Customer number assigned by the system";
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CustomerControllerGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly name: {
                    readonly type: "string";
                    readonly description: "The name";
                };
                readonly email: {
                    readonly type: "string";
                    readonly description: "The email";
                };
                readonly phone: {
                    readonly type: "string";
                    readonly description: "The phone";
                };
                readonly organizationName: {
                    readonly type: "string";
                    readonly description: "The organization name";
                };
                readonly address: {
                    readonly description: "The address";
                    readonly type: "object";
                    readonly properties: {
                        readonly line1: {
                            readonly type: "string";
                        };
                        readonly line2: {
                            readonly type: "string";
                        };
                        readonly city: {
                            readonly type: "string";
                        };
                        readonly state: {
                            readonly type: "string";
                        };
                        readonly postalCode: {
                            readonly type: "string";
                        };
                        readonly country: {
                            readonly type: "string";
                        };
                    };
                };
                readonly id: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Customer's id";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Customer's created at";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Customer's updated at";
                };
                readonly customerReferenceId: {
                    readonly type: "string";
                    readonly description: "Customer's reference id";
                };
                readonly shipping: {
                    readonly description: "Customer's shipping address";
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                };
                readonly taxIds: {
                    readonly type: "object";
                    readonly properties: {
                        readonly object: {
                            readonly type: "string";
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly updatedAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly value: {
                                        readonly type: "string";
                                    };
                                    readonly country: {
                                        readonly type: "string";
                                    };
                                    readonly customerId: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                    };
                                };
                                readonly required: readonly ["id", "customerId"];
                            };
                        };
                    };
                };
                readonly visibility: {
                    readonly description: "Customer's visibility. If Dashboard then displayed on dashboard UI. If API then only returned in API response only.\n\n`10` `20`";
                    readonly type: "string";
                    readonly enum: readonly [10, 20];
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly description: "Customer's metadata";
                    readonly additionalProperties: true;
                };
                readonly customerNumber: {
                    readonly type: "string";
                    readonly description: "Customer number assigned by the system";
                };
            };
            readonly required: readonly ["id", "customerNumber"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CustomerControllerUpdate: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "The name";
            };
            readonly phone: {
                readonly type: "string";
                readonly description: "The phone";
            };
            readonly organizationName: {
                readonly type: "string";
                readonly description: "The organization name";
            };
            readonly address: {
                readonly description: "The address";
                readonly type: "object";
                readonly properties: {
                    readonly line1: {
                        readonly type: "string";
                    };
                    readonly line2: {
                        readonly type: "string";
                    };
                    readonly city: {
                        readonly type: "string";
                    };
                    readonly state: {
                        readonly type: "string";
                    };
                    readonly postalCode: {
                        readonly type: "string";
                    };
                    readonly country: {
                        readonly type: "string";
                    };
                };
            };
            readonly shipping: {
                readonly description: "Customer's shipping address";
                readonly type: "object";
                readonly properties: {
                    readonly name: {
                        readonly type: "string";
                        readonly description: "The name";
                    };
                    readonly email: {
                        readonly type: "string";
                        readonly description: "The email";
                    };
                    readonly phone: {
                        readonly type: "string";
                        readonly description: "The phone";
                    };
                    readonly organizationName: {
                        readonly type: "string";
                        readonly description: "The organization name";
                    };
                    readonly address: {
                        readonly description: "The address";
                        readonly type: "object";
                        readonly properties: {
                            readonly line1: {
                                readonly type: "string";
                            };
                            readonly line2: {
                                readonly type: "string";
                            };
                            readonly city: {
                                readonly type: "string";
                            };
                            readonly state: {
                                readonly type: "string";
                            };
                            readonly postalCode: {
                                readonly type: "string";
                            };
                            readonly country: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
            readonly visibility: {
                readonly type: "string";
                readonly enum: readonly [10, 20];
                readonly description: "Customer's visibility. If Dashboard then displayed on dashboard UI. If API then only returned in API response only.";
            };
            readonly metadata: {
                readonly type: "object";
                readonly description: "Customer's metadata";
                readonly additionalProperties: true;
            };
            readonly email: {
                readonly type: "string";
                readonly description: "The email";
            };
            readonly taxIds: {
                readonly type: "object";
                readonly properties: {
                    readonly object: {
                        readonly type: "string";
                    };
                    readonly data: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly value: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                };
            };
        };
        readonly required: readonly ["email"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly name: {
                    readonly type: "string";
                    readonly description: "The name";
                };
                readonly email: {
                    readonly type: "string";
                    readonly description: "The email";
                };
                readonly phone: {
                    readonly type: "string";
                    readonly description: "The phone";
                };
                readonly organizationName: {
                    readonly type: "string";
                    readonly description: "The organization name";
                };
                readonly address: {
                    readonly description: "The address";
                    readonly type: "object";
                    readonly properties: {
                        readonly line1: {
                            readonly type: "string";
                        };
                        readonly line2: {
                            readonly type: "string";
                        };
                        readonly city: {
                            readonly type: "string";
                        };
                        readonly state: {
                            readonly type: "string";
                        };
                        readonly postalCode: {
                            readonly type: "string";
                        };
                        readonly country: {
                            readonly type: "string";
                        };
                    };
                };
                readonly id: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Customer's id";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Customer's created at";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Customer's updated at";
                };
                readonly customerReferenceId: {
                    readonly type: "string";
                    readonly description: "Customer's reference id";
                };
                readonly shipping: {
                    readonly description: "Customer's shipping address";
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                };
                readonly taxIds: {
                    readonly type: "object";
                    readonly properties: {
                        readonly object: {
                            readonly type: "string";
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly updatedAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly value: {
                                        readonly type: "string";
                                    };
                                    readonly country: {
                                        readonly type: "string";
                                    };
                                    readonly customerId: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                    };
                                };
                                readonly required: readonly ["id", "customerId"];
                            };
                        };
                    };
                };
                readonly visibility: {
                    readonly description: "Customer's visibility. If Dashboard then displayed on dashboard UI. If API then only returned in API response only.\n\n`10` `20`";
                    readonly type: "string";
                    readonly enum: readonly [10, 20];
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly description: "Customer's metadata";
                    readonly additionalProperties: true;
                };
                readonly customerNumber: {
                    readonly type: "string";
                    readonly description: "Customer number assigned by the system";
                };
            };
            readonly required: readonly ["id", "customerNumber"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const InvoiceControllerCreate: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly description: {
                readonly type: "string";
            };
            readonly customFields: {
                readonly type: "object";
                readonly properties: {
                    readonly fields: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly value: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["name", "value"];
                        };
                    };
                };
            };
            readonly dueDate: {
                readonly format: "date-time";
                readonly type: "string";
            };
            readonly footer: {
                readonly type: "string";
            };
            readonly fromInvoiceId: {
                readonly type: "string";
                readonly format: "uuid";
                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
            };
            readonly metadata: {
                readonly type: "object";
                readonly additionalProperties: true;
            };
            readonly clientReferenceId: {
                readonly type: "string";
            };
            readonly visibility: {
                readonly type: "string";
                readonly enum: readonly [10, 20];
            };
            readonly allowPromotionCodes: {
                readonly type: "boolean";
                readonly description: "Enables user redeemable promotion codes.";
            };
            readonly customerId: {
                readonly type: "string";
                readonly format: "uuid";
                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
            };
            readonly lineItems: {
                readonly type: "object";
                readonly properties: {
                    readonly data: {
                        readonly minItems: 1;
                        readonly description: "The line items to be used in checkout session";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly priceId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly description: "The id of the price to use in checkout session";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly priceData: {
                                    readonly description: "The price data to be created to use in checkout session";
                                    readonly type: "object";
                                    readonly required: readonly ["currency", "unitAmount"];
                                    readonly properties: {
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                            readonly description: "The currency symbol";
                                        };
                                        readonly interval: {
                                            readonly description: "The interval at which to bill for this price. Only required for subscriptions";
                                            readonly type: "string";
                                            readonly enum: readonly ["day", "week", "month", "year"];
                                        };
                                        readonly intervalCount: {
                                            readonly type: "number";
                                            readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                                            readonly examples: readonly [1];
                                        };
                                        readonly unitAmount: {
                                            readonly format: "int64";
                                            readonly type: "integer";
                                            readonly description: "The unit amount in 8 decimals, represented as a whole integer";
                                            readonly examples: readonly ["9223372036854775807"];
                                            readonly minimum: -9223372036854776000;
                                            readonly maximum: 9223372036854776000;
                                        };
                                        readonly productId: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                            readonly description: "The id of the product for which this price is associated";
                                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                        };
                                        readonly productData: {
                                            readonly description: "The product data to be created to link with this price";
                                            readonly type: "object";
                                            readonly required: readonly ["name"];
                                            readonly properties: {
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the product. Displayed on the checkout page";
                                                };
                                                readonly description: {
                                                    readonly type: "string";
                                                    readonly description: "The description of the product. Displayed on the checkout page";
                                                };
                                                readonly images: {
                                                    readonly maxItems: 8;
                                                    readonly description: "The url of product images. Displayed on the checkout page";
                                                    readonly type: "array";
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                                readonly unitLabel: {
                                                    readonly type: "string";
                                                    readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                                };
                                                readonly url: {
                                                    readonly type: "string";
                                                    readonly description: "The url of the product";
                                                };
                                                readonly metadata: {
                                                    readonly type: "object";
                                                    readonly description: "The metadata of the product";
                                                    readonly additionalProperties: true;
                                                };
                                                readonly visibility: {
                                                    readonly description: "The visibility of the product";
                                                    readonly type: "string";
                                                    readonly enum: readonly [10, 20];
                                                };
                                            };
                                        };
                                        readonly type: {
                                            readonly description: "The type of the price";
                                            readonly type: "string";
                                            readonly enum: readonly ["one_time", "recurring", "streaming"];
                                        };
                                    };
                                };
                                readonly quantity: {
                                    readonly type: "number";
                                    readonly default: 1;
                                    readonly description: "The quantity of the line item";
                                    readonly examples: readonly [1];
                                };
                                readonly periodStart: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly periodEnd: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly taxRateIds: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                    };
                };
                readonly required: readonly ["data"];
            };
            readonly paymentSetting: {
                readonly type: "object";
                readonly properties: {
                    readonly allowedChains: {
                        readonly description: "The list of chains allowed for the payment. If not provided, all chains supported by the organization are enabled.";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly chainId: {
                                    readonly type: "number";
                                    readonly examples: readonly [1];
                                };
                                readonly blacklistCurrencies: {
                                    readonly type: "array";
                                    readonly description: "The list of currencies to disable for the payment. Note: This field is only used for checkout session API atm.";
                                    readonly items: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                    };
                                    readonly examples: readonly ["usdc"];
                                };
                                readonly withdrawalAddress: {
                                    readonly type: "string";
                                    readonly description: "This is optional, default withdrawal address configured in dashboard under settings > payment methods is used. The custom withdrawal address to use for this chain instead of stored default withdrawal address.";
                                };
                                readonly withdrawalAddresses: {
                                    readonly description: "The list of withdrawal addresses to split the payment. If provided, the sum of all split percentages should be 100.";
                                    readonly minItems: 2;
                                    readonly maxItems: 4;
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly splitPercentage: {
                                                readonly type: "number";
                                                readonly minimum: 0;
                                                readonly maximum: 100;
                                                readonly examples: readonly [1];
                                            };
                                            readonly address: {
                                                readonly type: "string";
                                                readonly description: "The withdrawal address for the split percentage";
                                            };
                                        };
                                        readonly required: readonly ["splitPercentage", "address"];
                                    };
                                };
                            };
                            readonly required: readonly ["chainId"];
                        };
                    };
                    readonly preferredChainId: {
                        readonly type: "number";
                        readonly description: "The preferred chain's id";
                        readonly examples: readonly [1];
                    };
                    readonly preferredCurrency: {
                        readonly type: "string";
                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                        readonly description: "The preferred currency for payment";
                    };
                    readonly allowSwap: {
                        readonly type: "boolean";
                        readonly description: "Whether the user can swap the payment currency";
                        readonly default: false;
                    };
                };
            };
            readonly taxRateIds: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly total: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly subTotal: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly customer: {
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Customer's id";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's created at";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's updated at";
                        };
                        readonly customerReferenceId: {
                            readonly type: "string";
                            readonly description: "Customer's reference id";
                        };
                        readonly shipping: {
                            readonly description: "Customer's shipping address";
                            readonly type: "object";
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name";
                                };
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The email";
                                };
                                readonly phone: {
                                    readonly type: "string";
                                    readonly description: "The phone";
                                };
                                readonly organizationName: {
                                    readonly type: "string";
                                    readonly description: "The organization name";
                                };
                                readonly address: {
                                    readonly description: "The address";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly line1: {
                                            readonly type: "string";
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                        };
                                        readonly postalCode: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly taxIds: {
                            readonly type: "object";
                            readonly properties: {
                                readonly object: {
                                    readonly type: "string";
                                };
                                readonly data: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                            readonly customerId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                        };
                                        readonly required: readonly ["id", "customerId"];
                                    };
                                };
                            };
                        };
                        readonly visibility: {
                            readonly description: "Customer's visibility. If Dashboard then displayed on dashboard UI. If API then only returned in API response only.\n\n`10` `20`";
                            readonly type: "string";
                            readonly enum: readonly [10, 20];
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "Customer's metadata";
                            readonly additionalProperties: true;
                        };
                        readonly customerNumber: {
                            readonly type: "string";
                            readonly description: "Customer number assigned by the system";
                        };
                    };
                    readonly required: readonly ["id", "customerNumber"];
                };
                readonly autoAdvance: {
                    readonly type: "boolean";
                };
                readonly collectionMethod: {
                    readonly type: "string";
                    readonly enum: readonly ["charge_automatically", "send_invoice"];
                    readonly description: "`charge_automatically` `send_invoice`";
                };
                readonly invoiceType: {
                    readonly type: "string";
                    readonly enum: readonly ["one_time", "recurring"];
                    readonly description: "`one_time` `recurring`";
                };
                readonly customFields: {
                    readonly type: "object";
                    readonly properties: {
                        readonly fields: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly value: {
                                        readonly type: "string";
                                    };
                                };
                                readonly required: readonly ["name", "value"];
                            };
                        };
                    };
                };
                readonly paymentSettingId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly paymentSetting: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly description: "A list of the types of payment methods";
                            readonly minItems: 1;
                            readonly maxItems: 1;
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                            readonly examples: readonly ["wallet"];
                        };
                        readonly allowedChains: {
                            readonly description: "The list of chains allowed for the payment. If not provided, all chains supported by the organization are enabled.";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly chainId: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly blacklistCurrencies: {
                                        readonly type: "array";
                                        readonly description: "The list of currencies to disable for the payment. Note: This field is only used for checkout session API atm.";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                        };
                                        readonly examples: readonly ["usdc"];
                                    };
                                    readonly withdrawalAddress: {
                                        readonly type: "string";
                                        readonly description: "This is optional, default withdrawal address configured in dashboard under settings > payment methods is used. The custom withdrawal address to use for this chain instead of stored default withdrawal address.";
                                    };
                                    readonly withdrawalAddresses: {
                                        readonly description: "The list of withdrawal addresses to split the payment. If provided, the sum of all split percentages should be 100.";
                                        readonly minItems: 2;
                                        readonly maxItems: 4;
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly splitPercentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly examples: readonly [1];
                                                };
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "The withdrawal address for the split percentage";
                                                };
                                            };
                                            readonly required: readonly ["splitPercentage", "address"];
                                        };
                                    };
                                };
                                readonly required: readonly ["chainId"];
                            };
                        };
                        readonly allowedCurrencies: {
                            readonly type: "array";
                            readonly description: "The list of currencies allowed for the payment.";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                            };
                            readonly examples: readonly ["usdc", "usdt"];
                        };
                        readonly preferredChainId: {
                            readonly type: "number";
                            readonly description: "The preferred chain's id";
                            readonly examples: readonly [1];
                        };
                        readonly preferredCurrency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                            readonly description: "The preferred currency for payment\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                        };
                        readonly allowSwap: {
                            readonly type: "boolean";
                            readonly description: "Whether the user can swap the payment currency";
                            readonly default: false;
                        };
                        readonly applyFee: {
                            readonly type: "boolean";
                            readonly description: "Whether add a application fee to the user payment";
                            readonly default: false;
                        };
                        readonly feePercentage: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly maximum: 100;
                            readonly description: "Percent that will be added to subtotal as a fee";
                            readonly examples: readonly [1];
                        };
                        readonly applyGasFee: {
                            readonly type: "boolean";
                            readonly description: "Whether add a transaction fee to the user payment";
                            readonly default: false;
                        };
                        readonly allowSplitPayments: {
                            readonly type: "boolean";
                            readonly description: "Whether the user can split the payment";
                        };
                        readonly slippagePercentage: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly maximum: 100;
                            readonly description: "The slippage percentage allowed for swaps and withdrawals";
                            readonly default: 10;
                            readonly examples: readonly [1];
                        };
                    };
                    readonly required: readonly ["id", "feePercentage"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["draft", "open", "paid", "void", "uncollectible"];
                    readonly description: "`draft` `open` `paid` `void` `uncollectible`";
                };
                readonly attempted: {
                    readonly type: "boolean";
                };
                readonly attemptCount: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly nextPaymentAttempt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly dueDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly footer: {
                    readonly type: "string";
                };
                readonly fromInvoiceId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly latestRevisionId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly invoicePdfUrl: {
                    readonly type: "string";
                };
                readonly invoiceNumber: {
                    readonly type: "string";
                };
                readonly paid: {
                    readonly type: "boolean";
                };
                readonly paidOutOfBand: {
                    readonly type: "boolean";
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly clientReferenceId: {
                    readonly type: "string";
                };
                readonly lineItems: {
                    readonly type: "object";
                    readonly properties: {
                        readonly object: {
                            readonly type: "string";
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly description: {
                                        readonly type: "string";
                                    };
                                    readonly periodStart: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly periodEnd: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly quantity: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly price: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly billingScheme: {
                                                readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                                                readonly type: "string";
                                                readonly enum: readonly ["per_unit"];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                                readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                            };
                                            readonly productId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "Product's id";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                            readonly interval: {
                                                readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                                                readonly type: "string";
                                                readonly enum: readonly ["day", "week", "month", "year"];
                                            };
                                            readonly intervalCount: {
                                                readonly type: "number";
                                                readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                                                readonly examples: readonly [1];
                                            };
                                            readonly isActive: {
                                                readonly type: "boolean";
                                                readonly description: "Whether the price is currently active";
                                            };
                                            readonly usageType: {
                                                readonly description: "The usage type of the price.\n\n`licensed`";
                                                readonly type: "string";
                                                readonly enum: readonly ["licensed"];
                                            };
                                            readonly type: {
                                                readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                                                readonly type: "string";
                                                readonly enum: readonly ["one_time", "recurring", "streaming"];
                                            };
                                            readonly unitAmount: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly unitAmountDecimal: {
                                                readonly type: "string";
                                            };
                                            readonly customUnitMax: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitMin: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customPreset: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitAmountSuggestions: {
                                                readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                            readonly product: {
                                                readonly description: "The product this price belongs to";
                                                readonly type: "object";
                                                readonly required: readonly ["id", "name"];
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                    };
                                                    readonly createdAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly updatedAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the product. Displayed on the checkout page";
                                                    };
                                                    readonly description: {
                                                        readonly type: "string";
                                                        readonly description: "The description of the product. Displayed on the checkout page";
                                                    };
                                                    readonly isActive: {
                                                        readonly type: "boolean";
                                                        readonly description: "Whether the product is currently active";
                                                    };
                                                    readonly images: {
                                                        readonly maxItems: 8;
                                                        readonly description: "The url of product images. Displayed on the checkout page";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly publicImages: {
                                                        readonly description: "Product images with absolute public url";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly unitLabel: {
                                                        readonly type: "string";
                                                        readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                                    };
                                                    readonly url: {
                                                        readonly type: "string";
                                                        readonly description: "The url of the product";
                                                    };
                                                    readonly defaultPriceId: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Product's default price id";
                                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                    };
                                                    readonly metadata: {
                                                        readonly type: "object";
                                                        readonly description: "The metadata of the product";
                                                        readonly additionalProperties: true;
                                                    };
                                                    readonly visibility: {
                                                        readonly description: "The visibility of the product\n\n`10` `20`";
                                                        readonly type: "string";
                                                        readonly enum: readonly [10, 20];
                                                    };
                                                };
                                            };
                                            readonly metadata: {
                                                readonly type: "object";
                                                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                                readonly additionalProperties: true;
                                            };
                                            readonly visibility: {
                                                readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                                                readonly type: "string";
                                                readonly enum: readonly [10, 20];
                                            };
                                        };
                                        readonly required: readonly ["id", "currency", "productId", "type", "product"];
                                    };
                                    readonly taxRates: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the tax rate.";
                                                };
                                                readonly description: {
                                                    readonly type: "string";
                                                    readonly description: "The description of the tax rate.";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                    readonly description: "The country of the tax rate.";
                                                };
                                                readonly percentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly description: "Percent that will be added to subtotal as a tax.";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly type: {
                                                    readonly description: "The type of the tax rate.\n\n`exclusive` `inclusive`";
                                                    readonly type: "string";
                                                    readonly enum: readonly ["exclusive", "inclusive"];
                                                };
                                                readonly isDefault: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                            readonly required: readonly ["id", "name", "percentage", "type", "isDefault"];
                                        };
                                    };
                                    readonly amountTotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountSubtotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountTax: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                };
                                readonly required: readonly ["price"];
                            };
                        };
                    };
                };
                readonly finalizedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly paidAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly markedUncollectibleAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly visibility: {
                    readonly type: "string";
                    readonly enum: readonly [10, 20];
                    readonly description: "`10` `20`";
                };
                readonly paymentIntentId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "The URL to redirect the customer to pay invoice";
                };
                readonly subscriptionId: {
                    readonly type: "string";
                };
                readonly periodStart: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly periodEnd: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly billingReason: {
                    readonly type: "string";
                    readonly enum: readonly ["subscription_cycle", "subscription_create", "subscription_update", "subscription", "manual", "upcoming", "subscription_threshold"];
                    readonly description: "`subscription_cycle` `subscription_create` `subscription_update` `subscription` `manual` `upcoming` `subscription_threshold`";
                };
                readonly allowPromotionCodes: {
                    readonly type: "boolean";
                    readonly description: "Enables user redeemable promotion codes.";
                };
                readonly finalizeScheduleAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "The date on which invoice will be finalize and send";
                };
                readonly totalTax: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly paymentIntent: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly organizationId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly amount: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountReceived: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"];
                            readonly description: "`requires_payment_method` `requires_confirmation` `requires_action` `processing` `requires_capture` `canceled` `succeeded`";
                        };
                        readonly paymentMethodId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly description: {
                            readonly type: "string";
                        };
                        readonly paymentMethod: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly assetId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly asset: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "Asset id";
                                        };
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "Asset name";
                                        };
                                        readonly chainId: {
                                            readonly type: "number";
                                            readonly description: "Asset chain id";
                                            readonly examples: readonly [1];
                                        };
                                        readonly address: {
                                            readonly type: "string";
                                            readonly description: "Asset address on chain";
                                        };
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                            readonly description: "Asset currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                        };
                                        readonly symbol: {
                                            readonly type: "string";
                                            readonly description: "Asset symbol";
                                        };
                                        readonly decimals: {
                                            readonly type: "number";
                                            readonly description: "Asset decimals in which it is represented on chain";
                                            readonly examples: readonly [1];
                                        };
                                        readonly coingeckoId: {
                                            readonly type: "string";
                                            readonly description: "Asset coingecko id";
                                        };
                                        readonly superToken: {
                                            readonly description: "SuperToken data";
                                            readonly type: "object";
                                            readonly required: readonly ["address", "decimals", "symbol"];
                                            readonly properties: {
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's address";
                                                };
                                                readonly decimals: {
                                                    readonly type: "number";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly symbol: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's symbol";
                                                };
                                            };
                                        };
                                        readonly isEIP5827Supported: {
                                            readonly type: "boolean";
                                            readonly description: "Is EIP5827 supported";
                                        };
                                    };
                                    readonly required: readonly ["id", "name", "chainId", "address", "currency", "symbol", "decimals", "isEIP5827Supported"];
                                };
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                    readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                                };
                                readonly accountAddress: {
                                    readonly type: "string";
                                };
                                readonly billingDetails: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "The name";
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                            readonly description: "The email";
                                        };
                                        readonly phone: {
                                            readonly type: "string";
                                            readonly description: "The phone";
                                        };
                                        readonly organizationName: {
                                            readonly type: "string";
                                            readonly description: "The organization name";
                                        };
                                        readonly address: {
                                            readonly description: "The address";
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly line1: {
                                                    readonly type: "string";
                                                };
                                                readonly line2: {
                                                    readonly type: "string";
                                                };
                                                readonly city: {
                                                    readonly type: "string";
                                                };
                                                readonly state: {
                                                    readonly type: "string";
                                                };
                                                readonly postalCode: {
                                                    readonly type: "string";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly customerId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                };
                            };
                            readonly required: readonly ["id", "assetId", "asset", "type"];
                        };
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                        };
                        readonly transferAccountAddress: {
                            readonly type: "string";
                        };
                        readonly transactions: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly description: "Transaction type\n\n`incoming` `outgoing` `event` `transfer`";
                                        readonly type: "string";
                                        readonly enum: readonly ["incoming", "outgoing", "event", "transfer"];
                                    };
                                    readonly transactionRelayId: {
                                        readonly type: "string";
                                        readonly description: "Transaction relay id";
                                    };
                                    readonly transactionHash: {
                                        readonly type: "string";
                                        readonly description: "Transaction hash";
                                    };
                                    readonly nonce: {
                                        readonly type: "number";
                                        readonly description: "Transaction nonce";
                                        readonly examples: readonly [1];
                                    };
                                    readonly gasLimit: {
                                        readonly type: "number";
                                        readonly description: "Transaction gas limit used in payment";
                                        readonly examples: readonly [1];
                                    };
                                    readonly validUntil: {
                                        readonly type: "string";
                                        readonly description: "Transaction valid until";
                                    };
                                    readonly fromAddress: {
                                        readonly type: "string";
                                        readonly description: "Transaction from address";
                                    };
                                    readonly toAddress: {
                                        readonly type: "string";
                                        readonly description: "Transaction to address";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "Transaction currency\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                        readonly description: "Transaction created at";
                                    };
                                    readonly amount: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "Transaction amount in 8 decimals";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountRaw: {
                                        readonly type: "string";
                                        readonly description: "Transaction amount raw received from alchemy";
                                    };
                                    readonly assetId: {
                                        readonly type: "string";
                                        readonly description: "Transaction asset id";
                                    };
                                    readonly asset: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly address: {
                                                readonly type: "string";
                                            };
                                            readonly chainId: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                            };
                                            readonly symbol: {
                                                readonly type: "string";
                                            };
                                            readonly decimals: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly coingeckoId: {
                                                readonly type: "string";
                                            };
                                            readonly isPublic: {
                                                readonly type: "boolean";
                                            };
                                            readonly superToken: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly address: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's address";
                                                    };
                                                    readonly decimals: {
                                                        readonly type: "number";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly symbol: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's symbol";
                                                    };
                                                };
                                                readonly required: readonly ["address", "decimals", "symbol"];
                                            };
                                            readonly chain: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "number";
                                                        readonly description: "Chain id";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "Chain name";
                                                    };
                                                    readonly icon: {
                                                        readonly type: "string";
                                                        readonly description: "Chain icon";
                                                    };
                                                    readonly currency: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                        readonly description: "Chain currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                                    };
                                                    readonly blockExplorerTransactionUrl: {
                                                        readonly type: "string";
                                                        readonly description: "Chain block explorer transaction url";
                                                    };
                                                    readonly blockExplorerName: {
                                                        readonly type: "string";
                                                        readonly description: "Chain block explorer name";
                                                    };
                                                    readonly type: {
                                                        readonly description: "Chain type\n\n`evm` `solana` `tron` `stripe` `binance_pay`";
                                                        readonly type: "string";
                                                        readonly enum: readonly ["evm", "solana", "tron", "stripe", "binance_pay"];
                                                    };
                                                    readonly isBeta: {
                                                        readonly type: "boolean";
                                                        readonly description: "Is beta asset";
                                                    };
                                                };
                                                readonly required: readonly ["id", "name", "icon", "currency", "blockExplorerTransactionUrl", "blockExplorerName", "type", "isBeta"];
                                            };
                                        };
                                        readonly required: readonly ["id", "name", "address", "chainId", "currency", "symbol", "decimals", "isPublic", "chain"];
                                    };
                                    readonly transactionUrl: {
                                        readonly type: "string";
                                        readonly description: "Transaction url";
                                    };
                                };
                                readonly required: readonly ["type", "fromAddress", "toAddress", "currency", "amountRaw", "assetId", "asset"];
                            };
                        };
                        readonly paymentReceipt: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly organizationId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly paymentIntentId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly receiptNumber: {
                                    readonly type: "string";
                                };
                                readonly uri: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["id", "organizationId", "paymentIntentId", "receiptNumber"];
                        };
                        readonly canceledAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly cancellationReason: {
                            readonly type: "string";
                        };
                        readonly stripe: {
                            readonly type: "object";
                            readonly properties: {
                                readonly paymentIntentId: {
                                    readonly type: "string";
                                };
                                readonly receiptUrl: {
                                    readonly type: "string";
                                };
                                readonly cardLast4: {
                                    readonly type: "string";
                                };
                                readonly displayName: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly isMarkRefunded: {
                            readonly type: "boolean";
                        };
                        readonly markRefundedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly markRefundedComment: {
                            readonly type: "string";
                        };
                    };
                    readonly required: readonly ["id", "organizationId", "status", "paymentMethodId", "transactions"];
                };
                readonly paymentIntentAttempt: {
                    readonly description: "The payment intent associated with the session. Payment intent is created when the session is created.";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly errorCode: {
                                readonly type: "string";
                                readonly enum: readonly ["account_closed", "account_information_mismatch", "account_invalid", "account_number_invalid", "amount_too_large", "amount_too_small", "api_key_expired", "authentication_required", "balance_insufficient", "account_bad_routing_numbers", "account_declined", "account_exists", "account_restricted", "account_unusable", "account_unverified", "billing_invalid_mandate", "capture_charge_authorization_expired", "capture_unauthorized_payment", "charge_already_captured", "charge_already_refunded", "charge_disputed", "charge_exceeds_source_limit", "charge_expired_for_capture", "charge_invalid_parameter", "charge_not_refundable", "clearing_code_unsupported", "country_code_invalid", "country_unsupported", "coupon_expired", "customer_max_payment_methods", "customer_max_subscriptions", "debit_not_authorized", "email_invalid", "expired_card", "idempotency_key_in_use", "incorrect_address", "incorrect_number", "insufficient_funds", "intent_invalid_state", "intent_verification_method_missing", "invalid_characters", "invalid_charge_amount", "invalid_source_usage", "invoice_no_customer_line_items", "invoice_no_payment_method_types", "invoice_no_subscription_line_items", "invoice_not_editable", "invoice_on_behalf_of_not_editable", "invoice_payment_intent_requires_action", "invoice_upcoming_none", "livemode_mismatch", "lock_timeout", "missing", "no_account", "parameter_invalid_empty", "parameter_invalid_integer", "parameter_invalid_string_blank", "parameter_invalid_string_empty", "parameter_missing", "parameter_unknown", "parameters_exclusive", "payment_intent_action_required", "payment_intent_authentication_failure", "payment_intent_incompatible_payment_method", "payment_intent_invalid_parameter", "payment_intent_mandate_invalid", "payment_intent_payment_attempt_expired", "payment_intent_payment_attempt_failed", "payment_intent_unexpected_state", "payment_method_billing_details_address_missing", "payment_method_configuration_failures", "payment_method_currency_mismatch", "payment_method_customer_decline", "payment_method_invalid_parameter", "payment_method_invalid_parameter_testmode", "payment_method_not_available", "payment_method_provider_decline", "payment_method_provider_timeout", "payment_method_unactivated", "payment_method_unexpected_state", "payment_method_unsupported_type", "payout_reconciliation_not_ready", "payouts_limit_exceeded", "payouts_not_allowed", "postal_code_invalid", "processing_error", "product_inactive", "progressive_onboarding_limit_exceeded", "rate_limit", "refer_to_customer", "refund_disputed_payment", "resource_already_exists", "resource_missing", "return_intent_already_processed", "routing_number_invalid", "secret_key_required", "setup_attempt_failed", "setup_intent_authentication_failure", "setup_intent_invalid_parameter", "setup_intent_mandate_invalid", "setup_intent_setup_attempt_expired", "setup_intent_unexpected_state", "shipping_calculation_failed", "sku_inactive", "status_transition_invalid", "tax_id_invalid", "taxes_calculation_failed", "testmode_charges_only", "tls_version_unsupported", "token_already_used", "token_in_use", "transfer_source_balance_parameters_mismatch", "transfers_not_allowed", "url_invalid"];
                                readonly description: "`account_closed` `account_information_mismatch` `account_invalid` `account_number_invalid` `amount_too_large` `amount_too_small` `api_key_expired` `authentication_required` `balance_insufficient` `account_bad_routing_numbers` `account_declined` `account_exists` `account_restricted` `account_unusable` `account_unverified` `billing_invalid_mandate` `capture_charge_authorization_expired` `capture_unauthorized_payment` `charge_already_captured` `charge_already_refunded` `charge_disputed` `charge_exceeds_source_limit` `charge_expired_for_capture` `charge_invalid_parameter` `charge_not_refundable` `clearing_code_unsupported` `country_code_invalid` `country_unsupported` `coupon_expired` `customer_max_payment_methods` `customer_max_subscriptions` `debit_not_authorized` `email_invalid` `expired_card` `idempotency_key_in_use` `incorrect_address` `incorrect_number` `insufficient_funds` `intent_invalid_state` `intent_verification_method_missing` `invalid_characters` `invalid_charge_amount` `invalid_source_usage` `invoice_no_customer_line_items` `invoice_no_payment_method_types` `invoice_no_subscription_line_items` `invoice_not_editable` `invoice_on_behalf_of_not_editable` `invoice_payment_intent_requires_action` `invoice_upcoming_none` `livemode_mismatch` `lock_timeout` `missing` `no_account` `parameter_invalid_empty` `parameter_invalid_integer` `parameter_invalid_string_blank` `parameter_invalid_string_empty` `parameter_missing` `parameter_unknown` `parameters_exclusive` `payment_intent_action_required` `payment_intent_authentication_failure` `payment_intent_incompatible_payment_method` `payment_intent_invalid_parameter` `payment_intent_mandate_invalid` `payment_intent_payment_attempt_expired` `payment_intent_payment_attempt_failed` `payment_intent_unexpected_state` `payment_method_billing_details_address_missing` `payment_method_configuration_failures` `payment_method_currency_mismatch` `payment_method_customer_decline` `payment_method_invalid_parameter` `payment_method_invalid_parameter_testmode` `payment_method_not_available` `payment_method_provider_decline` `payment_method_provider_timeout` `payment_method_unactivated` `payment_method_unexpected_state` `payment_method_unsupported_type` `payout_reconciliation_not_ready` `payouts_limit_exceeded` `payouts_not_allowed` `postal_code_invalid` `processing_error` `product_inactive` `progressive_onboarding_limit_exceeded` `rate_limit` `refer_to_customer` `refund_disputed_payment` `resource_already_exists` `resource_missing` `return_intent_already_processed` `routing_number_invalid` `secret_key_required` `setup_attempt_failed` `setup_intent_authentication_failure` `setup_intent_invalid_parameter` `setup_intent_mandate_invalid` `setup_intent_setup_attempt_expired` `setup_intent_unexpected_state` `shipping_calculation_failed` `sku_inactive` `status_transition_invalid` `tax_id_invalid` `taxes_calculation_failed` `testmode_charges_only` `tls_version_unsupported` `token_already_used` `token_in_use` `transfer_source_balance_parameters_mismatch` `transfers_not_allowed` `url_invalid`";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["api_error", "card_error", "idempotency_error", "invalid_request_error", "chain_error", "unknown"];
                                readonly description: "`api_error` `card_error` `idempotency_error` `invalid_request_error` `chain_error` `unknown`";
                            };
                            readonly declineCode: {
                                readonly type: "string";
                            };
                            readonly paymentIntentId: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                            };
                            readonly paymentMethodType: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                            readonly docUrl: {
                                readonly type: "string";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"];
                                readonly description: "`requires_payment_method` `requires_confirmation` `requires_action` `processing` `requires_capture` `canceled` `succeeded`";
                            };
                        };
                        readonly required: readonly ["id", "type", "status"];
                    };
                };
                readonly taxRateIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
            };
            readonly required: readonly ["id", "organizationId", "customerId", "customer", "autoAdvance", "collectionMethod", "paymentSettingId", "paymentSetting", "status", "attempted", "paid", "lineItems", "url", "billingReason"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const InvoiceControllerDelete: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "string";
                };
                readonly statusCode: {
                    readonly type: "number";
                };
            };
            readonly required: readonly ["message", "statusCode"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const InvoiceControllerDuplicateInvoice: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly total: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly subTotal: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly customer: {
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Customer's id";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's created at";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's updated at";
                        };
                        readonly customerReferenceId: {
                            readonly type: "string";
                            readonly description: "Customer's reference id";
                        };
                        readonly shipping: {
                            readonly description: "Customer's shipping address";
                            readonly type: "object";
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name";
                                };
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The email";
                                };
                                readonly phone: {
                                    readonly type: "string";
                                    readonly description: "The phone";
                                };
                                readonly organizationName: {
                                    readonly type: "string";
                                    readonly description: "The organization name";
                                };
                                readonly address: {
                                    readonly description: "The address";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly line1: {
                                            readonly type: "string";
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                        };
                                        readonly postalCode: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly taxIds: {
                            readonly type: "object";
                            readonly properties: {
                                readonly object: {
                                    readonly type: "string";
                                };
                                readonly data: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                            readonly customerId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                        };
                                        readonly required: readonly ["id", "customerId"];
                                    };
                                };
                            };
                        };
                        readonly visibility: {
                            readonly description: "Customer's visibility. If Dashboard then displayed on dashboard UI. If API then only returned in API response only.\n\n`10` `20`";
                            readonly type: "string";
                            readonly enum: readonly [10, 20];
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "Customer's metadata";
                            readonly additionalProperties: true;
                        };
                        readonly customerNumber: {
                            readonly type: "string";
                            readonly description: "Customer number assigned by the system";
                        };
                    };
                    readonly required: readonly ["id", "customerNumber"];
                };
                readonly autoAdvance: {
                    readonly type: "boolean";
                };
                readonly collectionMethod: {
                    readonly type: "string";
                    readonly enum: readonly ["charge_automatically", "send_invoice"];
                    readonly description: "`charge_automatically` `send_invoice`";
                };
                readonly invoiceType: {
                    readonly type: "string";
                    readonly enum: readonly ["one_time", "recurring"];
                    readonly description: "`one_time` `recurring`";
                };
                readonly customFields: {
                    readonly type: "object";
                    readonly properties: {
                        readonly fields: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly value: {
                                        readonly type: "string";
                                    };
                                };
                                readonly required: readonly ["name", "value"];
                            };
                        };
                    };
                };
                readonly paymentSettingId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly paymentSetting: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly description: "A list of the types of payment methods";
                            readonly minItems: 1;
                            readonly maxItems: 1;
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                            readonly examples: readonly ["wallet"];
                        };
                        readonly allowedChains: {
                            readonly description: "The list of chains allowed for the payment. If not provided, all chains supported by the organization are enabled.";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly chainId: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly blacklistCurrencies: {
                                        readonly type: "array";
                                        readonly description: "The list of currencies to disable for the payment. Note: This field is only used for checkout session API atm.";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                        };
                                        readonly examples: readonly ["usdc"];
                                    };
                                    readonly withdrawalAddress: {
                                        readonly type: "string";
                                        readonly description: "This is optional, default withdrawal address configured in dashboard under settings > payment methods is used. The custom withdrawal address to use for this chain instead of stored default withdrawal address.";
                                    };
                                    readonly withdrawalAddresses: {
                                        readonly description: "The list of withdrawal addresses to split the payment. If provided, the sum of all split percentages should be 100.";
                                        readonly minItems: 2;
                                        readonly maxItems: 4;
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly splitPercentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly examples: readonly [1];
                                                };
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "The withdrawal address for the split percentage";
                                                };
                                            };
                                            readonly required: readonly ["splitPercentage", "address"];
                                        };
                                    };
                                };
                                readonly required: readonly ["chainId"];
                            };
                        };
                        readonly allowedCurrencies: {
                            readonly type: "array";
                            readonly description: "The list of currencies allowed for the payment.";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                            };
                            readonly examples: readonly ["usdc", "usdt"];
                        };
                        readonly preferredChainId: {
                            readonly type: "number";
                            readonly description: "The preferred chain's id";
                            readonly examples: readonly [1];
                        };
                        readonly preferredCurrency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                            readonly description: "The preferred currency for payment\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                        };
                        readonly allowSwap: {
                            readonly type: "boolean";
                            readonly description: "Whether the user can swap the payment currency";
                            readonly default: false;
                        };
                        readonly applyFee: {
                            readonly type: "boolean";
                            readonly description: "Whether add a application fee to the user payment";
                            readonly default: false;
                        };
                        readonly feePercentage: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly maximum: 100;
                            readonly description: "Percent that will be added to subtotal as a fee";
                            readonly examples: readonly [1];
                        };
                        readonly applyGasFee: {
                            readonly type: "boolean";
                            readonly description: "Whether add a transaction fee to the user payment";
                            readonly default: false;
                        };
                        readonly allowSplitPayments: {
                            readonly type: "boolean";
                            readonly description: "Whether the user can split the payment";
                        };
                        readonly slippagePercentage: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly maximum: 100;
                            readonly description: "The slippage percentage allowed for swaps and withdrawals";
                            readonly default: 10;
                            readonly examples: readonly [1];
                        };
                    };
                    readonly required: readonly ["id", "feePercentage"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["draft", "open", "paid", "void", "uncollectible"];
                    readonly description: "`draft` `open` `paid` `void` `uncollectible`";
                };
                readonly attempted: {
                    readonly type: "boolean";
                };
                readonly attemptCount: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly nextPaymentAttempt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly dueDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly footer: {
                    readonly type: "string";
                };
                readonly fromInvoiceId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly latestRevisionId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly invoicePdfUrl: {
                    readonly type: "string";
                };
                readonly invoiceNumber: {
                    readonly type: "string";
                };
                readonly paid: {
                    readonly type: "boolean";
                };
                readonly paidOutOfBand: {
                    readonly type: "boolean";
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly clientReferenceId: {
                    readonly type: "string";
                };
                readonly lineItems: {
                    readonly type: "object";
                    readonly properties: {
                        readonly object: {
                            readonly type: "string";
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly description: {
                                        readonly type: "string";
                                    };
                                    readonly periodStart: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly periodEnd: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly quantity: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly price: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly billingScheme: {
                                                readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                                                readonly type: "string";
                                                readonly enum: readonly ["per_unit"];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                                readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                            };
                                            readonly productId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "Product's id";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                            readonly interval: {
                                                readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                                                readonly type: "string";
                                                readonly enum: readonly ["day", "week", "month", "year"];
                                            };
                                            readonly intervalCount: {
                                                readonly type: "number";
                                                readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                                                readonly examples: readonly [1];
                                            };
                                            readonly isActive: {
                                                readonly type: "boolean";
                                                readonly description: "Whether the price is currently active";
                                            };
                                            readonly usageType: {
                                                readonly description: "The usage type of the price.\n\n`licensed`";
                                                readonly type: "string";
                                                readonly enum: readonly ["licensed"];
                                            };
                                            readonly type: {
                                                readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                                                readonly type: "string";
                                                readonly enum: readonly ["one_time", "recurring", "streaming"];
                                            };
                                            readonly unitAmount: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly unitAmountDecimal: {
                                                readonly type: "string";
                                            };
                                            readonly customUnitMax: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitMin: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customPreset: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitAmountSuggestions: {
                                                readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                            readonly product: {
                                                readonly description: "The product this price belongs to";
                                                readonly type: "object";
                                                readonly required: readonly ["id", "name"];
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                    };
                                                    readonly createdAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly updatedAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the product. Displayed on the checkout page";
                                                    };
                                                    readonly description: {
                                                        readonly type: "string";
                                                        readonly description: "The description of the product. Displayed on the checkout page";
                                                    };
                                                    readonly isActive: {
                                                        readonly type: "boolean";
                                                        readonly description: "Whether the product is currently active";
                                                    };
                                                    readonly images: {
                                                        readonly maxItems: 8;
                                                        readonly description: "The url of product images. Displayed on the checkout page";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly publicImages: {
                                                        readonly description: "Product images with absolute public url";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly unitLabel: {
                                                        readonly type: "string";
                                                        readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                                    };
                                                    readonly url: {
                                                        readonly type: "string";
                                                        readonly description: "The url of the product";
                                                    };
                                                    readonly defaultPriceId: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Product's default price id";
                                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                    };
                                                    readonly metadata: {
                                                        readonly type: "object";
                                                        readonly description: "The metadata of the product";
                                                        readonly additionalProperties: true;
                                                    };
                                                    readonly visibility: {
                                                        readonly description: "The visibility of the product\n\n`10` `20`";
                                                        readonly type: "string";
                                                        readonly enum: readonly [10, 20];
                                                    };
                                                };
                                            };
                                            readonly metadata: {
                                                readonly type: "object";
                                                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                                readonly additionalProperties: true;
                                            };
                                            readonly visibility: {
                                                readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                                                readonly type: "string";
                                                readonly enum: readonly [10, 20];
                                            };
                                        };
                                        readonly required: readonly ["id", "currency", "productId", "type", "product"];
                                    };
                                    readonly taxRates: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the tax rate.";
                                                };
                                                readonly description: {
                                                    readonly type: "string";
                                                    readonly description: "The description of the tax rate.";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                    readonly description: "The country of the tax rate.";
                                                };
                                                readonly percentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly description: "Percent that will be added to subtotal as a tax.";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly type: {
                                                    readonly description: "The type of the tax rate.\n\n`exclusive` `inclusive`";
                                                    readonly type: "string";
                                                    readonly enum: readonly ["exclusive", "inclusive"];
                                                };
                                                readonly isDefault: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                            readonly required: readonly ["id", "name", "percentage", "type", "isDefault"];
                                        };
                                    };
                                    readonly amountTotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountSubtotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountTax: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                };
                                readonly required: readonly ["price"];
                            };
                        };
                    };
                };
                readonly finalizedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly paidAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly markedUncollectibleAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly visibility: {
                    readonly type: "string";
                    readonly enum: readonly [10, 20];
                    readonly description: "`10` `20`";
                };
                readonly paymentIntentId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "The URL to redirect the customer to pay invoice";
                };
                readonly subscriptionId: {
                    readonly type: "string";
                };
                readonly periodStart: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly periodEnd: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly billingReason: {
                    readonly type: "string";
                    readonly enum: readonly ["subscription_cycle", "subscription_create", "subscription_update", "subscription", "manual", "upcoming", "subscription_threshold"];
                    readonly description: "`subscription_cycle` `subscription_create` `subscription_update` `subscription` `manual` `upcoming` `subscription_threshold`";
                };
                readonly allowPromotionCodes: {
                    readonly type: "boolean";
                    readonly description: "Enables user redeemable promotion codes.";
                };
                readonly finalizeScheduleAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "The date on which invoice will be finalize and send";
                };
                readonly totalTax: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly paymentIntent: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly organizationId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly amount: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountReceived: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"];
                            readonly description: "`requires_payment_method` `requires_confirmation` `requires_action` `processing` `requires_capture` `canceled` `succeeded`";
                        };
                        readonly paymentMethodId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly description: {
                            readonly type: "string";
                        };
                        readonly paymentMethod: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly assetId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly asset: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "Asset id";
                                        };
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "Asset name";
                                        };
                                        readonly chainId: {
                                            readonly type: "number";
                                            readonly description: "Asset chain id";
                                            readonly examples: readonly [1];
                                        };
                                        readonly address: {
                                            readonly type: "string";
                                            readonly description: "Asset address on chain";
                                        };
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                            readonly description: "Asset currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                        };
                                        readonly symbol: {
                                            readonly type: "string";
                                            readonly description: "Asset symbol";
                                        };
                                        readonly decimals: {
                                            readonly type: "number";
                                            readonly description: "Asset decimals in which it is represented on chain";
                                            readonly examples: readonly [1];
                                        };
                                        readonly coingeckoId: {
                                            readonly type: "string";
                                            readonly description: "Asset coingecko id";
                                        };
                                        readonly superToken: {
                                            readonly description: "SuperToken data";
                                            readonly type: "object";
                                            readonly required: readonly ["address", "decimals", "symbol"];
                                            readonly properties: {
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's address";
                                                };
                                                readonly decimals: {
                                                    readonly type: "number";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly symbol: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's symbol";
                                                };
                                            };
                                        };
                                        readonly isEIP5827Supported: {
                                            readonly type: "boolean";
                                            readonly description: "Is EIP5827 supported";
                                        };
                                    };
                                    readonly required: readonly ["id", "name", "chainId", "address", "currency", "symbol", "decimals", "isEIP5827Supported"];
                                };
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                    readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                                };
                                readonly accountAddress: {
                                    readonly type: "string";
                                };
                                readonly billingDetails: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "The name";
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                            readonly description: "The email";
                                        };
                                        readonly phone: {
                                            readonly type: "string";
                                            readonly description: "The phone";
                                        };
                                        readonly organizationName: {
                                            readonly type: "string";
                                            readonly description: "The organization name";
                                        };
                                        readonly address: {
                                            readonly description: "The address";
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly line1: {
                                                    readonly type: "string";
                                                };
                                                readonly line2: {
                                                    readonly type: "string";
                                                };
                                                readonly city: {
                                                    readonly type: "string";
                                                };
                                                readonly state: {
                                                    readonly type: "string";
                                                };
                                                readonly postalCode: {
                                                    readonly type: "string";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly customerId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                };
                            };
                            readonly required: readonly ["id", "assetId", "asset", "type"];
                        };
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                        };
                        readonly transferAccountAddress: {
                            readonly type: "string";
                        };
                        readonly transactions: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly description: "Transaction type\n\n`incoming` `outgoing` `event` `transfer`";
                                        readonly type: "string";
                                        readonly enum: readonly ["incoming", "outgoing", "event", "transfer"];
                                    };
                                    readonly transactionRelayId: {
                                        readonly type: "string";
                                        readonly description: "Transaction relay id";
                                    };
                                    readonly transactionHash: {
                                        readonly type: "string";
                                        readonly description: "Transaction hash";
                                    };
                                    readonly nonce: {
                                        readonly type: "number";
                                        readonly description: "Transaction nonce";
                                        readonly examples: readonly [1];
                                    };
                                    readonly gasLimit: {
                                        readonly type: "number";
                                        readonly description: "Transaction gas limit used in payment";
                                        readonly examples: readonly [1];
                                    };
                                    readonly validUntil: {
                                        readonly type: "string";
                                        readonly description: "Transaction valid until";
                                    };
                                    readonly fromAddress: {
                                        readonly type: "string";
                                        readonly description: "Transaction from address";
                                    };
                                    readonly toAddress: {
                                        readonly type: "string";
                                        readonly description: "Transaction to address";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "Transaction currency\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                        readonly description: "Transaction created at";
                                    };
                                    readonly amount: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "Transaction amount in 8 decimals";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountRaw: {
                                        readonly type: "string";
                                        readonly description: "Transaction amount raw received from alchemy";
                                    };
                                    readonly assetId: {
                                        readonly type: "string";
                                        readonly description: "Transaction asset id";
                                    };
                                    readonly asset: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly address: {
                                                readonly type: "string";
                                            };
                                            readonly chainId: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                            };
                                            readonly symbol: {
                                                readonly type: "string";
                                            };
                                            readonly decimals: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly coingeckoId: {
                                                readonly type: "string";
                                            };
                                            readonly isPublic: {
                                                readonly type: "boolean";
                                            };
                                            readonly superToken: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly address: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's address";
                                                    };
                                                    readonly decimals: {
                                                        readonly type: "number";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly symbol: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's symbol";
                                                    };
                                                };
                                                readonly required: readonly ["address", "decimals", "symbol"];
                                            };
                                            readonly chain: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "number";
                                                        readonly description: "Chain id";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "Chain name";
                                                    };
                                                    readonly icon: {
                                                        readonly type: "string";
                                                        readonly description: "Chain icon";
                                                    };
                                                    readonly currency: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                        readonly description: "Chain currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                                    };
                                                    readonly blockExplorerTransactionUrl: {
                                                        readonly type: "string";
                                                        readonly description: "Chain block explorer transaction url";
                                                    };
                                                    readonly blockExplorerName: {
                                                        readonly type: "string";
                                                        readonly description: "Chain block explorer name";
                                                    };
                                                    readonly type: {
                                                        readonly description: "Chain type\n\n`evm` `solana` `tron` `stripe` `binance_pay`";
                                                        readonly type: "string";
                                                        readonly enum: readonly ["evm", "solana", "tron", "stripe", "binance_pay"];
                                                    };
                                                    readonly isBeta: {
                                                        readonly type: "boolean";
                                                        readonly description: "Is beta asset";
                                                    };
                                                };
                                                readonly required: readonly ["id", "name", "icon", "currency", "blockExplorerTransactionUrl", "blockExplorerName", "type", "isBeta"];
                                            };
                                        };
                                        readonly required: readonly ["id", "name", "address", "chainId", "currency", "symbol", "decimals", "isPublic", "chain"];
                                    };
                                    readonly transactionUrl: {
                                        readonly type: "string";
                                        readonly description: "Transaction url";
                                    };
                                };
                                readonly required: readonly ["type", "fromAddress", "toAddress", "currency", "amountRaw", "assetId", "asset"];
                            };
                        };
                        readonly paymentReceipt: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly organizationId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly paymentIntentId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly receiptNumber: {
                                    readonly type: "string";
                                };
                                readonly uri: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["id", "organizationId", "paymentIntentId", "receiptNumber"];
                        };
                        readonly canceledAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly cancellationReason: {
                            readonly type: "string";
                        };
                        readonly stripe: {
                            readonly type: "object";
                            readonly properties: {
                                readonly paymentIntentId: {
                                    readonly type: "string";
                                };
                                readonly receiptUrl: {
                                    readonly type: "string";
                                };
                                readonly cardLast4: {
                                    readonly type: "string";
                                };
                                readonly displayName: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly isMarkRefunded: {
                            readonly type: "boolean";
                        };
                        readonly markRefundedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly markRefundedComment: {
                            readonly type: "string";
                        };
                    };
                    readonly required: readonly ["id", "organizationId", "status", "paymentMethodId", "transactions"];
                };
                readonly paymentIntentAttempt: {
                    readonly description: "The payment intent associated with the session. Payment intent is created when the session is created.";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly errorCode: {
                                readonly type: "string";
                                readonly enum: readonly ["account_closed", "account_information_mismatch", "account_invalid", "account_number_invalid", "amount_too_large", "amount_too_small", "api_key_expired", "authentication_required", "balance_insufficient", "account_bad_routing_numbers", "account_declined", "account_exists", "account_restricted", "account_unusable", "account_unverified", "billing_invalid_mandate", "capture_charge_authorization_expired", "capture_unauthorized_payment", "charge_already_captured", "charge_already_refunded", "charge_disputed", "charge_exceeds_source_limit", "charge_expired_for_capture", "charge_invalid_parameter", "charge_not_refundable", "clearing_code_unsupported", "country_code_invalid", "country_unsupported", "coupon_expired", "customer_max_payment_methods", "customer_max_subscriptions", "debit_not_authorized", "email_invalid", "expired_card", "idempotency_key_in_use", "incorrect_address", "incorrect_number", "insufficient_funds", "intent_invalid_state", "intent_verification_method_missing", "invalid_characters", "invalid_charge_amount", "invalid_source_usage", "invoice_no_customer_line_items", "invoice_no_payment_method_types", "invoice_no_subscription_line_items", "invoice_not_editable", "invoice_on_behalf_of_not_editable", "invoice_payment_intent_requires_action", "invoice_upcoming_none", "livemode_mismatch", "lock_timeout", "missing", "no_account", "parameter_invalid_empty", "parameter_invalid_integer", "parameter_invalid_string_blank", "parameter_invalid_string_empty", "parameter_missing", "parameter_unknown", "parameters_exclusive", "payment_intent_action_required", "payment_intent_authentication_failure", "payment_intent_incompatible_payment_method", "payment_intent_invalid_parameter", "payment_intent_mandate_invalid", "payment_intent_payment_attempt_expired", "payment_intent_payment_attempt_failed", "payment_intent_unexpected_state", "payment_method_billing_details_address_missing", "payment_method_configuration_failures", "payment_method_currency_mismatch", "payment_method_customer_decline", "payment_method_invalid_parameter", "payment_method_invalid_parameter_testmode", "payment_method_not_available", "payment_method_provider_decline", "payment_method_provider_timeout", "payment_method_unactivated", "payment_method_unexpected_state", "payment_method_unsupported_type", "payout_reconciliation_not_ready", "payouts_limit_exceeded", "payouts_not_allowed", "postal_code_invalid", "processing_error", "product_inactive", "progressive_onboarding_limit_exceeded", "rate_limit", "refer_to_customer", "refund_disputed_payment", "resource_already_exists", "resource_missing", "return_intent_already_processed", "routing_number_invalid", "secret_key_required", "setup_attempt_failed", "setup_intent_authentication_failure", "setup_intent_invalid_parameter", "setup_intent_mandate_invalid", "setup_intent_setup_attempt_expired", "setup_intent_unexpected_state", "shipping_calculation_failed", "sku_inactive", "status_transition_invalid", "tax_id_invalid", "taxes_calculation_failed", "testmode_charges_only", "tls_version_unsupported", "token_already_used", "token_in_use", "transfer_source_balance_parameters_mismatch", "transfers_not_allowed", "url_invalid"];
                                readonly description: "`account_closed` `account_information_mismatch` `account_invalid` `account_number_invalid` `amount_too_large` `amount_too_small` `api_key_expired` `authentication_required` `balance_insufficient` `account_bad_routing_numbers` `account_declined` `account_exists` `account_restricted` `account_unusable` `account_unverified` `billing_invalid_mandate` `capture_charge_authorization_expired` `capture_unauthorized_payment` `charge_already_captured` `charge_already_refunded` `charge_disputed` `charge_exceeds_source_limit` `charge_expired_for_capture` `charge_invalid_parameter` `charge_not_refundable` `clearing_code_unsupported` `country_code_invalid` `country_unsupported` `coupon_expired` `customer_max_payment_methods` `customer_max_subscriptions` `debit_not_authorized` `email_invalid` `expired_card` `idempotency_key_in_use` `incorrect_address` `incorrect_number` `insufficient_funds` `intent_invalid_state` `intent_verification_method_missing` `invalid_characters` `invalid_charge_amount` `invalid_source_usage` `invoice_no_customer_line_items` `invoice_no_payment_method_types` `invoice_no_subscription_line_items` `invoice_not_editable` `invoice_on_behalf_of_not_editable` `invoice_payment_intent_requires_action` `invoice_upcoming_none` `livemode_mismatch` `lock_timeout` `missing` `no_account` `parameter_invalid_empty` `parameter_invalid_integer` `parameter_invalid_string_blank` `parameter_invalid_string_empty` `parameter_missing` `parameter_unknown` `parameters_exclusive` `payment_intent_action_required` `payment_intent_authentication_failure` `payment_intent_incompatible_payment_method` `payment_intent_invalid_parameter` `payment_intent_mandate_invalid` `payment_intent_payment_attempt_expired` `payment_intent_payment_attempt_failed` `payment_intent_unexpected_state` `payment_method_billing_details_address_missing` `payment_method_configuration_failures` `payment_method_currency_mismatch` `payment_method_customer_decline` `payment_method_invalid_parameter` `payment_method_invalid_parameter_testmode` `payment_method_not_available` `payment_method_provider_decline` `payment_method_provider_timeout` `payment_method_unactivated` `payment_method_unexpected_state` `payment_method_unsupported_type` `payout_reconciliation_not_ready` `payouts_limit_exceeded` `payouts_not_allowed` `postal_code_invalid` `processing_error` `product_inactive` `progressive_onboarding_limit_exceeded` `rate_limit` `refer_to_customer` `refund_disputed_payment` `resource_already_exists` `resource_missing` `return_intent_already_processed` `routing_number_invalid` `secret_key_required` `setup_attempt_failed` `setup_intent_authentication_failure` `setup_intent_invalid_parameter` `setup_intent_mandate_invalid` `setup_intent_setup_attempt_expired` `setup_intent_unexpected_state` `shipping_calculation_failed` `sku_inactive` `status_transition_invalid` `tax_id_invalid` `taxes_calculation_failed` `testmode_charges_only` `tls_version_unsupported` `token_already_used` `token_in_use` `transfer_source_balance_parameters_mismatch` `transfers_not_allowed` `url_invalid`";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["api_error", "card_error", "idempotency_error", "invalid_request_error", "chain_error", "unknown"];
                                readonly description: "`api_error` `card_error` `idempotency_error` `invalid_request_error` `chain_error` `unknown`";
                            };
                            readonly declineCode: {
                                readonly type: "string";
                            };
                            readonly paymentIntentId: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                            };
                            readonly paymentMethodType: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                            readonly docUrl: {
                                readonly type: "string";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"];
                                readonly description: "`requires_payment_method` `requires_confirmation` `requires_action` `processing` `requires_capture` `canceled` `succeeded`";
                            };
                        };
                        readonly required: readonly ["id", "type", "status"];
                    };
                };
                readonly taxRateIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
            };
            readonly required: readonly ["id", "organizationId", "customerId", "customer", "autoAdvance", "collectionMethod", "paymentSettingId", "paymentSetting", "status", "attempted", "paid", "lineItems", "url", "billingReason"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const InvoiceControllerFinalizeAndSendInvoice: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly cc: {
                readonly description: "The list of email addresses to send the invoice to along the customer email address";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly finalizeScheduleAt: {
                readonly format: "date-time";
                readonly type: "string";
                readonly description: "The date on which the invoice should be finalized and sent";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly total: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly subTotal: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly customer: {
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Customer's id";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's created at";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's updated at";
                        };
                        readonly customerReferenceId: {
                            readonly type: "string";
                            readonly description: "Customer's reference id";
                        };
                        readonly shipping: {
                            readonly description: "Customer's shipping address";
                            readonly type: "object";
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name";
                                };
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The email";
                                };
                                readonly phone: {
                                    readonly type: "string";
                                    readonly description: "The phone";
                                };
                                readonly organizationName: {
                                    readonly type: "string";
                                    readonly description: "The organization name";
                                };
                                readonly address: {
                                    readonly description: "The address";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly line1: {
                                            readonly type: "string";
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                        };
                                        readonly postalCode: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly taxIds: {
                            readonly type: "object";
                            readonly properties: {
                                readonly object: {
                                    readonly type: "string";
                                };
                                readonly data: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                            readonly customerId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                        };
                                        readonly required: readonly ["id", "customerId"];
                                    };
                                };
                            };
                        };
                        readonly visibility: {
                            readonly description: "Customer's visibility. If Dashboard then displayed on dashboard UI. If API then only returned in API response only.\n\n`10` `20`";
                            readonly type: "string";
                            readonly enum: readonly [10, 20];
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "Customer's metadata";
                            readonly additionalProperties: true;
                        };
                        readonly customerNumber: {
                            readonly type: "string";
                            readonly description: "Customer number assigned by the system";
                        };
                    };
                    readonly required: readonly ["id", "customerNumber"];
                };
                readonly autoAdvance: {
                    readonly type: "boolean";
                };
                readonly collectionMethod: {
                    readonly type: "string";
                    readonly enum: readonly ["charge_automatically", "send_invoice"];
                    readonly description: "`charge_automatically` `send_invoice`";
                };
                readonly invoiceType: {
                    readonly type: "string";
                    readonly enum: readonly ["one_time", "recurring"];
                    readonly description: "`one_time` `recurring`";
                };
                readonly customFields: {
                    readonly type: "object";
                    readonly properties: {
                        readonly fields: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly value: {
                                        readonly type: "string";
                                    };
                                };
                                readonly required: readonly ["name", "value"];
                            };
                        };
                    };
                };
                readonly paymentSettingId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly paymentSetting: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly description: "A list of the types of payment methods";
                            readonly minItems: 1;
                            readonly maxItems: 1;
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                            readonly examples: readonly ["wallet"];
                        };
                        readonly allowedChains: {
                            readonly description: "The list of chains allowed for the payment. If not provided, all chains supported by the organization are enabled.";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly chainId: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly blacklistCurrencies: {
                                        readonly type: "array";
                                        readonly description: "The list of currencies to disable for the payment. Note: This field is only used for checkout session API atm.";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                        };
                                        readonly examples: readonly ["usdc"];
                                    };
                                    readonly withdrawalAddress: {
                                        readonly type: "string";
                                        readonly description: "This is optional, default withdrawal address configured in dashboard under settings > payment methods is used. The custom withdrawal address to use for this chain instead of stored default withdrawal address.";
                                    };
                                    readonly withdrawalAddresses: {
                                        readonly description: "The list of withdrawal addresses to split the payment. If provided, the sum of all split percentages should be 100.";
                                        readonly minItems: 2;
                                        readonly maxItems: 4;
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly splitPercentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly examples: readonly [1];
                                                };
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "The withdrawal address for the split percentage";
                                                };
                                            };
                                            readonly required: readonly ["splitPercentage", "address"];
                                        };
                                    };
                                };
                                readonly required: readonly ["chainId"];
                            };
                        };
                        readonly allowedCurrencies: {
                            readonly type: "array";
                            readonly description: "The list of currencies allowed for the payment.";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                            };
                            readonly examples: readonly ["usdc", "usdt"];
                        };
                        readonly preferredChainId: {
                            readonly type: "number";
                            readonly description: "The preferred chain's id";
                            readonly examples: readonly [1];
                        };
                        readonly preferredCurrency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                            readonly description: "The preferred currency for payment\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                        };
                        readonly allowSwap: {
                            readonly type: "boolean";
                            readonly description: "Whether the user can swap the payment currency";
                            readonly default: false;
                        };
                        readonly applyFee: {
                            readonly type: "boolean";
                            readonly description: "Whether add a application fee to the user payment";
                            readonly default: false;
                        };
                        readonly feePercentage: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly maximum: 100;
                            readonly description: "Percent that will be added to subtotal as a fee";
                            readonly examples: readonly [1];
                        };
                        readonly applyGasFee: {
                            readonly type: "boolean";
                            readonly description: "Whether add a transaction fee to the user payment";
                            readonly default: false;
                        };
                        readonly allowSplitPayments: {
                            readonly type: "boolean";
                            readonly description: "Whether the user can split the payment";
                        };
                        readonly slippagePercentage: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly maximum: 100;
                            readonly description: "The slippage percentage allowed for swaps and withdrawals";
                            readonly default: 10;
                            readonly examples: readonly [1];
                        };
                    };
                    readonly required: readonly ["id", "feePercentage"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["draft", "open", "paid", "void", "uncollectible"];
                    readonly description: "`draft` `open` `paid` `void` `uncollectible`";
                };
                readonly attempted: {
                    readonly type: "boolean";
                };
                readonly attemptCount: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly nextPaymentAttempt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly dueDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly footer: {
                    readonly type: "string";
                };
                readonly fromInvoiceId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly latestRevisionId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly invoicePdfUrl: {
                    readonly type: "string";
                };
                readonly invoiceNumber: {
                    readonly type: "string";
                };
                readonly paid: {
                    readonly type: "boolean";
                };
                readonly paidOutOfBand: {
                    readonly type: "boolean";
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly clientReferenceId: {
                    readonly type: "string";
                };
                readonly lineItems: {
                    readonly type: "object";
                    readonly properties: {
                        readonly object: {
                            readonly type: "string";
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly description: {
                                        readonly type: "string";
                                    };
                                    readonly periodStart: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly periodEnd: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly quantity: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly price: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly billingScheme: {
                                                readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                                                readonly type: "string";
                                                readonly enum: readonly ["per_unit"];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                                readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                            };
                                            readonly productId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "Product's id";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                            readonly interval: {
                                                readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                                                readonly type: "string";
                                                readonly enum: readonly ["day", "week", "month", "year"];
                                            };
                                            readonly intervalCount: {
                                                readonly type: "number";
                                                readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                                                readonly examples: readonly [1];
                                            };
                                            readonly isActive: {
                                                readonly type: "boolean";
                                                readonly description: "Whether the price is currently active";
                                            };
                                            readonly usageType: {
                                                readonly description: "The usage type of the price.\n\n`licensed`";
                                                readonly type: "string";
                                                readonly enum: readonly ["licensed"];
                                            };
                                            readonly type: {
                                                readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                                                readonly type: "string";
                                                readonly enum: readonly ["one_time", "recurring", "streaming"];
                                            };
                                            readonly unitAmount: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly unitAmountDecimal: {
                                                readonly type: "string";
                                            };
                                            readonly customUnitMax: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitMin: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customPreset: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitAmountSuggestions: {
                                                readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                            readonly product: {
                                                readonly description: "The product this price belongs to";
                                                readonly type: "object";
                                                readonly required: readonly ["id", "name"];
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                    };
                                                    readonly createdAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly updatedAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the product. Displayed on the checkout page";
                                                    };
                                                    readonly description: {
                                                        readonly type: "string";
                                                        readonly description: "The description of the product. Displayed on the checkout page";
                                                    };
                                                    readonly isActive: {
                                                        readonly type: "boolean";
                                                        readonly description: "Whether the product is currently active";
                                                    };
                                                    readonly images: {
                                                        readonly maxItems: 8;
                                                        readonly description: "The url of product images. Displayed on the checkout page";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly publicImages: {
                                                        readonly description: "Product images with absolute public url";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly unitLabel: {
                                                        readonly type: "string";
                                                        readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                                    };
                                                    readonly url: {
                                                        readonly type: "string";
                                                        readonly description: "The url of the product";
                                                    };
                                                    readonly defaultPriceId: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Product's default price id";
                                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                    };
                                                    readonly metadata: {
                                                        readonly type: "object";
                                                        readonly description: "The metadata of the product";
                                                        readonly additionalProperties: true;
                                                    };
                                                    readonly visibility: {
                                                        readonly description: "The visibility of the product\n\n`10` `20`";
                                                        readonly type: "string";
                                                        readonly enum: readonly [10, 20];
                                                    };
                                                };
                                            };
                                            readonly metadata: {
                                                readonly type: "object";
                                                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                                readonly additionalProperties: true;
                                            };
                                            readonly visibility: {
                                                readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                                                readonly type: "string";
                                                readonly enum: readonly [10, 20];
                                            };
                                        };
                                        readonly required: readonly ["id", "currency", "productId", "type", "product"];
                                    };
                                    readonly taxRates: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the tax rate.";
                                                };
                                                readonly description: {
                                                    readonly type: "string";
                                                    readonly description: "The description of the tax rate.";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                    readonly description: "The country of the tax rate.";
                                                };
                                                readonly percentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly description: "Percent that will be added to subtotal as a tax.";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly type: {
                                                    readonly description: "The type of the tax rate.\n\n`exclusive` `inclusive`";
                                                    readonly type: "string";
                                                    readonly enum: readonly ["exclusive", "inclusive"];
                                                };
                                                readonly isDefault: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                            readonly required: readonly ["id", "name", "percentage", "type", "isDefault"];
                                        };
                                    };
                                    readonly amountTotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountSubtotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountTax: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                };
                                readonly required: readonly ["price"];
                            };
                        };
                    };
                };
                readonly finalizedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly paidAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly markedUncollectibleAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly visibility: {
                    readonly type: "string";
                    readonly enum: readonly [10, 20];
                    readonly description: "`10` `20`";
                };
                readonly paymentIntentId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "The URL to redirect the customer to pay invoice";
                };
                readonly subscriptionId: {
                    readonly type: "string";
                };
                readonly periodStart: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly periodEnd: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly billingReason: {
                    readonly type: "string";
                    readonly enum: readonly ["subscription_cycle", "subscription_create", "subscription_update", "subscription", "manual", "upcoming", "subscription_threshold"];
                    readonly description: "`subscription_cycle` `subscription_create` `subscription_update` `subscription` `manual` `upcoming` `subscription_threshold`";
                };
                readonly allowPromotionCodes: {
                    readonly type: "boolean";
                    readonly description: "Enables user redeemable promotion codes.";
                };
                readonly finalizeScheduleAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "The date on which invoice will be finalize and send";
                };
                readonly totalTax: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly paymentIntent: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly organizationId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly amount: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountReceived: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"];
                            readonly description: "`requires_payment_method` `requires_confirmation` `requires_action` `processing` `requires_capture` `canceled` `succeeded`";
                        };
                        readonly paymentMethodId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly description: {
                            readonly type: "string";
                        };
                        readonly paymentMethod: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly assetId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly asset: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "Asset id";
                                        };
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "Asset name";
                                        };
                                        readonly chainId: {
                                            readonly type: "number";
                                            readonly description: "Asset chain id";
                                            readonly examples: readonly [1];
                                        };
                                        readonly address: {
                                            readonly type: "string";
                                            readonly description: "Asset address on chain";
                                        };
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                            readonly description: "Asset currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                        };
                                        readonly symbol: {
                                            readonly type: "string";
                                            readonly description: "Asset symbol";
                                        };
                                        readonly decimals: {
                                            readonly type: "number";
                                            readonly description: "Asset decimals in which it is represented on chain";
                                            readonly examples: readonly [1];
                                        };
                                        readonly coingeckoId: {
                                            readonly type: "string";
                                            readonly description: "Asset coingecko id";
                                        };
                                        readonly superToken: {
                                            readonly description: "SuperToken data";
                                            readonly type: "object";
                                            readonly required: readonly ["address", "decimals", "symbol"];
                                            readonly properties: {
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's address";
                                                };
                                                readonly decimals: {
                                                    readonly type: "number";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly symbol: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's symbol";
                                                };
                                            };
                                        };
                                        readonly isEIP5827Supported: {
                                            readonly type: "boolean";
                                            readonly description: "Is EIP5827 supported";
                                        };
                                    };
                                    readonly required: readonly ["id", "name", "chainId", "address", "currency", "symbol", "decimals", "isEIP5827Supported"];
                                };
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                    readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                                };
                                readonly accountAddress: {
                                    readonly type: "string";
                                };
                                readonly billingDetails: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "The name";
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                            readonly description: "The email";
                                        };
                                        readonly phone: {
                                            readonly type: "string";
                                            readonly description: "The phone";
                                        };
                                        readonly organizationName: {
                                            readonly type: "string";
                                            readonly description: "The organization name";
                                        };
                                        readonly address: {
                                            readonly description: "The address";
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly line1: {
                                                    readonly type: "string";
                                                };
                                                readonly line2: {
                                                    readonly type: "string";
                                                };
                                                readonly city: {
                                                    readonly type: "string";
                                                };
                                                readonly state: {
                                                    readonly type: "string";
                                                };
                                                readonly postalCode: {
                                                    readonly type: "string";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly customerId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                };
                            };
                            readonly required: readonly ["id", "assetId", "asset", "type"];
                        };
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                        };
                        readonly transferAccountAddress: {
                            readonly type: "string";
                        };
                        readonly transactions: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly description: "Transaction type\n\n`incoming` `outgoing` `event` `transfer`";
                                        readonly type: "string";
                                        readonly enum: readonly ["incoming", "outgoing", "event", "transfer"];
                                    };
                                    readonly transactionRelayId: {
                                        readonly type: "string";
                                        readonly description: "Transaction relay id";
                                    };
                                    readonly transactionHash: {
                                        readonly type: "string";
                                        readonly description: "Transaction hash";
                                    };
                                    readonly nonce: {
                                        readonly type: "number";
                                        readonly description: "Transaction nonce";
                                        readonly examples: readonly [1];
                                    };
                                    readonly gasLimit: {
                                        readonly type: "number";
                                        readonly description: "Transaction gas limit used in payment";
                                        readonly examples: readonly [1];
                                    };
                                    readonly validUntil: {
                                        readonly type: "string";
                                        readonly description: "Transaction valid until";
                                    };
                                    readonly fromAddress: {
                                        readonly type: "string";
                                        readonly description: "Transaction from address";
                                    };
                                    readonly toAddress: {
                                        readonly type: "string";
                                        readonly description: "Transaction to address";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "Transaction currency\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                        readonly description: "Transaction created at";
                                    };
                                    readonly amount: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "Transaction amount in 8 decimals";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountRaw: {
                                        readonly type: "string";
                                        readonly description: "Transaction amount raw received from alchemy";
                                    };
                                    readonly assetId: {
                                        readonly type: "string";
                                        readonly description: "Transaction asset id";
                                    };
                                    readonly asset: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly address: {
                                                readonly type: "string";
                                            };
                                            readonly chainId: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                            };
                                            readonly symbol: {
                                                readonly type: "string";
                                            };
                                            readonly decimals: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly coingeckoId: {
                                                readonly type: "string";
                                            };
                                            readonly isPublic: {
                                                readonly type: "boolean";
                                            };
                                            readonly superToken: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly address: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's address";
                                                    };
                                                    readonly decimals: {
                                                        readonly type: "number";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly symbol: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's symbol";
                                                    };
                                                };
                                                readonly required: readonly ["address", "decimals", "symbol"];
                                            };
                                            readonly chain: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "number";
                                                        readonly description: "Chain id";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "Chain name";
                                                    };
                                                    readonly icon: {
                                                        readonly type: "string";
                                                        readonly description: "Chain icon";
                                                    };
                                                    readonly currency: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                        readonly description: "Chain currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                                    };
                                                    readonly blockExplorerTransactionUrl: {
                                                        readonly type: "string";
                                                        readonly description: "Chain block explorer transaction url";
                                                    };
                                                    readonly blockExplorerName: {
                                                        readonly type: "string";
                                                        readonly description: "Chain block explorer name";
                                                    };
                                                    readonly type: {
                                                        readonly description: "Chain type\n\n`evm` `solana` `tron` `stripe` `binance_pay`";
                                                        readonly type: "string";
                                                        readonly enum: readonly ["evm", "solana", "tron", "stripe", "binance_pay"];
                                                    };
                                                    readonly isBeta: {
                                                        readonly type: "boolean";
                                                        readonly description: "Is beta asset";
                                                    };
                                                };
                                                readonly required: readonly ["id", "name", "icon", "currency", "blockExplorerTransactionUrl", "blockExplorerName", "type", "isBeta"];
                                            };
                                        };
                                        readonly required: readonly ["id", "name", "address", "chainId", "currency", "symbol", "decimals", "isPublic", "chain"];
                                    };
                                    readonly transactionUrl: {
                                        readonly type: "string";
                                        readonly description: "Transaction url";
                                    };
                                };
                                readonly required: readonly ["type", "fromAddress", "toAddress", "currency", "amountRaw", "assetId", "asset"];
                            };
                        };
                        readonly paymentReceipt: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly organizationId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly paymentIntentId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly receiptNumber: {
                                    readonly type: "string";
                                };
                                readonly uri: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["id", "organizationId", "paymentIntentId", "receiptNumber"];
                        };
                        readonly canceledAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly cancellationReason: {
                            readonly type: "string";
                        };
                        readonly stripe: {
                            readonly type: "object";
                            readonly properties: {
                                readonly paymentIntentId: {
                                    readonly type: "string";
                                };
                                readonly receiptUrl: {
                                    readonly type: "string";
                                };
                                readonly cardLast4: {
                                    readonly type: "string";
                                };
                                readonly displayName: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly isMarkRefunded: {
                            readonly type: "boolean";
                        };
                        readonly markRefundedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly markRefundedComment: {
                            readonly type: "string";
                        };
                    };
                    readonly required: readonly ["id", "organizationId", "status", "paymentMethodId", "transactions"];
                };
                readonly paymentIntentAttempt: {
                    readonly description: "The payment intent associated with the session. Payment intent is created when the session is created.";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly errorCode: {
                                readonly type: "string";
                                readonly enum: readonly ["account_closed", "account_information_mismatch", "account_invalid", "account_number_invalid", "amount_too_large", "amount_too_small", "api_key_expired", "authentication_required", "balance_insufficient", "account_bad_routing_numbers", "account_declined", "account_exists", "account_restricted", "account_unusable", "account_unverified", "billing_invalid_mandate", "capture_charge_authorization_expired", "capture_unauthorized_payment", "charge_already_captured", "charge_already_refunded", "charge_disputed", "charge_exceeds_source_limit", "charge_expired_for_capture", "charge_invalid_parameter", "charge_not_refundable", "clearing_code_unsupported", "country_code_invalid", "country_unsupported", "coupon_expired", "customer_max_payment_methods", "customer_max_subscriptions", "debit_not_authorized", "email_invalid", "expired_card", "idempotency_key_in_use", "incorrect_address", "incorrect_number", "insufficient_funds", "intent_invalid_state", "intent_verification_method_missing", "invalid_characters", "invalid_charge_amount", "invalid_source_usage", "invoice_no_customer_line_items", "invoice_no_payment_method_types", "invoice_no_subscription_line_items", "invoice_not_editable", "invoice_on_behalf_of_not_editable", "invoice_payment_intent_requires_action", "invoice_upcoming_none", "livemode_mismatch", "lock_timeout", "missing", "no_account", "parameter_invalid_empty", "parameter_invalid_integer", "parameter_invalid_string_blank", "parameter_invalid_string_empty", "parameter_missing", "parameter_unknown", "parameters_exclusive", "payment_intent_action_required", "payment_intent_authentication_failure", "payment_intent_incompatible_payment_method", "payment_intent_invalid_parameter", "payment_intent_mandate_invalid", "payment_intent_payment_attempt_expired", "payment_intent_payment_attempt_failed", "payment_intent_unexpected_state", "payment_method_billing_details_address_missing", "payment_method_configuration_failures", "payment_method_currency_mismatch", "payment_method_customer_decline", "payment_method_invalid_parameter", "payment_method_invalid_parameter_testmode", "payment_method_not_available", "payment_method_provider_decline", "payment_method_provider_timeout", "payment_method_unactivated", "payment_method_unexpected_state", "payment_method_unsupported_type", "payout_reconciliation_not_ready", "payouts_limit_exceeded", "payouts_not_allowed", "postal_code_invalid", "processing_error", "product_inactive", "progressive_onboarding_limit_exceeded", "rate_limit", "refer_to_customer", "refund_disputed_payment", "resource_already_exists", "resource_missing", "return_intent_already_processed", "routing_number_invalid", "secret_key_required", "setup_attempt_failed", "setup_intent_authentication_failure", "setup_intent_invalid_parameter", "setup_intent_mandate_invalid", "setup_intent_setup_attempt_expired", "setup_intent_unexpected_state", "shipping_calculation_failed", "sku_inactive", "status_transition_invalid", "tax_id_invalid", "taxes_calculation_failed", "testmode_charges_only", "tls_version_unsupported", "token_already_used", "token_in_use", "transfer_source_balance_parameters_mismatch", "transfers_not_allowed", "url_invalid"];
                                readonly description: "`account_closed` `account_information_mismatch` `account_invalid` `account_number_invalid` `amount_too_large` `amount_too_small` `api_key_expired` `authentication_required` `balance_insufficient` `account_bad_routing_numbers` `account_declined` `account_exists` `account_restricted` `account_unusable` `account_unverified` `billing_invalid_mandate` `capture_charge_authorization_expired` `capture_unauthorized_payment` `charge_already_captured` `charge_already_refunded` `charge_disputed` `charge_exceeds_source_limit` `charge_expired_for_capture` `charge_invalid_parameter` `charge_not_refundable` `clearing_code_unsupported` `country_code_invalid` `country_unsupported` `coupon_expired` `customer_max_payment_methods` `customer_max_subscriptions` `debit_not_authorized` `email_invalid` `expired_card` `idempotency_key_in_use` `incorrect_address` `incorrect_number` `insufficient_funds` `intent_invalid_state` `intent_verification_method_missing` `invalid_characters` `invalid_charge_amount` `invalid_source_usage` `invoice_no_customer_line_items` `invoice_no_payment_method_types` `invoice_no_subscription_line_items` `invoice_not_editable` `invoice_on_behalf_of_not_editable` `invoice_payment_intent_requires_action` `invoice_upcoming_none` `livemode_mismatch` `lock_timeout` `missing` `no_account` `parameter_invalid_empty` `parameter_invalid_integer` `parameter_invalid_string_blank` `parameter_invalid_string_empty` `parameter_missing` `parameter_unknown` `parameters_exclusive` `payment_intent_action_required` `payment_intent_authentication_failure` `payment_intent_incompatible_payment_method` `payment_intent_invalid_parameter` `payment_intent_mandate_invalid` `payment_intent_payment_attempt_expired` `payment_intent_payment_attempt_failed` `payment_intent_unexpected_state` `payment_method_billing_details_address_missing` `payment_method_configuration_failures` `payment_method_currency_mismatch` `payment_method_customer_decline` `payment_method_invalid_parameter` `payment_method_invalid_parameter_testmode` `payment_method_not_available` `payment_method_provider_decline` `payment_method_provider_timeout` `payment_method_unactivated` `payment_method_unexpected_state` `payment_method_unsupported_type` `payout_reconciliation_not_ready` `payouts_limit_exceeded` `payouts_not_allowed` `postal_code_invalid` `processing_error` `product_inactive` `progressive_onboarding_limit_exceeded` `rate_limit` `refer_to_customer` `refund_disputed_payment` `resource_already_exists` `resource_missing` `return_intent_already_processed` `routing_number_invalid` `secret_key_required` `setup_attempt_failed` `setup_intent_authentication_failure` `setup_intent_invalid_parameter` `setup_intent_mandate_invalid` `setup_intent_setup_attempt_expired` `setup_intent_unexpected_state` `shipping_calculation_failed` `sku_inactive` `status_transition_invalid` `tax_id_invalid` `taxes_calculation_failed` `testmode_charges_only` `tls_version_unsupported` `token_already_used` `token_in_use` `transfer_source_balance_parameters_mismatch` `transfers_not_allowed` `url_invalid`";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["api_error", "card_error", "idempotency_error", "invalid_request_error", "chain_error", "unknown"];
                                readonly description: "`api_error` `card_error` `idempotency_error` `invalid_request_error` `chain_error` `unknown`";
                            };
                            readonly declineCode: {
                                readonly type: "string";
                            };
                            readonly paymentIntentId: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                            };
                            readonly paymentMethodType: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                            readonly docUrl: {
                                readonly type: "string";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"];
                                readonly description: "`requires_payment_method` `requires_confirmation` `requires_action` `processing` `requires_capture` `canceled` `succeeded`";
                            };
                        };
                        readonly required: readonly ["id", "type", "status"];
                    };
                };
                readonly taxRateIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
            };
            readonly required: readonly ["id", "organizationId", "customerId", "customer", "autoAdvance", "collectionMethod", "paymentSettingId", "paymentSetting", "status", "attempted", "paid", "lineItems", "url", "billingReason"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const InvoiceControllerFinalizeInvoice: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly total: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly subTotal: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly customer: {
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Customer's id";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's created at";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's updated at";
                        };
                        readonly customerReferenceId: {
                            readonly type: "string";
                            readonly description: "Customer's reference id";
                        };
                        readonly shipping: {
                            readonly description: "Customer's shipping address";
                            readonly type: "object";
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name";
                                };
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The email";
                                };
                                readonly phone: {
                                    readonly type: "string";
                                    readonly description: "The phone";
                                };
                                readonly organizationName: {
                                    readonly type: "string";
                                    readonly description: "The organization name";
                                };
                                readonly address: {
                                    readonly description: "The address";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly line1: {
                                            readonly type: "string";
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                        };
                                        readonly postalCode: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly taxIds: {
                            readonly type: "object";
                            readonly properties: {
                                readonly object: {
                                    readonly type: "string";
                                };
                                readonly data: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                            readonly customerId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                        };
                                        readonly required: readonly ["id", "customerId"];
                                    };
                                };
                            };
                        };
                        readonly visibility: {
                            readonly description: "Customer's visibility. If Dashboard then displayed on dashboard UI. If API then only returned in API response only.\n\n`10` `20`";
                            readonly type: "string";
                            readonly enum: readonly [10, 20];
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "Customer's metadata";
                            readonly additionalProperties: true;
                        };
                        readonly customerNumber: {
                            readonly type: "string";
                            readonly description: "Customer number assigned by the system";
                        };
                    };
                    readonly required: readonly ["id", "customerNumber"];
                };
                readonly autoAdvance: {
                    readonly type: "boolean";
                };
                readonly collectionMethod: {
                    readonly type: "string";
                    readonly enum: readonly ["charge_automatically", "send_invoice"];
                    readonly description: "`charge_automatically` `send_invoice`";
                };
                readonly invoiceType: {
                    readonly type: "string";
                    readonly enum: readonly ["one_time", "recurring"];
                    readonly description: "`one_time` `recurring`";
                };
                readonly customFields: {
                    readonly type: "object";
                    readonly properties: {
                        readonly fields: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly value: {
                                        readonly type: "string";
                                    };
                                };
                                readonly required: readonly ["name", "value"];
                            };
                        };
                    };
                };
                readonly paymentSettingId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly paymentSetting: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly description: "A list of the types of payment methods";
                            readonly minItems: 1;
                            readonly maxItems: 1;
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                            readonly examples: readonly ["wallet"];
                        };
                        readonly allowedChains: {
                            readonly description: "The list of chains allowed for the payment. If not provided, all chains supported by the organization are enabled.";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly chainId: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly blacklistCurrencies: {
                                        readonly type: "array";
                                        readonly description: "The list of currencies to disable for the payment. Note: This field is only used for checkout session API atm.";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                        };
                                        readonly examples: readonly ["usdc"];
                                    };
                                    readonly withdrawalAddress: {
                                        readonly type: "string";
                                        readonly description: "This is optional, default withdrawal address configured in dashboard under settings > payment methods is used. The custom withdrawal address to use for this chain instead of stored default withdrawal address.";
                                    };
                                    readonly withdrawalAddresses: {
                                        readonly description: "The list of withdrawal addresses to split the payment. If provided, the sum of all split percentages should be 100.";
                                        readonly minItems: 2;
                                        readonly maxItems: 4;
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly splitPercentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly examples: readonly [1];
                                                };
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "The withdrawal address for the split percentage";
                                                };
                                            };
                                            readonly required: readonly ["splitPercentage", "address"];
                                        };
                                    };
                                };
                                readonly required: readonly ["chainId"];
                            };
                        };
                        readonly allowedCurrencies: {
                            readonly type: "array";
                            readonly description: "The list of currencies allowed for the payment.";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                            };
                            readonly examples: readonly ["usdc", "usdt"];
                        };
                        readonly preferredChainId: {
                            readonly type: "number";
                            readonly description: "The preferred chain's id";
                            readonly examples: readonly [1];
                        };
                        readonly preferredCurrency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                            readonly description: "The preferred currency for payment\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                        };
                        readonly allowSwap: {
                            readonly type: "boolean";
                            readonly description: "Whether the user can swap the payment currency";
                            readonly default: false;
                        };
                        readonly applyFee: {
                            readonly type: "boolean";
                            readonly description: "Whether add a application fee to the user payment";
                            readonly default: false;
                        };
                        readonly feePercentage: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly maximum: 100;
                            readonly description: "Percent that will be added to subtotal as a fee";
                            readonly examples: readonly [1];
                        };
                        readonly applyGasFee: {
                            readonly type: "boolean";
                            readonly description: "Whether add a transaction fee to the user payment";
                            readonly default: false;
                        };
                        readonly allowSplitPayments: {
                            readonly type: "boolean";
                            readonly description: "Whether the user can split the payment";
                        };
                        readonly slippagePercentage: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly maximum: 100;
                            readonly description: "The slippage percentage allowed for swaps and withdrawals";
                            readonly default: 10;
                            readonly examples: readonly [1];
                        };
                    };
                    readonly required: readonly ["id", "feePercentage"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["draft", "open", "paid", "void", "uncollectible"];
                    readonly description: "`draft` `open` `paid` `void` `uncollectible`";
                };
                readonly attempted: {
                    readonly type: "boolean";
                };
                readonly attemptCount: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly nextPaymentAttempt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly dueDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly footer: {
                    readonly type: "string";
                };
                readonly fromInvoiceId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly latestRevisionId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly invoicePdfUrl: {
                    readonly type: "string";
                };
                readonly invoiceNumber: {
                    readonly type: "string";
                };
                readonly paid: {
                    readonly type: "boolean";
                };
                readonly paidOutOfBand: {
                    readonly type: "boolean";
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly clientReferenceId: {
                    readonly type: "string";
                };
                readonly lineItems: {
                    readonly type: "object";
                    readonly properties: {
                        readonly object: {
                            readonly type: "string";
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly description: {
                                        readonly type: "string";
                                    };
                                    readonly periodStart: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly periodEnd: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly quantity: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly price: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly billingScheme: {
                                                readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                                                readonly type: "string";
                                                readonly enum: readonly ["per_unit"];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                                readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                            };
                                            readonly productId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "Product's id";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                            readonly interval: {
                                                readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                                                readonly type: "string";
                                                readonly enum: readonly ["day", "week", "month", "year"];
                                            };
                                            readonly intervalCount: {
                                                readonly type: "number";
                                                readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                                                readonly examples: readonly [1];
                                            };
                                            readonly isActive: {
                                                readonly type: "boolean";
                                                readonly description: "Whether the price is currently active";
                                            };
                                            readonly usageType: {
                                                readonly description: "The usage type of the price.\n\n`licensed`";
                                                readonly type: "string";
                                                readonly enum: readonly ["licensed"];
                                            };
                                            readonly type: {
                                                readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                                                readonly type: "string";
                                                readonly enum: readonly ["one_time", "recurring", "streaming"];
                                            };
                                            readonly unitAmount: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly unitAmountDecimal: {
                                                readonly type: "string";
                                            };
                                            readonly customUnitMax: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitMin: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customPreset: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitAmountSuggestions: {
                                                readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                            readonly product: {
                                                readonly description: "The product this price belongs to";
                                                readonly type: "object";
                                                readonly required: readonly ["id", "name"];
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                    };
                                                    readonly createdAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly updatedAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the product. Displayed on the checkout page";
                                                    };
                                                    readonly description: {
                                                        readonly type: "string";
                                                        readonly description: "The description of the product. Displayed on the checkout page";
                                                    };
                                                    readonly isActive: {
                                                        readonly type: "boolean";
                                                        readonly description: "Whether the product is currently active";
                                                    };
                                                    readonly images: {
                                                        readonly maxItems: 8;
                                                        readonly description: "The url of product images. Displayed on the checkout page";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly publicImages: {
                                                        readonly description: "Product images with absolute public url";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly unitLabel: {
                                                        readonly type: "string";
                                                        readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                                    };
                                                    readonly url: {
                                                        readonly type: "string";
                                                        readonly description: "The url of the product";
                                                    };
                                                    readonly defaultPriceId: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Product's default price id";
                                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                    };
                                                    readonly metadata: {
                                                        readonly type: "object";
                                                        readonly description: "The metadata of the product";
                                                        readonly additionalProperties: true;
                                                    };
                                                    readonly visibility: {
                                                        readonly description: "The visibility of the product\n\n`10` `20`";
                                                        readonly type: "string";
                                                        readonly enum: readonly [10, 20];
                                                    };
                                                };
                                            };
                                            readonly metadata: {
                                                readonly type: "object";
                                                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                                readonly additionalProperties: true;
                                            };
                                            readonly visibility: {
                                                readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                                                readonly type: "string";
                                                readonly enum: readonly [10, 20];
                                            };
                                        };
                                        readonly required: readonly ["id", "currency", "productId", "type", "product"];
                                    };
                                    readonly taxRates: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the tax rate.";
                                                };
                                                readonly description: {
                                                    readonly type: "string";
                                                    readonly description: "The description of the tax rate.";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                    readonly description: "The country of the tax rate.";
                                                };
                                                readonly percentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly description: "Percent that will be added to subtotal as a tax.";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly type: {
                                                    readonly description: "The type of the tax rate.\n\n`exclusive` `inclusive`";
                                                    readonly type: "string";
                                                    readonly enum: readonly ["exclusive", "inclusive"];
                                                };
                                                readonly isDefault: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                            readonly required: readonly ["id", "name", "percentage", "type", "isDefault"];
                                        };
                                    };
                                    readonly amountTotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountSubtotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountTax: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                };
                                readonly required: readonly ["price"];
                            };
                        };
                    };
                };
                readonly finalizedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly paidAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly markedUncollectibleAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly visibility: {
                    readonly type: "string";
                    readonly enum: readonly [10, 20];
                    readonly description: "`10` `20`";
                };
                readonly paymentIntentId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "The URL to redirect the customer to pay invoice";
                };
                readonly subscriptionId: {
                    readonly type: "string";
                };
                readonly periodStart: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly periodEnd: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly billingReason: {
                    readonly type: "string";
                    readonly enum: readonly ["subscription_cycle", "subscription_create", "subscription_update", "subscription", "manual", "upcoming", "subscription_threshold"];
                    readonly description: "`subscription_cycle` `subscription_create` `subscription_update` `subscription` `manual` `upcoming` `subscription_threshold`";
                };
                readonly allowPromotionCodes: {
                    readonly type: "boolean";
                    readonly description: "Enables user redeemable promotion codes.";
                };
                readonly finalizeScheduleAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "The date on which invoice will be finalize and send";
                };
                readonly totalTax: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly paymentIntent: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly organizationId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly amount: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountReceived: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"];
                            readonly description: "`requires_payment_method` `requires_confirmation` `requires_action` `processing` `requires_capture` `canceled` `succeeded`";
                        };
                        readonly paymentMethodId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly description: {
                            readonly type: "string";
                        };
                        readonly paymentMethod: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly assetId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly asset: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "Asset id";
                                        };
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "Asset name";
                                        };
                                        readonly chainId: {
                                            readonly type: "number";
                                            readonly description: "Asset chain id";
                                            readonly examples: readonly [1];
                                        };
                                        readonly address: {
                                            readonly type: "string";
                                            readonly description: "Asset address on chain";
                                        };
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                            readonly description: "Asset currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                        };
                                        readonly symbol: {
                                            readonly type: "string";
                                            readonly description: "Asset symbol";
                                        };
                                        readonly decimals: {
                                            readonly type: "number";
                                            readonly description: "Asset decimals in which it is represented on chain";
                                            readonly examples: readonly [1];
                                        };
                                        readonly coingeckoId: {
                                            readonly type: "string";
                                            readonly description: "Asset coingecko id";
                                        };
                                        readonly superToken: {
                                            readonly description: "SuperToken data";
                                            readonly type: "object";
                                            readonly required: readonly ["address", "decimals", "symbol"];
                                            readonly properties: {
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's address";
                                                };
                                                readonly decimals: {
                                                    readonly type: "number";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly symbol: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's symbol";
                                                };
                                            };
                                        };
                                        readonly isEIP5827Supported: {
                                            readonly type: "boolean";
                                            readonly description: "Is EIP5827 supported";
                                        };
                                    };
                                    readonly required: readonly ["id", "name", "chainId", "address", "currency", "symbol", "decimals", "isEIP5827Supported"];
                                };
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                    readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                                };
                                readonly accountAddress: {
                                    readonly type: "string";
                                };
                                readonly billingDetails: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "The name";
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                            readonly description: "The email";
                                        };
                                        readonly phone: {
                                            readonly type: "string";
                                            readonly description: "The phone";
                                        };
                                        readonly organizationName: {
                                            readonly type: "string";
                                            readonly description: "The organization name";
                                        };
                                        readonly address: {
                                            readonly description: "The address";
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly line1: {
                                                    readonly type: "string";
                                                };
                                                readonly line2: {
                                                    readonly type: "string";
                                                };
                                                readonly city: {
                                                    readonly type: "string";
                                                };
                                                readonly state: {
                                                    readonly type: "string";
                                                };
                                                readonly postalCode: {
                                                    readonly type: "string";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly customerId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                };
                            };
                            readonly required: readonly ["id", "assetId", "asset", "type"];
                        };
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                        };
                        readonly transferAccountAddress: {
                            readonly type: "string";
                        };
                        readonly transactions: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly description: "Transaction type\n\n`incoming` `outgoing` `event` `transfer`";
                                        readonly type: "string";
                                        readonly enum: readonly ["incoming", "outgoing", "event", "transfer"];
                                    };
                                    readonly transactionRelayId: {
                                        readonly type: "string";
                                        readonly description: "Transaction relay id";
                                    };
                                    readonly transactionHash: {
                                        readonly type: "string";
                                        readonly description: "Transaction hash";
                                    };
                                    readonly nonce: {
                                        readonly type: "number";
                                        readonly description: "Transaction nonce";
                                        readonly examples: readonly [1];
                                    };
                                    readonly gasLimit: {
                                        readonly type: "number";
                                        readonly description: "Transaction gas limit used in payment";
                                        readonly examples: readonly [1];
                                    };
                                    readonly validUntil: {
                                        readonly type: "string";
                                        readonly description: "Transaction valid until";
                                    };
                                    readonly fromAddress: {
                                        readonly type: "string";
                                        readonly description: "Transaction from address";
                                    };
                                    readonly toAddress: {
                                        readonly type: "string";
                                        readonly description: "Transaction to address";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "Transaction currency\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                        readonly description: "Transaction created at";
                                    };
                                    readonly amount: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "Transaction amount in 8 decimals";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountRaw: {
                                        readonly type: "string";
                                        readonly description: "Transaction amount raw received from alchemy";
                                    };
                                    readonly assetId: {
                                        readonly type: "string";
                                        readonly description: "Transaction asset id";
                                    };
                                    readonly asset: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly address: {
                                                readonly type: "string";
                                            };
                                            readonly chainId: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                            };
                                            readonly symbol: {
                                                readonly type: "string";
                                            };
                                            readonly decimals: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly coingeckoId: {
                                                readonly type: "string";
                                            };
                                            readonly isPublic: {
                                                readonly type: "boolean";
                                            };
                                            readonly superToken: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly address: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's address";
                                                    };
                                                    readonly decimals: {
                                                        readonly type: "number";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly symbol: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's symbol";
                                                    };
                                                };
                                                readonly required: readonly ["address", "decimals", "symbol"];
                                            };
                                            readonly chain: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "number";
                                                        readonly description: "Chain id";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "Chain name";
                                                    };
                                                    readonly icon: {
                                                        readonly type: "string";
                                                        readonly description: "Chain icon";
                                                    };
                                                    readonly currency: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                        readonly description: "Chain currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                                    };
                                                    readonly blockExplorerTransactionUrl: {
                                                        readonly type: "string";
                                                        readonly description: "Chain block explorer transaction url";
                                                    };
                                                    readonly blockExplorerName: {
                                                        readonly type: "string";
                                                        readonly description: "Chain block explorer name";
                                                    };
                                                    readonly type: {
                                                        readonly description: "Chain type\n\n`evm` `solana` `tron` `stripe` `binance_pay`";
                                                        readonly type: "string";
                                                        readonly enum: readonly ["evm", "solana", "tron", "stripe", "binance_pay"];
                                                    };
                                                    readonly isBeta: {
                                                        readonly type: "boolean";
                                                        readonly description: "Is beta asset";
                                                    };
                                                };
                                                readonly required: readonly ["id", "name", "icon", "currency", "blockExplorerTransactionUrl", "blockExplorerName", "type", "isBeta"];
                                            };
                                        };
                                        readonly required: readonly ["id", "name", "address", "chainId", "currency", "symbol", "decimals", "isPublic", "chain"];
                                    };
                                    readonly transactionUrl: {
                                        readonly type: "string";
                                        readonly description: "Transaction url";
                                    };
                                };
                                readonly required: readonly ["type", "fromAddress", "toAddress", "currency", "amountRaw", "assetId", "asset"];
                            };
                        };
                        readonly paymentReceipt: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly organizationId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly paymentIntentId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly receiptNumber: {
                                    readonly type: "string";
                                };
                                readonly uri: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["id", "organizationId", "paymentIntentId", "receiptNumber"];
                        };
                        readonly canceledAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly cancellationReason: {
                            readonly type: "string";
                        };
                        readonly stripe: {
                            readonly type: "object";
                            readonly properties: {
                                readonly paymentIntentId: {
                                    readonly type: "string";
                                };
                                readonly receiptUrl: {
                                    readonly type: "string";
                                };
                                readonly cardLast4: {
                                    readonly type: "string";
                                };
                                readonly displayName: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly isMarkRefunded: {
                            readonly type: "boolean";
                        };
                        readonly markRefundedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly markRefundedComment: {
                            readonly type: "string";
                        };
                    };
                    readonly required: readonly ["id", "organizationId", "status", "paymentMethodId", "transactions"];
                };
                readonly paymentIntentAttempt: {
                    readonly description: "The payment intent associated with the session. Payment intent is created when the session is created.";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly errorCode: {
                                readonly type: "string";
                                readonly enum: readonly ["account_closed", "account_information_mismatch", "account_invalid", "account_number_invalid", "amount_too_large", "amount_too_small", "api_key_expired", "authentication_required", "balance_insufficient", "account_bad_routing_numbers", "account_declined", "account_exists", "account_restricted", "account_unusable", "account_unverified", "billing_invalid_mandate", "capture_charge_authorization_expired", "capture_unauthorized_payment", "charge_already_captured", "charge_already_refunded", "charge_disputed", "charge_exceeds_source_limit", "charge_expired_for_capture", "charge_invalid_parameter", "charge_not_refundable", "clearing_code_unsupported", "country_code_invalid", "country_unsupported", "coupon_expired", "customer_max_payment_methods", "customer_max_subscriptions", "debit_not_authorized", "email_invalid", "expired_card", "idempotency_key_in_use", "incorrect_address", "incorrect_number", "insufficient_funds", "intent_invalid_state", "intent_verification_method_missing", "invalid_characters", "invalid_charge_amount", "invalid_source_usage", "invoice_no_customer_line_items", "invoice_no_payment_method_types", "invoice_no_subscription_line_items", "invoice_not_editable", "invoice_on_behalf_of_not_editable", "invoice_payment_intent_requires_action", "invoice_upcoming_none", "livemode_mismatch", "lock_timeout", "missing", "no_account", "parameter_invalid_empty", "parameter_invalid_integer", "parameter_invalid_string_blank", "parameter_invalid_string_empty", "parameter_missing", "parameter_unknown", "parameters_exclusive", "payment_intent_action_required", "payment_intent_authentication_failure", "payment_intent_incompatible_payment_method", "payment_intent_invalid_parameter", "payment_intent_mandate_invalid", "payment_intent_payment_attempt_expired", "payment_intent_payment_attempt_failed", "payment_intent_unexpected_state", "payment_method_billing_details_address_missing", "payment_method_configuration_failures", "payment_method_currency_mismatch", "payment_method_customer_decline", "payment_method_invalid_parameter", "payment_method_invalid_parameter_testmode", "payment_method_not_available", "payment_method_provider_decline", "payment_method_provider_timeout", "payment_method_unactivated", "payment_method_unexpected_state", "payment_method_unsupported_type", "payout_reconciliation_not_ready", "payouts_limit_exceeded", "payouts_not_allowed", "postal_code_invalid", "processing_error", "product_inactive", "progressive_onboarding_limit_exceeded", "rate_limit", "refer_to_customer", "refund_disputed_payment", "resource_already_exists", "resource_missing", "return_intent_already_processed", "routing_number_invalid", "secret_key_required", "setup_attempt_failed", "setup_intent_authentication_failure", "setup_intent_invalid_parameter", "setup_intent_mandate_invalid", "setup_intent_setup_attempt_expired", "setup_intent_unexpected_state", "shipping_calculation_failed", "sku_inactive", "status_transition_invalid", "tax_id_invalid", "taxes_calculation_failed", "testmode_charges_only", "tls_version_unsupported", "token_already_used", "token_in_use", "transfer_source_balance_parameters_mismatch", "transfers_not_allowed", "url_invalid"];
                                readonly description: "`account_closed` `account_information_mismatch` `account_invalid` `account_number_invalid` `amount_too_large` `amount_too_small` `api_key_expired` `authentication_required` `balance_insufficient` `account_bad_routing_numbers` `account_declined` `account_exists` `account_restricted` `account_unusable` `account_unverified` `billing_invalid_mandate` `capture_charge_authorization_expired` `capture_unauthorized_payment` `charge_already_captured` `charge_already_refunded` `charge_disputed` `charge_exceeds_source_limit` `charge_expired_for_capture` `charge_invalid_parameter` `charge_not_refundable` `clearing_code_unsupported` `country_code_invalid` `country_unsupported` `coupon_expired` `customer_max_payment_methods` `customer_max_subscriptions` `debit_not_authorized` `email_invalid` `expired_card` `idempotency_key_in_use` `incorrect_address` `incorrect_number` `insufficient_funds` `intent_invalid_state` `intent_verification_method_missing` `invalid_characters` `invalid_charge_amount` `invalid_source_usage` `invoice_no_customer_line_items` `invoice_no_payment_method_types` `invoice_no_subscription_line_items` `invoice_not_editable` `invoice_on_behalf_of_not_editable` `invoice_payment_intent_requires_action` `invoice_upcoming_none` `livemode_mismatch` `lock_timeout` `missing` `no_account` `parameter_invalid_empty` `parameter_invalid_integer` `parameter_invalid_string_blank` `parameter_invalid_string_empty` `parameter_missing` `parameter_unknown` `parameters_exclusive` `payment_intent_action_required` `payment_intent_authentication_failure` `payment_intent_incompatible_payment_method` `payment_intent_invalid_parameter` `payment_intent_mandate_invalid` `payment_intent_payment_attempt_expired` `payment_intent_payment_attempt_failed` `payment_intent_unexpected_state` `payment_method_billing_details_address_missing` `payment_method_configuration_failures` `payment_method_currency_mismatch` `payment_method_customer_decline` `payment_method_invalid_parameter` `payment_method_invalid_parameter_testmode` `payment_method_not_available` `payment_method_provider_decline` `payment_method_provider_timeout` `payment_method_unactivated` `payment_method_unexpected_state` `payment_method_unsupported_type` `payout_reconciliation_not_ready` `payouts_limit_exceeded` `payouts_not_allowed` `postal_code_invalid` `processing_error` `product_inactive` `progressive_onboarding_limit_exceeded` `rate_limit` `refer_to_customer` `refund_disputed_payment` `resource_already_exists` `resource_missing` `return_intent_already_processed` `routing_number_invalid` `secret_key_required` `setup_attempt_failed` `setup_intent_authentication_failure` `setup_intent_invalid_parameter` `setup_intent_mandate_invalid` `setup_intent_setup_attempt_expired` `setup_intent_unexpected_state` `shipping_calculation_failed` `sku_inactive` `status_transition_invalid` `tax_id_invalid` `taxes_calculation_failed` `testmode_charges_only` `tls_version_unsupported` `token_already_used` `token_in_use` `transfer_source_balance_parameters_mismatch` `transfers_not_allowed` `url_invalid`";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["api_error", "card_error", "idempotency_error", "invalid_request_error", "chain_error", "unknown"];
                                readonly description: "`api_error` `card_error` `idempotency_error` `invalid_request_error` `chain_error` `unknown`";
                            };
                            readonly declineCode: {
                                readonly type: "string";
                            };
                            readonly paymentIntentId: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                            };
                            readonly paymentMethodType: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                            readonly docUrl: {
                                readonly type: "string";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"];
                                readonly description: "`requires_payment_method` `requires_confirmation` `requires_action` `processing` `requires_capture` `canceled` `succeeded`";
                            };
                        };
                        readonly required: readonly ["id", "type", "status"];
                    };
                };
                readonly taxRateIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
            };
            readonly required: readonly ["id", "organizationId", "customerId", "customer", "autoAdvance", "collectionMethod", "paymentSettingId", "paymentSetting", "status", "attempted", "paid", "lineItems", "url", "billingReason"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const InvoiceControllerGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly total: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly subTotal: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly customer: {
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Customer's id";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's created at";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's updated at";
                        };
                        readonly customerReferenceId: {
                            readonly type: "string";
                            readonly description: "Customer's reference id";
                        };
                        readonly shipping: {
                            readonly description: "Customer's shipping address";
                            readonly type: "object";
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name";
                                };
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The email";
                                };
                                readonly phone: {
                                    readonly type: "string";
                                    readonly description: "The phone";
                                };
                                readonly organizationName: {
                                    readonly type: "string";
                                    readonly description: "The organization name";
                                };
                                readonly address: {
                                    readonly description: "The address";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly line1: {
                                            readonly type: "string";
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                        };
                                        readonly postalCode: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly taxIds: {
                            readonly type: "object";
                            readonly properties: {
                                readonly object: {
                                    readonly type: "string";
                                };
                                readonly data: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                            readonly customerId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                        };
                                        readonly required: readonly ["id", "customerId"];
                                    };
                                };
                            };
                        };
                        readonly visibility: {
                            readonly description: "Customer's visibility. If Dashboard then displayed on dashboard UI. If API then only returned in API response only.\n\n`10` `20`";
                            readonly type: "string";
                            readonly enum: readonly [10, 20];
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "Customer's metadata";
                            readonly additionalProperties: true;
                        };
                        readonly customerNumber: {
                            readonly type: "string";
                            readonly description: "Customer number assigned by the system";
                        };
                    };
                    readonly required: readonly ["id", "customerNumber"];
                };
                readonly autoAdvance: {
                    readonly type: "boolean";
                };
                readonly collectionMethod: {
                    readonly type: "string";
                    readonly enum: readonly ["charge_automatically", "send_invoice"];
                    readonly description: "`charge_automatically` `send_invoice`";
                };
                readonly invoiceType: {
                    readonly type: "string";
                    readonly enum: readonly ["one_time", "recurring"];
                    readonly description: "`one_time` `recurring`";
                };
                readonly customFields: {
                    readonly type: "object";
                    readonly properties: {
                        readonly fields: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly value: {
                                        readonly type: "string";
                                    };
                                };
                                readonly required: readonly ["name", "value"];
                            };
                        };
                    };
                };
                readonly paymentSettingId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly paymentSetting: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly description: "A list of the types of payment methods";
                            readonly minItems: 1;
                            readonly maxItems: 1;
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                            readonly examples: readonly ["wallet"];
                        };
                        readonly allowedChains: {
                            readonly description: "The list of chains allowed for the payment. If not provided, all chains supported by the organization are enabled.";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly chainId: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly blacklistCurrencies: {
                                        readonly type: "array";
                                        readonly description: "The list of currencies to disable for the payment. Note: This field is only used for checkout session API atm.";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                        };
                                        readonly examples: readonly ["usdc"];
                                    };
                                    readonly withdrawalAddress: {
                                        readonly type: "string";
                                        readonly description: "This is optional, default withdrawal address configured in dashboard under settings > payment methods is used. The custom withdrawal address to use for this chain instead of stored default withdrawal address.";
                                    };
                                    readonly withdrawalAddresses: {
                                        readonly description: "The list of withdrawal addresses to split the payment. If provided, the sum of all split percentages should be 100.";
                                        readonly minItems: 2;
                                        readonly maxItems: 4;
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly splitPercentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly examples: readonly [1];
                                                };
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "The withdrawal address for the split percentage";
                                                };
                                            };
                                            readonly required: readonly ["splitPercentage", "address"];
                                        };
                                    };
                                };
                                readonly required: readonly ["chainId"];
                            };
                        };
                        readonly allowedCurrencies: {
                            readonly type: "array";
                            readonly description: "The list of currencies allowed for the payment.";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                            };
                            readonly examples: readonly ["usdc", "usdt"];
                        };
                        readonly preferredChainId: {
                            readonly type: "number";
                            readonly description: "The preferred chain's id";
                            readonly examples: readonly [1];
                        };
                        readonly preferredCurrency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                            readonly description: "The preferred currency for payment\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                        };
                        readonly allowSwap: {
                            readonly type: "boolean";
                            readonly description: "Whether the user can swap the payment currency";
                            readonly default: false;
                        };
                        readonly applyFee: {
                            readonly type: "boolean";
                            readonly description: "Whether add a application fee to the user payment";
                            readonly default: false;
                        };
                        readonly feePercentage: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly maximum: 100;
                            readonly description: "Percent that will be added to subtotal as a fee";
                            readonly examples: readonly [1];
                        };
                        readonly applyGasFee: {
                            readonly type: "boolean";
                            readonly description: "Whether add a transaction fee to the user payment";
                            readonly default: false;
                        };
                        readonly allowSplitPayments: {
                            readonly type: "boolean";
                            readonly description: "Whether the user can split the payment";
                        };
                        readonly slippagePercentage: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly maximum: 100;
                            readonly description: "The slippage percentage allowed for swaps and withdrawals";
                            readonly default: 10;
                            readonly examples: readonly [1];
                        };
                    };
                    readonly required: readonly ["id", "feePercentage"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["draft", "open", "paid", "void", "uncollectible"];
                    readonly description: "`draft` `open` `paid` `void` `uncollectible`";
                };
                readonly attempted: {
                    readonly type: "boolean";
                };
                readonly attemptCount: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly nextPaymentAttempt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly dueDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly footer: {
                    readonly type: "string";
                };
                readonly fromInvoiceId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly latestRevisionId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly invoicePdfUrl: {
                    readonly type: "string";
                };
                readonly invoiceNumber: {
                    readonly type: "string";
                };
                readonly paid: {
                    readonly type: "boolean";
                };
                readonly paidOutOfBand: {
                    readonly type: "boolean";
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly clientReferenceId: {
                    readonly type: "string";
                };
                readonly lineItems: {
                    readonly type: "object";
                    readonly properties: {
                        readonly object: {
                            readonly type: "string";
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly description: {
                                        readonly type: "string";
                                    };
                                    readonly periodStart: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly periodEnd: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly quantity: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly price: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly billingScheme: {
                                                readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                                                readonly type: "string";
                                                readonly enum: readonly ["per_unit"];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                                readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                            };
                                            readonly productId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "Product's id";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                            readonly interval: {
                                                readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                                                readonly type: "string";
                                                readonly enum: readonly ["day", "week", "month", "year"];
                                            };
                                            readonly intervalCount: {
                                                readonly type: "number";
                                                readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                                                readonly examples: readonly [1];
                                            };
                                            readonly isActive: {
                                                readonly type: "boolean";
                                                readonly description: "Whether the price is currently active";
                                            };
                                            readonly usageType: {
                                                readonly description: "The usage type of the price.\n\n`licensed`";
                                                readonly type: "string";
                                                readonly enum: readonly ["licensed"];
                                            };
                                            readonly type: {
                                                readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                                                readonly type: "string";
                                                readonly enum: readonly ["one_time", "recurring", "streaming"];
                                            };
                                            readonly unitAmount: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly unitAmountDecimal: {
                                                readonly type: "string";
                                            };
                                            readonly customUnitMax: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitMin: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customPreset: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitAmountSuggestions: {
                                                readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                            readonly product: {
                                                readonly description: "The product this price belongs to";
                                                readonly type: "object";
                                                readonly required: readonly ["id", "name"];
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                    };
                                                    readonly createdAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly updatedAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the product. Displayed on the checkout page";
                                                    };
                                                    readonly description: {
                                                        readonly type: "string";
                                                        readonly description: "The description of the product. Displayed on the checkout page";
                                                    };
                                                    readonly isActive: {
                                                        readonly type: "boolean";
                                                        readonly description: "Whether the product is currently active";
                                                    };
                                                    readonly images: {
                                                        readonly maxItems: 8;
                                                        readonly description: "The url of product images. Displayed on the checkout page";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly publicImages: {
                                                        readonly description: "Product images with absolute public url";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly unitLabel: {
                                                        readonly type: "string";
                                                        readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                                    };
                                                    readonly url: {
                                                        readonly type: "string";
                                                        readonly description: "The url of the product";
                                                    };
                                                    readonly defaultPriceId: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Product's default price id";
                                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                    };
                                                    readonly metadata: {
                                                        readonly type: "object";
                                                        readonly description: "The metadata of the product";
                                                        readonly additionalProperties: true;
                                                    };
                                                    readonly visibility: {
                                                        readonly description: "The visibility of the product\n\n`10` `20`";
                                                        readonly type: "string";
                                                        readonly enum: readonly [10, 20];
                                                    };
                                                };
                                            };
                                            readonly metadata: {
                                                readonly type: "object";
                                                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                                readonly additionalProperties: true;
                                            };
                                            readonly visibility: {
                                                readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                                                readonly type: "string";
                                                readonly enum: readonly [10, 20];
                                            };
                                        };
                                        readonly required: readonly ["id", "currency", "productId", "type", "product"];
                                    };
                                    readonly taxRates: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the tax rate.";
                                                };
                                                readonly description: {
                                                    readonly type: "string";
                                                    readonly description: "The description of the tax rate.";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                    readonly description: "The country of the tax rate.";
                                                };
                                                readonly percentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly description: "Percent that will be added to subtotal as a tax.";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly type: {
                                                    readonly description: "The type of the tax rate.\n\n`exclusive` `inclusive`";
                                                    readonly type: "string";
                                                    readonly enum: readonly ["exclusive", "inclusive"];
                                                };
                                                readonly isDefault: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                            readonly required: readonly ["id", "name", "percentage", "type", "isDefault"];
                                        };
                                    };
                                    readonly amountTotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountSubtotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountTax: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                };
                                readonly required: readonly ["price"];
                            };
                        };
                    };
                };
                readonly finalizedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly paidAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly markedUncollectibleAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly visibility: {
                    readonly type: "string";
                    readonly enum: readonly [10, 20];
                    readonly description: "`10` `20`";
                };
                readonly paymentIntentId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "The URL to redirect the customer to pay invoice";
                };
                readonly subscriptionId: {
                    readonly type: "string";
                };
                readonly periodStart: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly periodEnd: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly billingReason: {
                    readonly type: "string";
                    readonly enum: readonly ["subscription_cycle", "subscription_create", "subscription_update", "subscription", "manual", "upcoming", "subscription_threshold"];
                    readonly description: "`subscription_cycle` `subscription_create` `subscription_update` `subscription` `manual` `upcoming` `subscription_threshold`";
                };
                readonly allowPromotionCodes: {
                    readonly type: "boolean";
                    readonly description: "Enables user redeemable promotion codes.";
                };
                readonly finalizeScheduleAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "The date on which invoice will be finalize and send";
                };
                readonly totalTax: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly paymentIntent: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly organizationId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly amount: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountReceived: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"];
                            readonly description: "`requires_payment_method` `requires_confirmation` `requires_action` `processing` `requires_capture` `canceled` `succeeded`";
                        };
                        readonly paymentMethodId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly description: {
                            readonly type: "string";
                        };
                        readonly paymentMethod: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly assetId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly asset: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "Asset id";
                                        };
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "Asset name";
                                        };
                                        readonly chainId: {
                                            readonly type: "number";
                                            readonly description: "Asset chain id";
                                            readonly examples: readonly [1];
                                        };
                                        readonly address: {
                                            readonly type: "string";
                                            readonly description: "Asset address on chain";
                                        };
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                            readonly description: "Asset currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                        };
                                        readonly symbol: {
                                            readonly type: "string";
                                            readonly description: "Asset symbol";
                                        };
                                        readonly decimals: {
                                            readonly type: "number";
                                            readonly description: "Asset decimals in which it is represented on chain";
                                            readonly examples: readonly [1];
                                        };
                                        readonly coingeckoId: {
                                            readonly type: "string";
                                            readonly description: "Asset coingecko id";
                                        };
                                        readonly superToken: {
                                            readonly description: "SuperToken data";
                                            readonly type: "object";
                                            readonly required: readonly ["address", "decimals", "symbol"];
                                            readonly properties: {
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's address";
                                                };
                                                readonly decimals: {
                                                    readonly type: "number";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly symbol: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's symbol";
                                                };
                                            };
                                        };
                                        readonly isEIP5827Supported: {
                                            readonly type: "boolean";
                                            readonly description: "Is EIP5827 supported";
                                        };
                                    };
                                    readonly required: readonly ["id", "name", "chainId", "address", "currency", "symbol", "decimals", "isEIP5827Supported"];
                                };
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                    readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                                };
                                readonly accountAddress: {
                                    readonly type: "string";
                                };
                                readonly billingDetails: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "The name";
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                            readonly description: "The email";
                                        };
                                        readonly phone: {
                                            readonly type: "string";
                                            readonly description: "The phone";
                                        };
                                        readonly organizationName: {
                                            readonly type: "string";
                                            readonly description: "The organization name";
                                        };
                                        readonly address: {
                                            readonly description: "The address";
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly line1: {
                                                    readonly type: "string";
                                                };
                                                readonly line2: {
                                                    readonly type: "string";
                                                };
                                                readonly city: {
                                                    readonly type: "string";
                                                };
                                                readonly state: {
                                                    readonly type: "string";
                                                };
                                                readonly postalCode: {
                                                    readonly type: "string";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly customerId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                };
                            };
                            readonly required: readonly ["id", "assetId", "asset", "type"];
                        };
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                        };
                        readonly transferAccountAddress: {
                            readonly type: "string";
                        };
                        readonly transactions: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly description: "Transaction type\n\n`incoming` `outgoing` `event` `transfer`";
                                        readonly type: "string";
                                        readonly enum: readonly ["incoming", "outgoing", "event", "transfer"];
                                    };
                                    readonly transactionRelayId: {
                                        readonly type: "string";
                                        readonly description: "Transaction relay id";
                                    };
                                    readonly transactionHash: {
                                        readonly type: "string";
                                        readonly description: "Transaction hash";
                                    };
                                    readonly nonce: {
                                        readonly type: "number";
                                        readonly description: "Transaction nonce";
                                        readonly examples: readonly [1];
                                    };
                                    readonly gasLimit: {
                                        readonly type: "number";
                                        readonly description: "Transaction gas limit used in payment";
                                        readonly examples: readonly [1];
                                    };
                                    readonly validUntil: {
                                        readonly type: "string";
                                        readonly description: "Transaction valid until";
                                    };
                                    readonly fromAddress: {
                                        readonly type: "string";
                                        readonly description: "Transaction from address";
                                    };
                                    readonly toAddress: {
                                        readonly type: "string";
                                        readonly description: "Transaction to address";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "Transaction currency\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                        readonly description: "Transaction created at";
                                    };
                                    readonly amount: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "Transaction amount in 8 decimals";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountRaw: {
                                        readonly type: "string";
                                        readonly description: "Transaction amount raw received from alchemy";
                                    };
                                    readonly assetId: {
                                        readonly type: "string";
                                        readonly description: "Transaction asset id";
                                    };
                                    readonly asset: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly address: {
                                                readonly type: "string";
                                            };
                                            readonly chainId: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                            };
                                            readonly symbol: {
                                                readonly type: "string";
                                            };
                                            readonly decimals: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly coingeckoId: {
                                                readonly type: "string";
                                            };
                                            readonly isPublic: {
                                                readonly type: "boolean";
                                            };
                                            readonly superToken: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly address: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's address";
                                                    };
                                                    readonly decimals: {
                                                        readonly type: "number";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly symbol: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's symbol";
                                                    };
                                                };
                                                readonly required: readonly ["address", "decimals", "symbol"];
                                            };
                                            readonly chain: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "number";
                                                        readonly description: "Chain id";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "Chain name";
                                                    };
                                                    readonly icon: {
                                                        readonly type: "string";
                                                        readonly description: "Chain icon";
                                                    };
                                                    readonly currency: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                        readonly description: "Chain currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                                    };
                                                    readonly blockExplorerTransactionUrl: {
                                                        readonly type: "string";
                                                        readonly description: "Chain block explorer transaction url";
                                                    };
                                                    readonly blockExplorerName: {
                                                        readonly type: "string";
                                                        readonly description: "Chain block explorer name";
                                                    };
                                                    readonly type: {
                                                        readonly description: "Chain type\n\n`evm` `solana` `tron` `stripe` `binance_pay`";
                                                        readonly type: "string";
                                                        readonly enum: readonly ["evm", "solana", "tron", "stripe", "binance_pay"];
                                                    };
                                                    readonly isBeta: {
                                                        readonly type: "boolean";
                                                        readonly description: "Is beta asset";
                                                    };
                                                };
                                                readonly required: readonly ["id", "name", "icon", "currency", "blockExplorerTransactionUrl", "blockExplorerName", "type", "isBeta"];
                                            };
                                        };
                                        readonly required: readonly ["id", "name", "address", "chainId", "currency", "symbol", "decimals", "isPublic", "chain"];
                                    };
                                    readonly transactionUrl: {
                                        readonly type: "string";
                                        readonly description: "Transaction url";
                                    };
                                };
                                readonly required: readonly ["type", "fromAddress", "toAddress", "currency", "amountRaw", "assetId", "asset"];
                            };
                        };
                        readonly paymentReceipt: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly organizationId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly paymentIntentId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly receiptNumber: {
                                    readonly type: "string";
                                };
                                readonly uri: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["id", "organizationId", "paymentIntentId", "receiptNumber"];
                        };
                        readonly canceledAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly cancellationReason: {
                            readonly type: "string";
                        };
                        readonly stripe: {
                            readonly type: "object";
                            readonly properties: {
                                readonly paymentIntentId: {
                                    readonly type: "string";
                                };
                                readonly receiptUrl: {
                                    readonly type: "string";
                                };
                                readonly cardLast4: {
                                    readonly type: "string";
                                };
                                readonly displayName: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly isMarkRefunded: {
                            readonly type: "boolean";
                        };
                        readonly markRefundedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly markRefundedComment: {
                            readonly type: "string";
                        };
                    };
                    readonly required: readonly ["id", "organizationId", "status", "paymentMethodId", "transactions"];
                };
                readonly paymentIntentAttempt: {
                    readonly description: "The payment intent associated with the session. Payment intent is created when the session is created.";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly errorCode: {
                                readonly type: "string";
                                readonly enum: readonly ["account_closed", "account_information_mismatch", "account_invalid", "account_number_invalid", "amount_too_large", "amount_too_small", "api_key_expired", "authentication_required", "balance_insufficient", "account_bad_routing_numbers", "account_declined", "account_exists", "account_restricted", "account_unusable", "account_unverified", "billing_invalid_mandate", "capture_charge_authorization_expired", "capture_unauthorized_payment", "charge_already_captured", "charge_already_refunded", "charge_disputed", "charge_exceeds_source_limit", "charge_expired_for_capture", "charge_invalid_parameter", "charge_not_refundable", "clearing_code_unsupported", "country_code_invalid", "country_unsupported", "coupon_expired", "customer_max_payment_methods", "customer_max_subscriptions", "debit_not_authorized", "email_invalid", "expired_card", "idempotency_key_in_use", "incorrect_address", "incorrect_number", "insufficient_funds", "intent_invalid_state", "intent_verification_method_missing", "invalid_characters", "invalid_charge_amount", "invalid_source_usage", "invoice_no_customer_line_items", "invoice_no_payment_method_types", "invoice_no_subscription_line_items", "invoice_not_editable", "invoice_on_behalf_of_not_editable", "invoice_payment_intent_requires_action", "invoice_upcoming_none", "livemode_mismatch", "lock_timeout", "missing", "no_account", "parameter_invalid_empty", "parameter_invalid_integer", "parameter_invalid_string_blank", "parameter_invalid_string_empty", "parameter_missing", "parameter_unknown", "parameters_exclusive", "payment_intent_action_required", "payment_intent_authentication_failure", "payment_intent_incompatible_payment_method", "payment_intent_invalid_parameter", "payment_intent_mandate_invalid", "payment_intent_payment_attempt_expired", "payment_intent_payment_attempt_failed", "payment_intent_unexpected_state", "payment_method_billing_details_address_missing", "payment_method_configuration_failures", "payment_method_currency_mismatch", "payment_method_customer_decline", "payment_method_invalid_parameter", "payment_method_invalid_parameter_testmode", "payment_method_not_available", "payment_method_provider_decline", "payment_method_provider_timeout", "payment_method_unactivated", "payment_method_unexpected_state", "payment_method_unsupported_type", "payout_reconciliation_not_ready", "payouts_limit_exceeded", "payouts_not_allowed", "postal_code_invalid", "processing_error", "product_inactive", "progressive_onboarding_limit_exceeded", "rate_limit", "refer_to_customer", "refund_disputed_payment", "resource_already_exists", "resource_missing", "return_intent_already_processed", "routing_number_invalid", "secret_key_required", "setup_attempt_failed", "setup_intent_authentication_failure", "setup_intent_invalid_parameter", "setup_intent_mandate_invalid", "setup_intent_setup_attempt_expired", "setup_intent_unexpected_state", "shipping_calculation_failed", "sku_inactive", "status_transition_invalid", "tax_id_invalid", "taxes_calculation_failed", "testmode_charges_only", "tls_version_unsupported", "token_already_used", "token_in_use", "transfer_source_balance_parameters_mismatch", "transfers_not_allowed", "url_invalid"];
                                readonly description: "`account_closed` `account_information_mismatch` `account_invalid` `account_number_invalid` `amount_too_large` `amount_too_small` `api_key_expired` `authentication_required` `balance_insufficient` `account_bad_routing_numbers` `account_declined` `account_exists` `account_restricted` `account_unusable` `account_unverified` `billing_invalid_mandate` `capture_charge_authorization_expired` `capture_unauthorized_payment` `charge_already_captured` `charge_already_refunded` `charge_disputed` `charge_exceeds_source_limit` `charge_expired_for_capture` `charge_invalid_parameter` `charge_not_refundable` `clearing_code_unsupported` `country_code_invalid` `country_unsupported` `coupon_expired` `customer_max_payment_methods` `customer_max_subscriptions` `debit_not_authorized` `email_invalid` `expired_card` `idempotency_key_in_use` `incorrect_address` `incorrect_number` `insufficient_funds` `intent_invalid_state` `intent_verification_method_missing` `invalid_characters` `invalid_charge_amount` `invalid_source_usage` `invoice_no_customer_line_items` `invoice_no_payment_method_types` `invoice_no_subscription_line_items` `invoice_not_editable` `invoice_on_behalf_of_not_editable` `invoice_payment_intent_requires_action` `invoice_upcoming_none` `livemode_mismatch` `lock_timeout` `missing` `no_account` `parameter_invalid_empty` `parameter_invalid_integer` `parameter_invalid_string_blank` `parameter_invalid_string_empty` `parameter_missing` `parameter_unknown` `parameters_exclusive` `payment_intent_action_required` `payment_intent_authentication_failure` `payment_intent_incompatible_payment_method` `payment_intent_invalid_parameter` `payment_intent_mandate_invalid` `payment_intent_payment_attempt_expired` `payment_intent_payment_attempt_failed` `payment_intent_unexpected_state` `payment_method_billing_details_address_missing` `payment_method_configuration_failures` `payment_method_currency_mismatch` `payment_method_customer_decline` `payment_method_invalid_parameter` `payment_method_invalid_parameter_testmode` `payment_method_not_available` `payment_method_provider_decline` `payment_method_provider_timeout` `payment_method_unactivated` `payment_method_unexpected_state` `payment_method_unsupported_type` `payout_reconciliation_not_ready` `payouts_limit_exceeded` `payouts_not_allowed` `postal_code_invalid` `processing_error` `product_inactive` `progressive_onboarding_limit_exceeded` `rate_limit` `refer_to_customer` `refund_disputed_payment` `resource_already_exists` `resource_missing` `return_intent_already_processed` `routing_number_invalid` `secret_key_required` `setup_attempt_failed` `setup_intent_authentication_failure` `setup_intent_invalid_parameter` `setup_intent_mandate_invalid` `setup_intent_setup_attempt_expired` `setup_intent_unexpected_state` `shipping_calculation_failed` `sku_inactive` `status_transition_invalid` `tax_id_invalid` `taxes_calculation_failed` `testmode_charges_only` `tls_version_unsupported` `token_already_used` `token_in_use` `transfer_source_balance_parameters_mismatch` `transfers_not_allowed` `url_invalid`";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["api_error", "card_error", "idempotency_error", "invalid_request_error", "chain_error", "unknown"];
                                readonly description: "`api_error` `card_error` `idempotency_error` `invalid_request_error` `chain_error` `unknown`";
                            };
                            readonly declineCode: {
                                readonly type: "string";
                            };
                            readonly paymentIntentId: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                            };
                            readonly paymentMethodType: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                            readonly docUrl: {
                                readonly type: "string";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"];
                                readonly description: "`requires_payment_method` `requires_confirmation` `requires_action` `processing` `requires_capture` `canceled` `succeeded`";
                            };
                        };
                        readonly required: readonly ["id", "type", "status"];
                    };
                };
                readonly taxRateIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
            };
            readonly required: readonly ["id", "organizationId", "customerId", "customer", "autoAdvance", "collectionMethod", "paymentSettingId", "paymentSetting", "status", "attempted", "paid", "lineItems", "url", "billingReason"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const InvoiceControllerGetAll: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number. Starts from 1";
                };
                readonly limit: {
                    readonly type: "number";
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of items per page";
                };
                readonly createdAt: {
                    readonly type: "object";
                    readonly properties: {
                        readonly isnull: {
                            readonly type: "boolean";
                            readonly description: "Returns null values";
                        };
                        readonly notnull: {
                            readonly type: "boolean";
                            readonly description: "Returns not null values";
                        };
                        readonly gt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than the given date";
                            readonly examples: readonly ["2020-01-01"];
                        };
                        readonly gte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than or equal to the given date";
                        };
                        readonly lt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than the given date";
                        };
                        readonly lte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than or equal to the given date";
                        };
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by created date";
                };
                readonly ids: {
                    readonly type: "string";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0", "c3611c05-df51-4b47-b601-f2eac02f4ef2"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by id. Returns items with given ids";
                };
                readonly status: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly subscriptionId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly dueDate: {
                    readonly type: "object";
                    readonly properties: {
                        readonly isnull: {
                            readonly type: "boolean";
                            readonly description: "Returns null values";
                        };
                        readonly notnull: {
                            readonly type: "boolean";
                            readonly description: "Returns not null values";
                        };
                        readonly gt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than the given date";
                        };
                        readonly gte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than or equal to the given date";
                        };
                        readonly lt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than the given date";
                        };
                        readonly lte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than or equal to the given date";
                        };
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly includes: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["page", "limit", "count", "hasMore", "data"];
            readonly properties: {
                readonly page: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly description: "Page number. Starts from 1";
                    readonly examples: readonly [1];
                };
                readonly limit: {
                    readonly type: "number";
                    readonly default: 200;
                    readonly description: "Number of items per page";
                    readonly examples: readonly [10];
                };
                readonly count: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly hasMore: {
                    readonly type: "boolean";
                };
                readonly query: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly default: 1;
                            readonly description: "Page number. Starts from 1";
                            readonly examples: readonly [1];
                        };
                        readonly limit: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly maximum: 200;
                            readonly default: 200;
                            readonly description: "Number of items per page";
                            readonly examples: readonly [10];
                        };
                        readonly createdAt: {
                            readonly description: "Filter by created date";
                            readonly type: "object";
                            readonly properties: {
                                readonly isnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns null values";
                                };
                                readonly notnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns not null values";
                                };
                                readonly gt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than the given date";
                                    readonly examples: readonly ["2020-01-01"];
                                };
                                readonly gte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than or equal to the given date";
                                };
                                readonly lt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than the given date";
                                };
                                readonly lte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than or equal to the given date";
                                };
                            };
                        };
                    };
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["id", "organizationId", "customerId", "customer", "autoAdvance", "collectionMethod", "paymentSettingId", "paymentSetting", "status", "attempted", "paid", "lineItems", "url", "billingReason"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly organizationId: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                            };
                            readonly description: {
                                readonly type: "string";
                            };
                            readonly total: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly examples: readonly ["9223372036854775807"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                            readonly subTotal: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly examples: readonly ["9223372036854775807"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                            };
                            readonly customerId: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                            };
                            readonly customer: {
                                readonly type: "object";
                                readonly required: readonly ["id", "customerNumber"];
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "The name";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                        readonly description: "The email";
                                    };
                                    readonly phone: {
                                        readonly type: "string";
                                        readonly description: "The phone";
                                    };
                                    readonly organizationName: {
                                        readonly type: "string";
                                        readonly description: "The organization name";
                                    };
                                    readonly address: {
                                        readonly description: "The address";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly line1: {
                                                readonly type: "string";
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                            };
                                            readonly city: {
                                                readonly type: "string";
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                            };
                                            readonly postalCode: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "Customer's id";
                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                        readonly description: "Customer's created at";
                                    };
                                    readonly updatedAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                        readonly description: "Customer's updated at";
                                    };
                                    readonly customerReferenceId: {
                                        readonly type: "string";
                                        readonly description: "Customer's reference id";
                                    };
                                    readonly shipping: {
                                        readonly description: "Customer's shipping address";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly name: {
                                                readonly type: "string";
                                                readonly description: "The name";
                                            };
                                            readonly email: {
                                                readonly type: "string";
                                                readonly description: "The email";
                                            };
                                            readonly phone: {
                                                readonly type: "string";
                                                readonly description: "The phone";
                                            };
                                            readonly organizationName: {
                                                readonly type: "string";
                                                readonly description: "The organization name";
                                            };
                                            readonly address: {
                                                readonly description: "The address";
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly line1: {
                                                        readonly type: "string";
                                                    };
                                                    readonly line2: {
                                                        readonly type: "string";
                                                    };
                                                    readonly city: {
                                                        readonly type: "string";
                                                    };
                                                    readonly state: {
                                                        readonly type: "string";
                                                    };
                                                    readonly postalCode: {
                                                        readonly type: "string";
                                                    };
                                                    readonly country: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly taxIds: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly object: {
                                                readonly type: "string";
                                            };
                                            readonly data: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["id", "customerId"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                        };
                                                        readonly createdAt: {
                                                            readonly format: "date-time";
                                                            readonly type: "string";
                                                        };
                                                        readonly updatedAt: {
                                                            readonly format: "date-time";
                                                            readonly type: "string";
                                                        };
                                                        readonly name: {
                                                            readonly type: "string";
                                                        };
                                                        readonly value: {
                                                            readonly type: "string";
                                                        };
                                                        readonly country: {
                                                            readonly type: "string";
                                                        };
                                                        readonly customerId: {
                                                            readonly type: "string";
                                                            readonly format: "uuid";
                                                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly visibility: {
                                        readonly description: "Customer's visibility. If Dashboard then displayed on dashboard UI. If API then only returned in API response only.\n\n`10` `20`";
                                        readonly type: "string";
                                        readonly enum: readonly [10, 20];
                                    };
                                    readonly metadata: {
                                        readonly type: "object";
                                        readonly description: "Customer's metadata";
                                        readonly additionalProperties: true;
                                    };
                                    readonly customerNumber: {
                                        readonly type: "string";
                                        readonly description: "Customer number assigned by the system";
                                    };
                                };
                            };
                            readonly autoAdvance: {
                                readonly type: "boolean";
                            };
                            readonly collectionMethod: {
                                readonly type: "string";
                                readonly enum: readonly ["charge_automatically", "send_invoice"];
                                readonly description: "`charge_automatically` `send_invoice`";
                            };
                            readonly invoiceType: {
                                readonly type: "string";
                                readonly enum: readonly ["one_time", "recurring"];
                                readonly description: "`one_time` `recurring`";
                            };
                            readonly customFields: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly fields: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["name", "value"];
                                            readonly properties: {
                                                readonly name: {
                                                    readonly type: "string";
                                                };
                                                readonly value: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            readonly paymentSettingId: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                            };
                            readonly paymentSetting: {
                                readonly type: "object";
                                readonly required: readonly ["id", "feePercentage"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly updatedAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly paymentMethodTypes: {
                                        readonly type: "array";
                                        readonly description: "A list of the types of payment methods";
                                        readonly minItems: 1;
                                        readonly maxItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                            readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                            readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                                        };
                                        readonly examples: readonly ["wallet"];
                                    };
                                    readonly allowedChains: {
                                        readonly description: "The list of chains allowed for the payment. If not provided, all chains supported by the organization are enabled.";
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["chainId"];
                                            readonly properties: {
                                                readonly chainId: {
                                                    readonly type: "number";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly blacklistCurrencies: {
                                                    readonly type: "array";
                                                    readonly description: "The list of currencies to disable for the payment. Note: This field is only used for checkout session API atm.";
                                                    readonly items: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                                    };
                                                    readonly examples: readonly ["usdc"];
                                                };
                                                readonly withdrawalAddress: {
                                                    readonly type: "string";
                                                    readonly description: "This is optional, default withdrawal address configured in dashboard under settings > payment methods is used. The custom withdrawal address to use for this chain instead of stored default withdrawal address.";
                                                };
                                                readonly withdrawalAddresses: {
                                                    readonly description: "The list of withdrawal addresses to split the payment. If provided, the sum of all split percentages should be 100.";
                                                    readonly minItems: 2;
                                                    readonly maxItems: 4;
                                                    readonly type: "array";
                                                    readonly items: {
                                                        readonly type: "object";
                                                        readonly required: readonly ["splitPercentage", "address"];
                                                        readonly properties: {
                                                            readonly splitPercentage: {
                                                                readonly type: "number";
                                                                readonly minimum: 0;
                                                                readonly maximum: 100;
                                                                readonly examples: readonly [1];
                                                            };
                                                            readonly address: {
                                                                readonly type: "string";
                                                                readonly description: "The withdrawal address for the split percentage";
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly allowedCurrencies: {
                                        readonly type: "array";
                                        readonly description: "The list of currencies allowed for the payment.";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                        };
                                        readonly examples: readonly ["usdc", "usdt"];
                                    };
                                    readonly preferredChainId: {
                                        readonly type: "number";
                                        readonly description: "The preferred chain's id";
                                        readonly examples: readonly [1];
                                    };
                                    readonly preferredCurrency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                        readonly description: "The preferred currency for payment\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                    };
                                    readonly allowSwap: {
                                        readonly type: "boolean";
                                        readonly description: "Whether the user can swap the payment currency";
                                        readonly default: false;
                                    };
                                    readonly applyFee: {
                                        readonly type: "boolean";
                                        readonly description: "Whether add a application fee to the user payment";
                                        readonly default: false;
                                    };
                                    readonly feePercentage: {
                                        readonly type: "number";
                                        readonly minimum: 0;
                                        readonly maximum: 100;
                                        readonly description: "Percent that will be added to subtotal as a fee";
                                        readonly examples: readonly [1];
                                    };
                                    readonly applyGasFee: {
                                        readonly type: "boolean";
                                        readonly description: "Whether add a transaction fee to the user payment";
                                        readonly default: false;
                                    };
                                    readonly allowSplitPayments: {
                                        readonly type: "boolean";
                                        readonly description: "Whether the user can split the payment";
                                    };
                                    readonly slippagePercentage: {
                                        readonly type: "number";
                                        readonly minimum: 0;
                                        readonly maximum: 100;
                                        readonly description: "The slippage percentage allowed for swaps and withdrawals";
                                        readonly default: 10;
                                        readonly examples: readonly [1];
                                    };
                                };
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["draft", "open", "paid", "void", "uncollectible"];
                                readonly description: "`draft` `open` `paid` `void` `uncollectible`";
                            };
                            readonly attempted: {
                                readonly type: "boolean";
                            };
                            readonly attemptCount: {
                                readonly type: "number";
                                readonly examples: readonly [1];
                            };
                            readonly nextPaymentAttempt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly dueDate: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly footer: {
                                readonly type: "string";
                            };
                            readonly fromInvoiceId: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                            };
                            readonly latestRevisionId: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                            };
                            readonly invoicePdfUrl: {
                                readonly type: "string";
                            };
                            readonly invoiceNumber: {
                                readonly type: "string";
                            };
                            readonly paid: {
                                readonly type: "boolean";
                            };
                            readonly paidOutOfBand: {
                                readonly type: "boolean";
                            };
                            readonly metadata: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                            };
                            readonly clientReferenceId: {
                                readonly type: "string";
                            };
                            readonly lineItems: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly object: {
                                        readonly type: "string";
                                    };
                                    readonly data: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["price"];
                                            readonly properties: {
                                                readonly description: {
                                                    readonly type: "string";
                                                };
                                                readonly periodStart: {
                                                    readonly format: "date-time";
                                                    readonly type: "string";
                                                };
                                                readonly periodEnd: {
                                                    readonly format: "date-time";
                                                    readonly type: "string";
                                                };
                                                readonly quantity: {
                                                    readonly type: "number";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly price: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["id", "currency", "productId", "type", "product"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                        };
                                                        readonly createdAt: {
                                                            readonly format: "date-time";
                                                            readonly type: "string";
                                                        };
                                                        readonly updatedAt: {
                                                            readonly format: "date-time";
                                                            readonly type: "string";
                                                        };
                                                        readonly billingScheme: {
                                                            readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                                                            readonly type: "string";
                                                            readonly enum: readonly ["per_unit"];
                                                        };
                                                        readonly currency: {
                                                            readonly type: "string";
                                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                                            readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                                        };
                                                        readonly productId: {
                                                            readonly type: "string";
                                                            readonly format: "uuid";
                                                            readonly description: "Product's id";
                                                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                        };
                                                        readonly interval: {
                                                            readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                                                            readonly type: "string";
                                                            readonly enum: readonly ["day", "week", "month", "year"];
                                                        };
                                                        readonly intervalCount: {
                                                            readonly type: "number";
                                                            readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                                                            readonly examples: readonly [1];
                                                        };
                                                        readonly isActive: {
                                                            readonly type: "boolean";
                                                            readonly description: "Whether the price is currently active";
                                                        };
                                                        readonly usageType: {
                                                            readonly description: "The usage type of the price.\n\n`licensed`";
                                                            readonly type: "string";
                                                            readonly enum: readonly ["licensed"];
                                                        };
                                                        readonly type: {
                                                            readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                                                            readonly type: "string";
                                                            readonly enum: readonly ["one_time", "recurring", "streaming"];
                                                        };
                                                        readonly unitAmount: {
                                                            readonly format: "int64";
                                                            readonly type: "integer";
                                                            readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                                                            readonly examples: readonly ["9223372036854775807"];
                                                            readonly minimum: -9223372036854776000;
                                                            readonly maximum: 9223372036854776000;
                                                        };
                                                        readonly unitAmountDecimal: {
                                                            readonly type: "string";
                                                        };
                                                        readonly customUnitMax: {
                                                            readonly format: "int64";
                                                            readonly type: "integer";
                                                            readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                            readonly examples: readonly ["9223372036854775807"];
                                                            readonly minimum: -9223372036854776000;
                                                            readonly maximum: 9223372036854776000;
                                                        };
                                                        readonly customUnitMin: {
                                                            readonly format: "int64";
                                                            readonly type: "integer";
                                                            readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                            readonly examples: readonly ["9223372036854775807"];
                                                            readonly minimum: -9223372036854776000;
                                                            readonly maximum: 9223372036854776000;
                                                        };
                                                        readonly customPreset: {
                                                            readonly format: "int64";
                                                            readonly type: "integer";
                                                            readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                                                            readonly examples: readonly ["9223372036854775807"];
                                                            readonly minimum: -9223372036854776000;
                                                            readonly maximum: 9223372036854776000;
                                                        };
                                                        readonly customUnitAmountSuggestions: {
                                                            readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                                                            readonly type: "array";
                                                            readonly items: {
                                                                readonly type: "string";
                                                            };
                                                        };
                                                        readonly product: {
                                                            readonly description: "The product this price belongs to";
                                                            readonly type: "object";
                                                            readonly required: readonly ["id", "name"];
                                                            readonly properties: {
                                                                readonly id: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly createdAt: {
                                                                    readonly format: "date-time";
                                                                    readonly type: "string";
                                                                };
                                                                readonly updatedAt: {
                                                                    readonly format: "date-time";
                                                                    readonly type: "string";
                                                                };
                                                                readonly name: {
                                                                    readonly type: "string";
                                                                    readonly description: "The name of the product. Displayed on the checkout page";
                                                                };
                                                                readonly description: {
                                                                    readonly type: "string";
                                                                    readonly description: "The description of the product. Displayed on the checkout page";
                                                                };
                                                                readonly isActive: {
                                                                    readonly type: "boolean";
                                                                    readonly description: "Whether the product is currently active";
                                                                };
                                                                readonly images: {
                                                                    readonly maxItems: 8;
                                                                    readonly description: "The url of product images. Displayed on the checkout page";
                                                                    readonly type: "array";
                                                                    readonly items: {
                                                                        readonly type: "string";
                                                                    };
                                                                };
                                                                readonly publicImages: {
                                                                    readonly description: "Product images with absolute public url";
                                                                    readonly type: "array";
                                                                    readonly items: {
                                                                        readonly type: "string";
                                                                    };
                                                                };
                                                                readonly unitLabel: {
                                                                    readonly type: "string";
                                                                    readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                                                };
                                                                readonly url: {
                                                                    readonly type: "string";
                                                                    readonly description: "The url of the product";
                                                                };
                                                                readonly defaultPriceId: {
                                                                    readonly type: "string";
                                                                    readonly format: "uuid";
                                                                    readonly description: "Product's default price id";
                                                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                                };
                                                                readonly metadata: {
                                                                    readonly type: "object";
                                                                    readonly description: "The metadata of the product";
                                                                    readonly additionalProperties: true;
                                                                };
                                                                readonly visibility: {
                                                                    readonly description: "The visibility of the product\n\n`10` `20`";
                                                                    readonly type: "string";
                                                                    readonly enum: readonly [10, 20];
                                                                };
                                                            };
                                                        };
                                                        readonly metadata: {
                                                            readonly type: "object";
                                                            readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                                            readonly additionalProperties: true;
                                                        };
                                                        readonly visibility: {
                                                            readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                                                            readonly type: "string";
                                                            readonly enum: readonly [10, 20];
                                                        };
                                                    };
                                                };
                                                readonly taxRates: {
                                                    readonly type: "array";
                                                    readonly items: {
                                                        readonly type: "object";
                                                        readonly required: readonly ["id", "name", "percentage", "type", "isDefault"];
                                                        readonly properties: {
                                                            readonly id: {
                                                                readonly type: "string";
                                                            };
                                                            readonly name: {
                                                                readonly type: "string";
                                                                readonly description: "The name of the tax rate.";
                                                            };
                                                            readonly description: {
                                                                readonly type: "string";
                                                                readonly description: "The description of the tax rate.";
                                                            };
                                                            readonly country: {
                                                                readonly type: "string";
                                                                readonly description: "The country of the tax rate.";
                                                            };
                                                            readonly percentage: {
                                                                readonly type: "number";
                                                                readonly minimum: 0;
                                                                readonly maximum: 100;
                                                                readonly description: "Percent that will be added to subtotal as a tax.";
                                                                readonly examples: readonly [1];
                                                            };
                                                            readonly type: {
                                                                readonly description: "The type of the tax rate.\n\n`exclusive` `inclusive`";
                                                                readonly type: "string";
                                                                readonly enum: readonly ["exclusive", "inclusive"];
                                                            };
                                                            readonly isDefault: {
                                                                readonly type: "boolean";
                                                            };
                                                        };
                                                    };
                                                };
                                                readonly amountTotal: {
                                                    readonly format: "int64";
                                                    readonly type: "integer";
                                                    readonly examples: readonly ["9223372036854775807"];
                                                    readonly minimum: -9223372036854776000;
                                                    readonly maximum: 9223372036854776000;
                                                };
                                                readonly amountSubtotal: {
                                                    readonly format: "int64";
                                                    readonly type: "integer";
                                                    readonly examples: readonly ["9223372036854775807"];
                                                    readonly minimum: -9223372036854776000;
                                                    readonly maximum: 9223372036854776000;
                                                };
                                                readonly amountTax: {
                                                    readonly format: "int64";
                                                    readonly type: "integer";
                                                    readonly examples: readonly ["9223372036854775807"];
                                                    readonly minimum: -9223372036854776000;
                                                    readonly maximum: 9223372036854776000;
                                                };
                                                readonly currency: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                    readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            readonly finalizedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly paidAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly markedUncollectibleAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly visibility: {
                                readonly type: "string";
                                readonly enum: readonly [10, 20];
                                readonly description: "`10` `20`";
                            };
                            readonly paymentIntentId: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                            };
                            readonly url: {
                                readonly type: "string";
                                readonly description: "The URL to redirect the customer to pay invoice";
                            };
                            readonly subscriptionId: {
                                readonly type: "string";
                            };
                            readonly periodStart: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly periodEnd: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly billingReason: {
                                readonly type: "string";
                                readonly enum: readonly ["subscription_cycle", "subscription_create", "subscription_update", "subscription", "manual", "upcoming", "subscription_threshold"];
                                readonly description: "`subscription_cycle` `subscription_create` `subscription_update` `subscription` `manual` `upcoming` `subscription_threshold`";
                            };
                            readonly allowPromotionCodes: {
                                readonly type: "boolean";
                                readonly description: "Enables user redeemable promotion codes.";
                            };
                            readonly finalizeScheduleAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "The date on which invoice will be finalize and send";
                            };
                            readonly totalTax: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly examples: readonly ["9223372036854775807"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                            readonly paymentIntent: {
                                readonly type: "object";
                                readonly required: readonly ["id", "organizationId", "status", "paymentMethodId", "transactions"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly updatedAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly organizationId: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                    };
                                    readonly amount: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountReceived: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                    readonly status: {
                                        readonly type: "string";
                                        readonly enum: readonly ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"];
                                        readonly description: "`requires_payment_method` `requires_confirmation` `requires_action` `processing` `requires_capture` `canceled` `succeeded`";
                                    };
                                    readonly paymentMethodId: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                    };
                                    readonly description: {
                                        readonly type: "string";
                                    };
                                    readonly paymentMethod: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "assetId", "asset", "type"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly assetId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                            readonly asset: {
                                                readonly type: "object";
                                                readonly required: readonly ["id", "name", "chainId", "address", "currency", "symbol", "decimals", "isEIP5827Supported"];
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                        readonly description: "Asset id";
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "Asset name";
                                                    };
                                                    readonly chainId: {
                                                        readonly type: "number";
                                                        readonly description: "Asset chain id";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly address: {
                                                        readonly type: "string";
                                                        readonly description: "Asset address on chain";
                                                    };
                                                    readonly currency: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                        readonly description: "Asset currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                                    };
                                                    readonly symbol: {
                                                        readonly type: "string";
                                                        readonly description: "Asset symbol";
                                                    };
                                                    readonly decimals: {
                                                        readonly type: "number";
                                                        readonly description: "Asset decimals in which it is represented on chain";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly coingeckoId: {
                                                        readonly type: "string";
                                                        readonly description: "Asset coingecko id";
                                                    };
                                                    readonly superToken: {
                                                        readonly description: "SuperToken data";
                                                        readonly type: "object";
                                                        readonly required: readonly ["address", "decimals", "symbol"];
                                                        readonly properties: {
                                                            readonly address: {
                                                                readonly type: "string";
                                                                readonly description: "SuperToken's address";
                                                            };
                                                            readonly decimals: {
                                                                readonly type: "number";
                                                                readonly examples: readonly [1];
                                                            };
                                                            readonly symbol: {
                                                                readonly type: "string";
                                                                readonly description: "SuperToken's symbol";
                                                            };
                                                        };
                                                    };
                                                    readonly isEIP5827Supported: {
                                                        readonly type: "boolean";
                                                        readonly description: "Is EIP5827 supported";
                                                    };
                                                };
                                            };
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                                            };
                                            readonly accountAddress: {
                                                readonly type: "string";
                                            };
                                            readonly billingDetails: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "The name";
                                                    };
                                                    readonly email: {
                                                        readonly type: "string";
                                                        readonly description: "The email";
                                                    };
                                                    readonly phone: {
                                                        readonly type: "string";
                                                        readonly description: "The phone";
                                                    };
                                                    readonly organizationName: {
                                                        readonly type: "string";
                                                        readonly description: "The organization name";
                                                    };
                                                    readonly address: {
                                                        readonly description: "The address";
                                                        readonly type: "object";
                                                        readonly properties: {
                                                            readonly line1: {
                                                                readonly type: "string";
                                                            };
                                                            readonly line2: {
                                                                readonly type: "string";
                                                            };
                                                            readonly city: {
                                                                readonly type: "string";
                                                            };
                                                            readonly state: {
                                                                readonly type: "string";
                                                            };
                                                            readonly postalCode: {
                                                                readonly type: "string";
                                                            };
                                                            readonly country: {
                                                                readonly type: "string";
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                            readonly customerId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                            readonly options: {
                                                readonly type: "object";
                                                readonly additionalProperties: true;
                                            };
                                        };
                                    };
                                    readonly paymentMethodTypes: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                            readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                                        };
                                    };
                                    readonly transferAccountAddress: {
                                        readonly type: "string";
                                    };
                                    readonly transactions: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["type", "fromAddress", "toAddress", "currency", "amountRaw", "assetId", "asset"];
                                            readonly properties: {
                                                readonly type: {
                                                    readonly description: "Transaction type\n\n`incoming` `outgoing` `event` `transfer`";
                                                    readonly type: "string";
                                                    readonly enum: readonly ["incoming", "outgoing", "event", "transfer"];
                                                };
                                                readonly transactionRelayId: {
                                                    readonly type: "string";
                                                    readonly description: "Transaction relay id";
                                                };
                                                readonly transactionHash: {
                                                    readonly type: "string";
                                                    readonly description: "Transaction hash";
                                                };
                                                readonly nonce: {
                                                    readonly type: "number";
                                                    readonly description: "Transaction nonce";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly gasLimit: {
                                                    readonly type: "number";
                                                    readonly description: "Transaction gas limit used in payment";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly validUntil: {
                                                    readonly type: "string";
                                                    readonly description: "Transaction valid until";
                                                };
                                                readonly fromAddress: {
                                                    readonly type: "string";
                                                    readonly description: "Transaction from address";
                                                };
                                                readonly toAddress: {
                                                    readonly type: "string";
                                                    readonly description: "Transaction to address";
                                                };
                                                readonly currency: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                    readonly description: "Transaction currency\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                                };
                                                readonly createdAt: {
                                                    readonly format: "date-time";
                                                    readonly type: "string";
                                                    readonly description: "Transaction created at";
                                                };
                                                readonly amount: {
                                                    readonly format: "int64";
                                                    readonly type: "integer";
                                                    readonly description: "Transaction amount in 8 decimals";
                                                    readonly examples: readonly ["9223372036854775807"];
                                                    readonly minimum: -9223372036854776000;
                                                    readonly maximum: 9223372036854776000;
                                                };
                                                readonly amountRaw: {
                                                    readonly type: "string";
                                                    readonly description: "Transaction amount raw received from alchemy";
                                                };
                                                readonly assetId: {
                                                    readonly type: "string";
                                                    readonly description: "Transaction asset id";
                                                };
                                                readonly asset: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["id", "name", "address", "chainId", "currency", "symbol", "decimals", "isPublic", "chain"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                        };
                                                        readonly name: {
                                                            readonly type: "string";
                                                        };
                                                        readonly address: {
                                                            readonly type: "string";
                                                        };
                                                        readonly chainId: {
                                                            readonly type: "number";
                                                            readonly examples: readonly [1];
                                                        };
                                                        readonly currency: {
                                                            readonly type: "string";
                                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                                        };
                                                        readonly symbol: {
                                                            readonly type: "string";
                                                        };
                                                        readonly decimals: {
                                                            readonly type: "number";
                                                            readonly examples: readonly [1];
                                                        };
                                                        readonly coingeckoId: {
                                                            readonly type: "string";
                                                        };
                                                        readonly isPublic: {
                                                            readonly type: "boolean";
                                                        };
                                                        readonly superToken: {
                                                            readonly type: "object";
                                                            readonly required: readonly ["address", "decimals", "symbol"];
                                                            readonly properties: {
                                                                readonly address: {
                                                                    readonly type: "string";
                                                                    readonly description: "SuperToken's address";
                                                                };
                                                                readonly decimals: {
                                                                    readonly type: "number";
                                                                    readonly examples: readonly [1];
                                                                };
                                                                readonly symbol: {
                                                                    readonly type: "string";
                                                                    readonly description: "SuperToken's symbol";
                                                                };
                                                            };
                                                        };
                                                        readonly chain: {
                                                            readonly type: "object";
                                                            readonly required: readonly ["id", "name", "icon", "currency", "blockExplorerTransactionUrl", "blockExplorerName", "type", "isBeta"];
                                                            readonly properties: {
                                                                readonly id: {
                                                                    readonly type: "number";
                                                                    readonly description: "Chain id";
                                                                    readonly examples: readonly [1];
                                                                };
                                                                readonly name: {
                                                                    readonly type: "string";
                                                                    readonly description: "Chain name";
                                                                };
                                                                readonly icon: {
                                                                    readonly type: "string";
                                                                    readonly description: "Chain icon";
                                                                };
                                                                readonly currency: {
                                                                    readonly type: "string";
                                                                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                                    readonly description: "Chain currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                                                };
                                                                readonly blockExplorerTransactionUrl: {
                                                                    readonly type: "string";
                                                                    readonly description: "Chain block explorer transaction url";
                                                                };
                                                                readonly blockExplorerName: {
                                                                    readonly type: "string";
                                                                    readonly description: "Chain block explorer name";
                                                                };
                                                                readonly type: {
                                                                    readonly description: "Chain type\n\n`evm` `solana` `tron` `stripe` `binance_pay`";
                                                                    readonly type: "string";
                                                                    readonly enum: readonly ["evm", "solana", "tron", "stripe", "binance_pay"];
                                                                };
                                                                readonly isBeta: {
                                                                    readonly type: "boolean";
                                                                    readonly description: "Is beta asset";
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                                readonly transactionUrl: {
                                                    readonly type: "string";
                                                    readonly description: "Transaction url";
                                                };
                                            };
                                        };
                                    };
                                    readonly paymentReceipt: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "organizationId", "paymentIntentId", "receiptNumber"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly organizationId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                            readonly paymentIntentId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly receiptNumber: {
                                                readonly type: "string";
                                            };
                                            readonly uri: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly canceledAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly cancellationReason: {
                                        readonly type: "string";
                                    };
                                    readonly stripe: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly paymentIntentId: {
                                                readonly type: "string";
                                            };
                                            readonly receiptUrl: {
                                                readonly type: "string";
                                            };
                                            readonly cardLast4: {
                                                readonly type: "string";
                                            };
                                            readonly displayName: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly isMarkRefunded: {
                                        readonly type: "boolean";
                                    };
                                    readonly markRefundedAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly markRefundedComment: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly paymentIntentAttempt: {
                                readonly description: "The payment intent associated with the session. Payment intent is created when the session is created.";
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly required: readonly ["id", "type", "status"];
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                        };
                                        readonly createdAt: {
                                            readonly format: "date-time";
                                            readonly type: "string";
                                        };
                                        readonly updatedAt: {
                                            readonly format: "date-time";
                                            readonly type: "string";
                                        };
                                        readonly errorCode: {
                                            readonly type: "string";
                                            readonly enum: readonly ["account_closed", "account_information_mismatch", "account_invalid", "account_number_invalid", "amount_too_large", "amount_too_small", "api_key_expired", "authentication_required", "balance_insufficient", "account_bad_routing_numbers", "account_declined", "account_exists", "account_restricted", "account_unusable", "account_unverified", "billing_invalid_mandate", "capture_charge_authorization_expired", "capture_unauthorized_payment", "charge_already_captured", "charge_already_refunded", "charge_disputed", "charge_exceeds_source_limit", "charge_expired_for_capture", "charge_invalid_parameter", "charge_not_refundable", "clearing_code_unsupported", "country_code_invalid", "country_unsupported", "coupon_expired", "customer_max_payment_methods", "customer_max_subscriptions", "debit_not_authorized", "email_invalid", "expired_card", "idempotency_key_in_use", "incorrect_address", "incorrect_number", "insufficient_funds", "intent_invalid_state", "intent_verification_method_missing", "invalid_characters", "invalid_charge_amount", "invalid_source_usage", "invoice_no_customer_line_items", "invoice_no_payment_method_types", "invoice_no_subscription_line_items", "invoice_not_editable", "invoice_on_behalf_of_not_editable", "invoice_payment_intent_requires_action", "invoice_upcoming_none", "livemode_mismatch", "lock_timeout", "missing", "no_account", "parameter_invalid_empty", "parameter_invalid_integer", "parameter_invalid_string_blank", "parameter_invalid_string_empty", "parameter_missing", "parameter_unknown", "parameters_exclusive", "payment_intent_action_required", "payment_intent_authentication_failure", "payment_intent_incompatible_payment_method", "payment_intent_invalid_parameter", "payment_intent_mandate_invalid", "payment_intent_payment_attempt_expired", "payment_intent_payment_attempt_failed", "payment_intent_unexpected_state", "payment_method_billing_details_address_missing", "payment_method_configuration_failures", "payment_method_currency_mismatch", "payment_method_customer_decline", "payment_method_invalid_parameter", "payment_method_invalid_parameter_testmode", "payment_method_not_available", "payment_method_provider_decline", "payment_method_provider_timeout", "payment_method_unactivated", "payment_method_unexpected_state", "payment_method_unsupported_type", "payout_reconciliation_not_ready", "payouts_limit_exceeded", "payouts_not_allowed", "postal_code_invalid", "processing_error", "product_inactive", "progressive_onboarding_limit_exceeded", "rate_limit", "refer_to_customer", "refund_disputed_payment", "resource_already_exists", "resource_missing", "return_intent_already_processed", "routing_number_invalid", "secret_key_required", "setup_attempt_failed", "setup_intent_authentication_failure", "setup_intent_invalid_parameter", "setup_intent_mandate_invalid", "setup_intent_setup_attempt_expired", "setup_intent_unexpected_state", "shipping_calculation_failed", "sku_inactive", "status_transition_invalid", "tax_id_invalid", "taxes_calculation_failed", "testmode_charges_only", "tls_version_unsupported", "token_already_used", "token_in_use", "transfer_source_balance_parameters_mismatch", "transfers_not_allowed", "url_invalid"];
                                            readonly description: "`account_closed` `account_information_mismatch` `account_invalid` `account_number_invalid` `amount_too_large` `amount_too_small` `api_key_expired` `authentication_required` `balance_insufficient` `account_bad_routing_numbers` `account_declined` `account_exists` `account_restricted` `account_unusable` `account_unverified` `billing_invalid_mandate` `capture_charge_authorization_expired` `capture_unauthorized_payment` `charge_already_captured` `charge_already_refunded` `charge_disputed` `charge_exceeds_source_limit` `charge_expired_for_capture` `charge_invalid_parameter` `charge_not_refundable` `clearing_code_unsupported` `country_code_invalid` `country_unsupported` `coupon_expired` `customer_max_payment_methods` `customer_max_subscriptions` `debit_not_authorized` `email_invalid` `expired_card` `idempotency_key_in_use` `incorrect_address` `incorrect_number` `insufficient_funds` `intent_invalid_state` `intent_verification_method_missing` `invalid_characters` `invalid_charge_amount` `invalid_source_usage` `invoice_no_customer_line_items` `invoice_no_payment_method_types` `invoice_no_subscription_line_items` `invoice_not_editable` `invoice_on_behalf_of_not_editable` `invoice_payment_intent_requires_action` `invoice_upcoming_none` `livemode_mismatch` `lock_timeout` `missing` `no_account` `parameter_invalid_empty` `parameter_invalid_integer` `parameter_invalid_string_blank` `parameter_invalid_string_empty` `parameter_missing` `parameter_unknown` `parameters_exclusive` `payment_intent_action_required` `payment_intent_authentication_failure` `payment_intent_incompatible_payment_method` `payment_intent_invalid_parameter` `payment_intent_mandate_invalid` `payment_intent_payment_attempt_expired` `payment_intent_payment_attempt_failed` `payment_intent_unexpected_state` `payment_method_billing_details_address_missing` `payment_method_configuration_failures` `payment_method_currency_mismatch` `payment_method_customer_decline` `payment_method_invalid_parameter` `payment_method_invalid_parameter_testmode` `payment_method_not_available` `payment_method_provider_decline` `payment_method_provider_timeout` `payment_method_unactivated` `payment_method_unexpected_state` `payment_method_unsupported_type` `payout_reconciliation_not_ready` `payouts_limit_exceeded` `payouts_not_allowed` `postal_code_invalid` `processing_error` `product_inactive` `progressive_onboarding_limit_exceeded` `rate_limit` `refer_to_customer` `refund_disputed_payment` `resource_already_exists` `resource_missing` `return_intent_already_processed` `routing_number_invalid` `secret_key_required` `setup_attempt_failed` `setup_intent_authentication_failure` `setup_intent_invalid_parameter` `setup_intent_mandate_invalid` `setup_intent_setup_attempt_expired` `setup_intent_unexpected_state` `shipping_calculation_failed` `sku_inactive` `status_transition_invalid` `tax_id_invalid` `taxes_calculation_failed` `testmode_charges_only` `tls_version_unsupported` `token_already_used` `token_in_use` `transfer_source_balance_parameters_mismatch` `transfers_not_allowed` `url_invalid`";
                                        };
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["api_error", "card_error", "idempotency_error", "invalid_request_error", "chain_error", "unknown"];
                                            readonly description: "`api_error` `card_error` `idempotency_error` `invalid_request_error` `chain_error` `unknown`";
                                        };
                                        readonly declineCode: {
                                            readonly type: "string";
                                        };
                                        readonly paymentIntentId: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                        };
                                        readonly paymentMethodType: {
                                            readonly type: "string";
                                            readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                            readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                                        };
                                        readonly docUrl: {
                                            readonly type: "string";
                                        };
                                        readonly status: {
                                            readonly type: "string";
                                            readonly enum: readonly ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"];
                                            readonly description: "`requires_payment_method` `requires_confirmation` `requires_action` `processing` `requires_capture` `canceled` `succeeded`";
                                        };
                                    };
                                };
                            };
                            readonly taxRateIds: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const InvoiceControllerMarkUncollectibleInvoice: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly total: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly subTotal: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly customer: {
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Customer's id";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's created at";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's updated at";
                        };
                        readonly customerReferenceId: {
                            readonly type: "string";
                            readonly description: "Customer's reference id";
                        };
                        readonly shipping: {
                            readonly description: "Customer's shipping address";
                            readonly type: "object";
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name";
                                };
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The email";
                                };
                                readonly phone: {
                                    readonly type: "string";
                                    readonly description: "The phone";
                                };
                                readonly organizationName: {
                                    readonly type: "string";
                                    readonly description: "The organization name";
                                };
                                readonly address: {
                                    readonly description: "The address";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly line1: {
                                            readonly type: "string";
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                        };
                                        readonly postalCode: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly taxIds: {
                            readonly type: "object";
                            readonly properties: {
                                readonly object: {
                                    readonly type: "string";
                                };
                                readonly data: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                            readonly customerId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                        };
                                        readonly required: readonly ["id", "customerId"];
                                    };
                                };
                            };
                        };
                        readonly visibility: {
                            readonly description: "Customer's visibility. If Dashboard then displayed on dashboard UI. If API then only returned in API response only.\n\n`10` `20`";
                            readonly type: "string";
                            readonly enum: readonly [10, 20];
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "Customer's metadata";
                            readonly additionalProperties: true;
                        };
                        readonly customerNumber: {
                            readonly type: "string";
                            readonly description: "Customer number assigned by the system";
                        };
                    };
                    readonly required: readonly ["id", "customerNumber"];
                };
                readonly autoAdvance: {
                    readonly type: "boolean";
                };
                readonly collectionMethod: {
                    readonly type: "string";
                    readonly enum: readonly ["charge_automatically", "send_invoice"];
                    readonly description: "`charge_automatically` `send_invoice`";
                };
                readonly invoiceType: {
                    readonly type: "string";
                    readonly enum: readonly ["one_time", "recurring"];
                    readonly description: "`one_time` `recurring`";
                };
                readonly customFields: {
                    readonly type: "object";
                    readonly properties: {
                        readonly fields: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly value: {
                                        readonly type: "string";
                                    };
                                };
                                readonly required: readonly ["name", "value"];
                            };
                        };
                    };
                };
                readonly paymentSettingId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly paymentSetting: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly description: "A list of the types of payment methods";
                            readonly minItems: 1;
                            readonly maxItems: 1;
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                            readonly examples: readonly ["wallet"];
                        };
                        readonly allowedChains: {
                            readonly description: "The list of chains allowed for the payment. If not provided, all chains supported by the organization are enabled.";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly chainId: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly blacklistCurrencies: {
                                        readonly type: "array";
                                        readonly description: "The list of currencies to disable for the payment. Note: This field is only used for checkout session API atm.";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                        };
                                        readonly examples: readonly ["usdc"];
                                    };
                                    readonly withdrawalAddress: {
                                        readonly type: "string";
                                        readonly description: "This is optional, default withdrawal address configured in dashboard under settings > payment methods is used. The custom withdrawal address to use for this chain instead of stored default withdrawal address.";
                                    };
                                    readonly withdrawalAddresses: {
                                        readonly description: "The list of withdrawal addresses to split the payment. If provided, the sum of all split percentages should be 100.";
                                        readonly minItems: 2;
                                        readonly maxItems: 4;
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly splitPercentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly examples: readonly [1];
                                                };
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "The withdrawal address for the split percentage";
                                                };
                                            };
                                            readonly required: readonly ["splitPercentage", "address"];
                                        };
                                    };
                                };
                                readonly required: readonly ["chainId"];
                            };
                        };
                        readonly allowedCurrencies: {
                            readonly type: "array";
                            readonly description: "The list of currencies allowed for the payment.";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                            };
                            readonly examples: readonly ["usdc", "usdt"];
                        };
                        readonly preferredChainId: {
                            readonly type: "number";
                            readonly description: "The preferred chain's id";
                            readonly examples: readonly [1];
                        };
                        readonly preferredCurrency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                            readonly description: "The preferred currency for payment\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                        };
                        readonly allowSwap: {
                            readonly type: "boolean";
                            readonly description: "Whether the user can swap the payment currency";
                            readonly default: false;
                        };
                        readonly applyFee: {
                            readonly type: "boolean";
                            readonly description: "Whether add a application fee to the user payment";
                            readonly default: false;
                        };
                        readonly feePercentage: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly maximum: 100;
                            readonly description: "Percent that will be added to subtotal as a fee";
                            readonly examples: readonly [1];
                        };
                        readonly applyGasFee: {
                            readonly type: "boolean";
                            readonly description: "Whether add a transaction fee to the user payment";
                            readonly default: false;
                        };
                        readonly allowSplitPayments: {
                            readonly type: "boolean";
                            readonly description: "Whether the user can split the payment";
                        };
                        readonly slippagePercentage: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly maximum: 100;
                            readonly description: "The slippage percentage allowed for swaps and withdrawals";
                            readonly default: 10;
                            readonly examples: readonly [1];
                        };
                    };
                    readonly required: readonly ["id", "feePercentage"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["draft", "open", "paid", "void", "uncollectible"];
                    readonly description: "`draft` `open` `paid` `void` `uncollectible`";
                };
                readonly attempted: {
                    readonly type: "boolean";
                };
                readonly attemptCount: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly nextPaymentAttempt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly dueDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly footer: {
                    readonly type: "string";
                };
                readonly fromInvoiceId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly latestRevisionId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly invoicePdfUrl: {
                    readonly type: "string";
                };
                readonly invoiceNumber: {
                    readonly type: "string";
                };
                readonly paid: {
                    readonly type: "boolean";
                };
                readonly paidOutOfBand: {
                    readonly type: "boolean";
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly clientReferenceId: {
                    readonly type: "string";
                };
                readonly lineItems: {
                    readonly type: "object";
                    readonly properties: {
                        readonly object: {
                            readonly type: "string";
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly description: {
                                        readonly type: "string";
                                    };
                                    readonly periodStart: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly periodEnd: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly quantity: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly price: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly billingScheme: {
                                                readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                                                readonly type: "string";
                                                readonly enum: readonly ["per_unit"];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                                readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                            };
                                            readonly productId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "Product's id";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                            readonly interval: {
                                                readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                                                readonly type: "string";
                                                readonly enum: readonly ["day", "week", "month", "year"];
                                            };
                                            readonly intervalCount: {
                                                readonly type: "number";
                                                readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                                                readonly examples: readonly [1];
                                            };
                                            readonly isActive: {
                                                readonly type: "boolean";
                                                readonly description: "Whether the price is currently active";
                                            };
                                            readonly usageType: {
                                                readonly description: "The usage type of the price.\n\n`licensed`";
                                                readonly type: "string";
                                                readonly enum: readonly ["licensed"];
                                            };
                                            readonly type: {
                                                readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                                                readonly type: "string";
                                                readonly enum: readonly ["one_time", "recurring", "streaming"];
                                            };
                                            readonly unitAmount: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly unitAmountDecimal: {
                                                readonly type: "string";
                                            };
                                            readonly customUnitMax: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitMin: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customPreset: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitAmountSuggestions: {
                                                readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                            readonly product: {
                                                readonly description: "The product this price belongs to";
                                                readonly type: "object";
                                                readonly required: readonly ["id", "name"];
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                    };
                                                    readonly createdAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly updatedAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the product. Displayed on the checkout page";
                                                    };
                                                    readonly description: {
                                                        readonly type: "string";
                                                        readonly description: "The description of the product. Displayed on the checkout page";
                                                    };
                                                    readonly isActive: {
                                                        readonly type: "boolean";
                                                        readonly description: "Whether the product is currently active";
                                                    };
                                                    readonly images: {
                                                        readonly maxItems: 8;
                                                        readonly description: "The url of product images. Displayed on the checkout page";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly publicImages: {
                                                        readonly description: "Product images with absolute public url";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly unitLabel: {
                                                        readonly type: "string";
                                                        readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                                    };
                                                    readonly url: {
                                                        readonly type: "string";
                                                        readonly description: "The url of the product";
                                                    };
                                                    readonly defaultPriceId: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Product's default price id";
                                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                    };
                                                    readonly metadata: {
                                                        readonly type: "object";
                                                        readonly description: "The metadata of the product";
                                                        readonly additionalProperties: true;
                                                    };
                                                    readonly visibility: {
                                                        readonly description: "The visibility of the product\n\n`10` `20`";
                                                        readonly type: "string";
                                                        readonly enum: readonly [10, 20];
                                                    };
                                                };
                                            };
                                            readonly metadata: {
                                                readonly type: "object";
                                                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                                readonly additionalProperties: true;
                                            };
                                            readonly visibility: {
                                                readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                                                readonly type: "string";
                                                readonly enum: readonly [10, 20];
                                            };
                                        };
                                        readonly required: readonly ["id", "currency", "productId", "type", "product"];
                                    };
                                    readonly taxRates: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the tax rate.";
                                                };
                                                readonly description: {
                                                    readonly type: "string";
                                                    readonly description: "The description of the tax rate.";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                    readonly description: "The country of the tax rate.";
                                                };
                                                readonly percentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly description: "Percent that will be added to subtotal as a tax.";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly type: {
                                                    readonly description: "The type of the tax rate.\n\n`exclusive` `inclusive`";
                                                    readonly type: "string";
                                                    readonly enum: readonly ["exclusive", "inclusive"];
                                                };
                                                readonly isDefault: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                            readonly required: readonly ["id", "name", "percentage", "type", "isDefault"];
                                        };
                                    };
                                    readonly amountTotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountSubtotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountTax: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                };
                                readonly required: readonly ["price"];
                            };
                        };
                    };
                };
                readonly finalizedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly paidAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly markedUncollectibleAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly visibility: {
                    readonly type: "string";
                    readonly enum: readonly [10, 20];
                    readonly description: "`10` `20`";
                };
                readonly paymentIntentId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "The URL to redirect the customer to pay invoice";
                };
                readonly subscriptionId: {
                    readonly type: "string";
                };
                readonly periodStart: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly periodEnd: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly billingReason: {
                    readonly type: "string";
                    readonly enum: readonly ["subscription_cycle", "subscription_create", "subscription_update", "subscription", "manual", "upcoming", "subscription_threshold"];
                    readonly description: "`subscription_cycle` `subscription_create` `subscription_update` `subscription` `manual` `upcoming` `subscription_threshold`";
                };
                readonly allowPromotionCodes: {
                    readonly type: "boolean";
                    readonly description: "Enables user redeemable promotion codes.";
                };
                readonly finalizeScheduleAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "The date on which invoice will be finalize and send";
                };
                readonly totalTax: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly paymentIntent: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly organizationId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly amount: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountReceived: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"];
                            readonly description: "`requires_payment_method` `requires_confirmation` `requires_action` `processing` `requires_capture` `canceled` `succeeded`";
                        };
                        readonly paymentMethodId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly description: {
                            readonly type: "string";
                        };
                        readonly paymentMethod: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly assetId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly asset: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "Asset id";
                                        };
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "Asset name";
                                        };
                                        readonly chainId: {
                                            readonly type: "number";
                                            readonly description: "Asset chain id";
                                            readonly examples: readonly [1];
                                        };
                                        readonly address: {
                                            readonly type: "string";
                                            readonly description: "Asset address on chain";
                                        };
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                            readonly description: "Asset currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                        };
                                        readonly symbol: {
                                            readonly type: "string";
                                            readonly description: "Asset symbol";
                                        };
                                        readonly decimals: {
                                            readonly type: "number";
                                            readonly description: "Asset decimals in which it is represented on chain";
                                            readonly examples: readonly [1];
                                        };
                                        readonly coingeckoId: {
                                            readonly type: "string";
                                            readonly description: "Asset coingecko id";
                                        };
                                        readonly superToken: {
                                            readonly description: "SuperToken data";
                                            readonly type: "object";
                                            readonly required: readonly ["address", "decimals", "symbol"];
                                            readonly properties: {
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's address";
                                                };
                                                readonly decimals: {
                                                    readonly type: "number";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly symbol: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's symbol";
                                                };
                                            };
                                        };
                                        readonly isEIP5827Supported: {
                                            readonly type: "boolean";
                                            readonly description: "Is EIP5827 supported";
                                        };
                                    };
                                    readonly required: readonly ["id", "name", "chainId", "address", "currency", "symbol", "decimals", "isEIP5827Supported"];
                                };
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                    readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                                };
                                readonly accountAddress: {
                                    readonly type: "string";
                                };
                                readonly billingDetails: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "The name";
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                            readonly description: "The email";
                                        };
                                        readonly phone: {
                                            readonly type: "string";
                                            readonly description: "The phone";
                                        };
                                        readonly organizationName: {
                                            readonly type: "string";
                                            readonly description: "The organization name";
                                        };
                                        readonly address: {
                                            readonly description: "The address";
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly line1: {
                                                    readonly type: "string";
                                                };
                                                readonly line2: {
                                                    readonly type: "string";
                                                };
                                                readonly city: {
                                                    readonly type: "string";
                                                };
                                                readonly state: {
                                                    readonly type: "string";
                                                };
                                                readonly postalCode: {
                                                    readonly type: "string";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly customerId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                };
                            };
                            readonly required: readonly ["id", "assetId", "asset", "type"];
                        };
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                        };
                        readonly transferAccountAddress: {
                            readonly type: "string";
                        };
                        readonly transactions: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly description: "Transaction type\n\n`incoming` `outgoing` `event` `transfer`";
                                        readonly type: "string";
                                        readonly enum: readonly ["incoming", "outgoing", "event", "transfer"];
                                    };
                                    readonly transactionRelayId: {
                                        readonly type: "string";
                                        readonly description: "Transaction relay id";
                                    };
                                    readonly transactionHash: {
                                        readonly type: "string";
                                        readonly description: "Transaction hash";
                                    };
                                    readonly nonce: {
                                        readonly type: "number";
                                        readonly description: "Transaction nonce";
                                        readonly examples: readonly [1];
                                    };
                                    readonly gasLimit: {
                                        readonly type: "number";
                                        readonly description: "Transaction gas limit used in payment";
                                        readonly examples: readonly [1];
                                    };
                                    readonly validUntil: {
                                        readonly type: "string";
                                        readonly description: "Transaction valid until";
                                    };
                                    readonly fromAddress: {
                                        readonly type: "string";
                                        readonly description: "Transaction from address";
                                    };
                                    readonly toAddress: {
                                        readonly type: "string";
                                        readonly description: "Transaction to address";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "Transaction currency\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                        readonly description: "Transaction created at";
                                    };
                                    readonly amount: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "Transaction amount in 8 decimals";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountRaw: {
                                        readonly type: "string";
                                        readonly description: "Transaction amount raw received from alchemy";
                                    };
                                    readonly assetId: {
                                        readonly type: "string";
                                        readonly description: "Transaction asset id";
                                    };
                                    readonly asset: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly address: {
                                                readonly type: "string";
                                            };
                                            readonly chainId: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                            };
                                            readonly symbol: {
                                                readonly type: "string";
                                            };
                                            readonly decimals: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly coingeckoId: {
                                                readonly type: "string";
                                            };
                                            readonly isPublic: {
                                                readonly type: "boolean";
                                            };
                                            readonly superToken: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly address: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's address";
                                                    };
                                                    readonly decimals: {
                                                        readonly type: "number";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly symbol: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's symbol";
                                                    };
                                                };
                                                readonly required: readonly ["address", "decimals", "symbol"];
                                            };
                                            readonly chain: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "number";
                                                        readonly description: "Chain id";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "Chain name";
                                                    };
                                                    readonly icon: {
                                                        readonly type: "string";
                                                        readonly description: "Chain icon";
                                                    };
                                                    readonly currency: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                        readonly description: "Chain currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                                    };
                                                    readonly blockExplorerTransactionUrl: {
                                                        readonly type: "string";
                                                        readonly description: "Chain block explorer transaction url";
                                                    };
                                                    readonly blockExplorerName: {
                                                        readonly type: "string";
                                                        readonly description: "Chain block explorer name";
                                                    };
                                                    readonly type: {
                                                        readonly description: "Chain type\n\n`evm` `solana` `tron` `stripe` `binance_pay`";
                                                        readonly type: "string";
                                                        readonly enum: readonly ["evm", "solana", "tron", "stripe", "binance_pay"];
                                                    };
                                                    readonly isBeta: {
                                                        readonly type: "boolean";
                                                        readonly description: "Is beta asset";
                                                    };
                                                };
                                                readonly required: readonly ["id", "name", "icon", "currency", "blockExplorerTransactionUrl", "blockExplorerName", "type", "isBeta"];
                                            };
                                        };
                                        readonly required: readonly ["id", "name", "address", "chainId", "currency", "symbol", "decimals", "isPublic", "chain"];
                                    };
                                    readonly transactionUrl: {
                                        readonly type: "string";
                                        readonly description: "Transaction url";
                                    };
                                };
                                readonly required: readonly ["type", "fromAddress", "toAddress", "currency", "amountRaw", "assetId", "asset"];
                            };
                        };
                        readonly paymentReceipt: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly organizationId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly paymentIntentId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly receiptNumber: {
                                    readonly type: "string";
                                };
                                readonly uri: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["id", "organizationId", "paymentIntentId", "receiptNumber"];
                        };
                        readonly canceledAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly cancellationReason: {
                            readonly type: "string";
                        };
                        readonly stripe: {
                            readonly type: "object";
                            readonly properties: {
                                readonly paymentIntentId: {
                                    readonly type: "string";
                                };
                                readonly receiptUrl: {
                                    readonly type: "string";
                                };
                                readonly cardLast4: {
                                    readonly type: "string";
                                };
                                readonly displayName: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly isMarkRefunded: {
                            readonly type: "boolean";
                        };
                        readonly markRefundedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly markRefundedComment: {
                            readonly type: "string";
                        };
                    };
                    readonly required: readonly ["id", "organizationId", "status", "paymentMethodId", "transactions"];
                };
                readonly paymentIntentAttempt: {
                    readonly description: "The payment intent associated with the session. Payment intent is created when the session is created.";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly errorCode: {
                                readonly type: "string";
                                readonly enum: readonly ["account_closed", "account_information_mismatch", "account_invalid", "account_number_invalid", "amount_too_large", "amount_too_small", "api_key_expired", "authentication_required", "balance_insufficient", "account_bad_routing_numbers", "account_declined", "account_exists", "account_restricted", "account_unusable", "account_unverified", "billing_invalid_mandate", "capture_charge_authorization_expired", "capture_unauthorized_payment", "charge_already_captured", "charge_already_refunded", "charge_disputed", "charge_exceeds_source_limit", "charge_expired_for_capture", "charge_invalid_parameter", "charge_not_refundable", "clearing_code_unsupported", "country_code_invalid", "country_unsupported", "coupon_expired", "customer_max_payment_methods", "customer_max_subscriptions", "debit_not_authorized", "email_invalid", "expired_card", "idempotency_key_in_use", "incorrect_address", "incorrect_number", "insufficient_funds", "intent_invalid_state", "intent_verification_method_missing", "invalid_characters", "invalid_charge_amount", "invalid_source_usage", "invoice_no_customer_line_items", "invoice_no_payment_method_types", "invoice_no_subscription_line_items", "invoice_not_editable", "invoice_on_behalf_of_not_editable", "invoice_payment_intent_requires_action", "invoice_upcoming_none", "livemode_mismatch", "lock_timeout", "missing", "no_account", "parameter_invalid_empty", "parameter_invalid_integer", "parameter_invalid_string_blank", "parameter_invalid_string_empty", "parameter_missing", "parameter_unknown", "parameters_exclusive", "payment_intent_action_required", "payment_intent_authentication_failure", "payment_intent_incompatible_payment_method", "payment_intent_invalid_parameter", "payment_intent_mandate_invalid", "payment_intent_payment_attempt_expired", "payment_intent_payment_attempt_failed", "payment_intent_unexpected_state", "payment_method_billing_details_address_missing", "payment_method_configuration_failures", "payment_method_currency_mismatch", "payment_method_customer_decline", "payment_method_invalid_parameter", "payment_method_invalid_parameter_testmode", "payment_method_not_available", "payment_method_provider_decline", "payment_method_provider_timeout", "payment_method_unactivated", "payment_method_unexpected_state", "payment_method_unsupported_type", "payout_reconciliation_not_ready", "payouts_limit_exceeded", "payouts_not_allowed", "postal_code_invalid", "processing_error", "product_inactive", "progressive_onboarding_limit_exceeded", "rate_limit", "refer_to_customer", "refund_disputed_payment", "resource_already_exists", "resource_missing", "return_intent_already_processed", "routing_number_invalid", "secret_key_required", "setup_attempt_failed", "setup_intent_authentication_failure", "setup_intent_invalid_parameter", "setup_intent_mandate_invalid", "setup_intent_setup_attempt_expired", "setup_intent_unexpected_state", "shipping_calculation_failed", "sku_inactive", "status_transition_invalid", "tax_id_invalid", "taxes_calculation_failed", "testmode_charges_only", "tls_version_unsupported", "token_already_used", "token_in_use", "transfer_source_balance_parameters_mismatch", "transfers_not_allowed", "url_invalid"];
                                readonly description: "`account_closed` `account_information_mismatch` `account_invalid` `account_number_invalid` `amount_too_large` `amount_too_small` `api_key_expired` `authentication_required` `balance_insufficient` `account_bad_routing_numbers` `account_declined` `account_exists` `account_restricted` `account_unusable` `account_unverified` `billing_invalid_mandate` `capture_charge_authorization_expired` `capture_unauthorized_payment` `charge_already_captured` `charge_already_refunded` `charge_disputed` `charge_exceeds_source_limit` `charge_expired_for_capture` `charge_invalid_parameter` `charge_not_refundable` `clearing_code_unsupported` `country_code_invalid` `country_unsupported` `coupon_expired` `customer_max_payment_methods` `customer_max_subscriptions` `debit_not_authorized` `email_invalid` `expired_card` `idempotency_key_in_use` `incorrect_address` `incorrect_number` `insufficient_funds` `intent_invalid_state` `intent_verification_method_missing` `invalid_characters` `invalid_charge_amount` `invalid_source_usage` `invoice_no_customer_line_items` `invoice_no_payment_method_types` `invoice_no_subscription_line_items` `invoice_not_editable` `invoice_on_behalf_of_not_editable` `invoice_payment_intent_requires_action` `invoice_upcoming_none` `livemode_mismatch` `lock_timeout` `missing` `no_account` `parameter_invalid_empty` `parameter_invalid_integer` `parameter_invalid_string_blank` `parameter_invalid_string_empty` `parameter_missing` `parameter_unknown` `parameters_exclusive` `payment_intent_action_required` `payment_intent_authentication_failure` `payment_intent_incompatible_payment_method` `payment_intent_invalid_parameter` `payment_intent_mandate_invalid` `payment_intent_payment_attempt_expired` `payment_intent_payment_attempt_failed` `payment_intent_unexpected_state` `payment_method_billing_details_address_missing` `payment_method_configuration_failures` `payment_method_currency_mismatch` `payment_method_customer_decline` `payment_method_invalid_parameter` `payment_method_invalid_parameter_testmode` `payment_method_not_available` `payment_method_provider_decline` `payment_method_provider_timeout` `payment_method_unactivated` `payment_method_unexpected_state` `payment_method_unsupported_type` `payout_reconciliation_not_ready` `payouts_limit_exceeded` `payouts_not_allowed` `postal_code_invalid` `processing_error` `product_inactive` `progressive_onboarding_limit_exceeded` `rate_limit` `refer_to_customer` `refund_disputed_payment` `resource_already_exists` `resource_missing` `return_intent_already_processed` `routing_number_invalid` `secret_key_required` `setup_attempt_failed` `setup_intent_authentication_failure` `setup_intent_invalid_parameter` `setup_intent_mandate_invalid` `setup_intent_setup_attempt_expired` `setup_intent_unexpected_state` `shipping_calculation_failed` `sku_inactive` `status_transition_invalid` `tax_id_invalid` `taxes_calculation_failed` `testmode_charges_only` `tls_version_unsupported` `token_already_used` `token_in_use` `transfer_source_balance_parameters_mismatch` `transfers_not_allowed` `url_invalid`";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["api_error", "card_error", "idempotency_error", "invalid_request_error", "chain_error", "unknown"];
                                readonly description: "`api_error` `card_error` `idempotency_error` `invalid_request_error` `chain_error` `unknown`";
                            };
                            readonly declineCode: {
                                readonly type: "string";
                            };
                            readonly paymentIntentId: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                            };
                            readonly paymentMethodType: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                            readonly docUrl: {
                                readonly type: "string";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"];
                                readonly description: "`requires_payment_method` `requires_confirmation` `requires_action` `processing` `requires_capture` `canceled` `succeeded`";
                            };
                        };
                        readonly required: readonly ["id", "type", "status"];
                    };
                };
                readonly taxRateIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
            };
            readonly required: readonly ["id", "organizationId", "customerId", "customer", "autoAdvance", "collectionMethod", "paymentSettingId", "paymentSetting", "status", "attempted", "paid", "lineItems", "url", "billingReason"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const InvoiceControllerPayInvoice: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly total: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly subTotal: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly customer: {
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Customer's id";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's created at";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's updated at";
                        };
                        readonly customerReferenceId: {
                            readonly type: "string";
                            readonly description: "Customer's reference id";
                        };
                        readonly shipping: {
                            readonly description: "Customer's shipping address";
                            readonly type: "object";
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name";
                                };
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The email";
                                };
                                readonly phone: {
                                    readonly type: "string";
                                    readonly description: "The phone";
                                };
                                readonly organizationName: {
                                    readonly type: "string";
                                    readonly description: "The organization name";
                                };
                                readonly address: {
                                    readonly description: "The address";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly line1: {
                                            readonly type: "string";
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                        };
                                        readonly postalCode: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly taxIds: {
                            readonly type: "object";
                            readonly properties: {
                                readonly object: {
                                    readonly type: "string";
                                };
                                readonly data: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                            readonly customerId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                        };
                                        readonly required: readonly ["id", "customerId"];
                                    };
                                };
                            };
                        };
                        readonly visibility: {
                            readonly description: "Customer's visibility. If Dashboard then displayed on dashboard UI. If API then only returned in API response only.\n\n`10` `20`";
                            readonly type: "string";
                            readonly enum: readonly [10, 20];
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "Customer's metadata";
                            readonly additionalProperties: true;
                        };
                        readonly customerNumber: {
                            readonly type: "string";
                            readonly description: "Customer number assigned by the system";
                        };
                    };
                    readonly required: readonly ["id", "customerNumber"];
                };
                readonly autoAdvance: {
                    readonly type: "boolean";
                };
                readonly collectionMethod: {
                    readonly type: "string";
                    readonly enum: readonly ["charge_automatically", "send_invoice"];
                    readonly description: "`charge_automatically` `send_invoice`";
                };
                readonly invoiceType: {
                    readonly type: "string";
                    readonly enum: readonly ["one_time", "recurring"];
                    readonly description: "`one_time` `recurring`";
                };
                readonly customFields: {
                    readonly type: "object";
                    readonly properties: {
                        readonly fields: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly value: {
                                        readonly type: "string";
                                    };
                                };
                                readonly required: readonly ["name", "value"];
                            };
                        };
                    };
                };
                readonly paymentSettingId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly paymentSetting: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly description: "A list of the types of payment methods";
                            readonly minItems: 1;
                            readonly maxItems: 1;
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                            readonly examples: readonly ["wallet"];
                        };
                        readonly allowedChains: {
                            readonly description: "The list of chains allowed for the payment. If not provided, all chains supported by the organization are enabled.";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly chainId: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly blacklistCurrencies: {
                                        readonly type: "array";
                                        readonly description: "The list of currencies to disable for the payment. Note: This field is only used for checkout session API atm.";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                        };
                                        readonly examples: readonly ["usdc"];
                                    };
                                    readonly withdrawalAddress: {
                                        readonly type: "string";
                                        readonly description: "This is optional, default withdrawal address configured in dashboard under settings > payment methods is used. The custom withdrawal address to use for this chain instead of stored default withdrawal address.";
                                    };
                                    readonly withdrawalAddresses: {
                                        readonly description: "The list of withdrawal addresses to split the payment. If provided, the sum of all split percentages should be 100.";
                                        readonly minItems: 2;
                                        readonly maxItems: 4;
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly splitPercentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly examples: readonly [1];
                                                };
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "The withdrawal address for the split percentage";
                                                };
                                            };
                                            readonly required: readonly ["splitPercentage", "address"];
                                        };
                                    };
                                };
                                readonly required: readonly ["chainId"];
                            };
                        };
                        readonly allowedCurrencies: {
                            readonly type: "array";
                            readonly description: "The list of currencies allowed for the payment.";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                            };
                            readonly examples: readonly ["usdc", "usdt"];
                        };
                        readonly preferredChainId: {
                            readonly type: "number";
                            readonly description: "The preferred chain's id";
                            readonly examples: readonly [1];
                        };
                        readonly preferredCurrency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                            readonly description: "The preferred currency for payment\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                        };
                        readonly allowSwap: {
                            readonly type: "boolean";
                            readonly description: "Whether the user can swap the payment currency";
                            readonly default: false;
                        };
                        readonly applyFee: {
                            readonly type: "boolean";
                            readonly description: "Whether add a application fee to the user payment";
                            readonly default: false;
                        };
                        readonly feePercentage: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly maximum: 100;
                            readonly description: "Percent that will be added to subtotal as a fee";
                            readonly examples: readonly [1];
                        };
                        readonly applyGasFee: {
                            readonly type: "boolean";
                            readonly description: "Whether add a transaction fee to the user payment";
                            readonly default: false;
                        };
                        readonly allowSplitPayments: {
                            readonly type: "boolean";
                            readonly description: "Whether the user can split the payment";
                        };
                        readonly slippagePercentage: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly maximum: 100;
                            readonly description: "The slippage percentage allowed for swaps and withdrawals";
                            readonly default: 10;
                            readonly examples: readonly [1];
                        };
                    };
                    readonly required: readonly ["id", "feePercentage"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["draft", "open", "paid", "void", "uncollectible"];
                    readonly description: "`draft` `open` `paid` `void` `uncollectible`";
                };
                readonly attempted: {
                    readonly type: "boolean";
                };
                readonly attemptCount: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly nextPaymentAttempt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly dueDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly footer: {
                    readonly type: "string";
                };
                readonly fromInvoiceId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly latestRevisionId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly invoicePdfUrl: {
                    readonly type: "string";
                };
                readonly invoiceNumber: {
                    readonly type: "string";
                };
                readonly paid: {
                    readonly type: "boolean";
                };
                readonly paidOutOfBand: {
                    readonly type: "boolean";
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly clientReferenceId: {
                    readonly type: "string";
                };
                readonly lineItems: {
                    readonly type: "object";
                    readonly properties: {
                        readonly object: {
                            readonly type: "string";
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly description: {
                                        readonly type: "string";
                                    };
                                    readonly periodStart: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly periodEnd: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly quantity: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly price: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly billingScheme: {
                                                readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                                                readonly type: "string";
                                                readonly enum: readonly ["per_unit"];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                                readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                            };
                                            readonly productId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "Product's id";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                            readonly interval: {
                                                readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                                                readonly type: "string";
                                                readonly enum: readonly ["day", "week", "month", "year"];
                                            };
                                            readonly intervalCount: {
                                                readonly type: "number";
                                                readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                                                readonly examples: readonly [1];
                                            };
                                            readonly isActive: {
                                                readonly type: "boolean";
                                                readonly description: "Whether the price is currently active";
                                            };
                                            readonly usageType: {
                                                readonly description: "The usage type of the price.\n\n`licensed`";
                                                readonly type: "string";
                                                readonly enum: readonly ["licensed"];
                                            };
                                            readonly type: {
                                                readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                                                readonly type: "string";
                                                readonly enum: readonly ["one_time", "recurring", "streaming"];
                                            };
                                            readonly unitAmount: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly unitAmountDecimal: {
                                                readonly type: "string";
                                            };
                                            readonly customUnitMax: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitMin: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customPreset: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitAmountSuggestions: {
                                                readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                            readonly product: {
                                                readonly description: "The product this price belongs to";
                                                readonly type: "object";
                                                readonly required: readonly ["id", "name"];
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                    };
                                                    readonly createdAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly updatedAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the product. Displayed on the checkout page";
                                                    };
                                                    readonly description: {
                                                        readonly type: "string";
                                                        readonly description: "The description of the product. Displayed on the checkout page";
                                                    };
                                                    readonly isActive: {
                                                        readonly type: "boolean";
                                                        readonly description: "Whether the product is currently active";
                                                    };
                                                    readonly images: {
                                                        readonly maxItems: 8;
                                                        readonly description: "The url of product images. Displayed on the checkout page";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly publicImages: {
                                                        readonly description: "Product images with absolute public url";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly unitLabel: {
                                                        readonly type: "string";
                                                        readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                                    };
                                                    readonly url: {
                                                        readonly type: "string";
                                                        readonly description: "The url of the product";
                                                    };
                                                    readonly defaultPriceId: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Product's default price id";
                                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                    };
                                                    readonly metadata: {
                                                        readonly type: "object";
                                                        readonly description: "The metadata of the product";
                                                        readonly additionalProperties: true;
                                                    };
                                                    readonly visibility: {
                                                        readonly description: "The visibility of the product\n\n`10` `20`";
                                                        readonly type: "string";
                                                        readonly enum: readonly [10, 20];
                                                    };
                                                };
                                            };
                                            readonly metadata: {
                                                readonly type: "object";
                                                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                                readonly additionalProperties: true;
                                            };
                                            readonly visibility: {
                                                readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                                                readonly type: "string";
                                                readonly enum: readonly [10, 20];
                                            };
                                        };
                                        readonly required: readonly ["id", "currency", "productId", "type", "product"];
                                    };
                                    readonly taxRates: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the tax rate.";
                                                };
                                                readonly description: {
                                                    readonly type: "string";
                                                    readonly description: "The description of the tax rate.";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                    readonly description: "The country of the tax rate.";
                                                };
                                                readonly percentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly description: "Percent that will be added to subtotal as a tax.";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly type: {
                                                    readonly description: "The type of the tax rate.\n\n`exclusive` `inclusive`";
                                                    readonly type: "string";
                                                    readonly enum: readonly ["exclusive", "inclusive"];
                                                };
                                                readonly isDefault: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                            readonly required: readonly ["id", "name", "percentage", "type", "isDefault"];
                                        };
                                    };
                                    readonly amountTotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountSubtotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountTax: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                };
                                readonly required: readonly ["price"];
                            };
                        };
                    };
                };
                readonly finalizedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly paidAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly markedUncollectibleAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly visibility: {
                    readonly type: "string";
                    readonly enum: readonly [10, 20];
                    readonly description: "`10` `20`";
                };
                readonly paymentIntentId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "The URL to redirect the customer to pay invoice";
                };
                readonly subscriptionId: {
                    readonly type: "string";
                };
                readonly periodStart: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly periodEnd: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly billingReason: {
                    readonly type: "string";
                    readonly enum: readonly ["subscription_cycle", "subscription_create", "subscription_update", "subscription", "manual", "upcoming", "subscription_threshold"];
                    readonly description: "`subscription_cycle` `subscription_create` `subscription_update` `subscription` `manual` `upcoming` `subscription_threshold`";
                };
                readonly allowPromotionCodes: {
                    readonly type: "boolean";
                    readonly description: "Enables user redeemable promotion codes.";
                };
                readonly finalizeScheduleAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "The date on which invoice will be finalize and send";
                };
                readonly totalTax: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly paymentIntent: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly organizationId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly amount: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountReceived: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"];
                            readonly description: "`requires_payment_method` `requires_confirmation` `requires_action` `processing` `requires_capture` `canceled` `succeeded`";
                        };
                        readonly paymentMethodId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly description: {
                            readonly type: "string";
                        };
                        readonly paymentMethod: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly assetId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly asset: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "Asset id";
                                        };
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "Asset name";
                                        };
                                        readonly chainId: {
                                            readonly type: "number";
                                            readonly description: "Asset chain id";
                                            readonly examples: readonly [1];
                                        };
                                        readonly address: {
                                            readonly type: "string";
                                            readonly description: "Asset address on chain";
                                        };
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                            readonly description: "Asset currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                        };
                                        readonly symbol: {
                                            readonly type: "string";
                                            readonly description: "Asset symbol";
                                        };
                                        readonly decimals: {
                                            readonly type: "number";
                                            readonly description: "Asset decimals in which it is represented on chain";
                                            readonly examples: readonly [1];
                                        };
                                        readonly coingeckoId: {
                                            readonly type: "string";
                                            readonly description: "Asset coingecko id";
                                        };
                                        readonly superToken: {
                                            readonly description: "SuperToken data";
                                            readonly type: "object";
                                            readonly required: readonly ["address", "decimals", "symbol"];
                                            readonly properties: {
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's address";
                                                };
                                                readonly decimals: {
                                                    readonly type: "number";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly symbol: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's symbol";
                                                };
                                            };
                                        };
                                        readonly isEIP5827Supported: {
                                            readonly type: "boolean";
                                            readonly description: "Is EIP5827 supported";
                                        };
                                    };
                                    readonly required: readonly ["id", "name", "chainId", "address", "currency", "symbol", "decimals", "isEIP5827Supported"];
                                };
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                    readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                                };
                                readonly accountAddress: {
                                    readonly type: "string";
                                };
                                readonly billingDetails: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "The name";
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                            readonly description: "The email";
                                        };
                                        readonly phone: {
                                            readonly type: "string";
                                            readonly description: "The phone";
                                        };
                                        readonly organizationName: {
                                            readonly type: "string";
                                            readonly description: "The organization name";
                                        };
                                        readonly address: {
                                            readonly description: "The address";
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly line1: {
                                                    readonly type: "string";
                                                };
                                                readonly line2: {
                                                    readonly type: "string";
                                                };
                                                readonly city: {
                                                    readonly type: "string";
                                                };
                                                readonly state: {
                                                    readonly type: "string";
                                                };
                                                readonly postalCode: {
                                                    readonly type: "string";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly customerId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                };
                            };
                            readonly required: readonly ["id", "assetId", "asset", "type"];
                        };
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                        };
                        readonly transferAccountAddress: {
                            readonly type: "string";
                        };
                        readonly transactions: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly description: "Transaction type\n\n`incoming` `outgoing` `event` `transfer`";
                                        readonly type: "string";
                                        readonly enum: readonly ["incoming", "outgoing", "event", "transfer"];
                                    };
                                    readonly transactionRelayId: {
                                        readonly type: "string";
                                        readonly description: "Transaction relay id";
                                    };
                                    readonly transactionHash: {
                                        readonly type: "string";
                                        readonly description: "Transaction hash";
                                    };
                                    readonly nonce: {
                                        readonly type: "number";
                                        readonly description: "Transaction nonce";
                                        readonly examples: readonly [1];
                                    };
                                    readonly gasLimit: {
                                        readonly type: "number";
                                        readonly description: "Transaction gas limit used in payment";
                                        readonly examples: readonly [1];
                                    };
                                    readonly validUntil: {
                                        readonly type: "string";
                                        readonly description: "Transaction valid until";
                                    };
                                    readonly fromAddress: {
                                        readonly type: "string";
                                        readonly description: "Transaction from address";
                                    };
                                    readonly toAddress: {
                                        readonly type: "string";
                                        readonly description: "Transaction to address";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "Transaction currency\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                        readonly description: "Transaction created at";
                                    };
                                    readonly amount: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "Transaction amount in 8 decimals";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountRaw: {
                                        readonly type: "string";
                                        readonly description: "Transaction amount raw received from alchemy";
                                    };
                                    readonly assetId: {
                                        readonly type: "string";
                                        readonly description: "Transaction asset id";
                                    };
                                    readonly asset: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly address: {
                                                readonly type: "string";
                                            };
                                            readonly chainId: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                            };
                                            readonly symbol: {
                                                readonly type: "string";
                                            };
                                            readonly decimals: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly coingeckoId: {
                                                readonly type: "string";
                                            };
                                            readonly isPublic: {
                                                readonly type: "boolean";
                                            };
                                            readonly superToken: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly address: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's address";
                                                    };
                                                    readonly decimals: {
                                                        readonly type: "number";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly symbol: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's symbol";
                                                    };
                                                };
                                                readonly required: readonly ["address", "decimals", "symbol"];
                                            };
                                            readonly chain: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "number";
                                                        readonly description: "Chain id";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "Chain name";
                                                    };
                                                    readonly icon: {
                                                        readonly type: "string";
                                                        readonly description: "Chain icon";
                                                    };
                                                    readonly currency: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                        readonly description: "Chain currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                                    };
                                                    readonly blockExplorerTransactionUrl: {
                                                        readonly type: "string";
                                                        readonly description: "Chain block explorer transaction url";
                                                    };
                                                    readonly blockExplorerName: {
                                                        readonly type: "string";
                                                        readonly description: "Chain block explorer name";
                                                    };
                                                    readonly type: {
                                                        readonly description: "Chain type\n\n`evm` `solana` `tron` `stripe` `binance_pay`";
                                                        readonly type: "string";
                                                        readonly enum: readonly ["evm", "solana", "tron", "stripe", "binance_pay"];
                                                    };
                                                    readonly isBeta: {
                                                        readonly type: "boolean";
                                                        readonly description: "Is beta asset";
                                                    };
                                                };
                                                readonly required: readonly ["id", "name", "icon", "currency", "blockExplorerTransactionUrl", "blockExplorerName", "type", "isBeta"];
                                            };
                                        };
                                        readonly required: readonly ["id", "name", "address", "chainId", "currency", "symbol", "decimals", "isPublic", "chain"];
                                    };
                                    readonly transactionUrl: {
                                        readonly type: "string";
                                        readonly description: "Transaction url";
                                    };
                                };
                                readonly required: readonly ["type", "fromAddress", "toAddress", "currency", "amountRaw", "assetId", "asset"];
                            };
                        };
                        readonly paymentReceipt: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly organizationId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly paymentIntentId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly receiptNumber: {
                                    readonly type: "string";
                                };
                                readonly uri: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["id", "organizationId", "paymentIntentId", "receiptNumber"];
                        };
                        readonly canceledAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly cancellationReason: {
                            readonly type: "string";
                        };
                        readonly stripe: {
                            readonly type: "object";
                            readonly properties: {
                                readonly paymentIntentId: {
                                    readonly type: "string";
                                };
                                readonly receiptUrl: {
                                    readonly type: "string";
                                };
                                readonly cardLast4: {
                                    readonly type: "string";
                                };
                                readonly displayName: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly isMarkRefunded: {
                            readonly type: "boolean";
                        };
                        readonly markRefundedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly markRefundedComment: {
                            readonly type: "string";
                        };
                    };
                    readonly required: readonly ["id", "organizationId", "status", "paymentMethodId", "transactions"];
                };
                readonly paymentIntentAttempt: {
                    readonly description: "The payment intent associated with the session. Payment intent is created when the session is created.";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly errorCode: {
                                readonly type: "string";
                                readonly enum: readonly ["account_closed", "account_information_mismatch", "account_invalid", "account_number_invalid", "amount_too_large", "amount_too_small", "api_key_expired", "authentication_required", "balance_insufficient", "account_bad_routing_numbers", "account_declined", "account_exists", "account_restricted", "account_unusable", "account_unverified", "billing_invalid_mandate", "capture_charge_authorization_expired", "capture_unauthorized_payment", "charge_already_captured", "charge_already_refunded", "charge_disputed", "charge_exceeds_source_limit", "charge_expired_for_capture", "charge_invalid_parameter", "charge_not_refundable", "clearing_code_unsupported", "country_code_invalid", "country_unsupported", "coupon_expired", "customer_max_payment_methods", "customer_max_subscriptions", "debit_not_authorized", "email_invalid", "expired_card", "idempotency_key_in_use", "incorrect_address", "incorrect_number", "insufficient_funds", "intent_invalid_state", "intent_verification_method_missing", "invalid_characters", "invalid_charge_amount", "invalid_source_usage", "invoice_no_customer_line_items", "invoice_no_payment_method_types", "invoice_no_subscription_line_items", "invoice_not_editable", "invoice_on_behalf_of_not_editable", "invoice_payment_intent_requires_action", "invoice_upcoming_none", "livemode_mismatch", "lock_timeout", "missing", "no_account", "parameter_invalid_empty", "parameter_invalid_integer", "parameter_invalid_string_blank", "parameter_invalid_string_empty", "parameter_missing", "parameter_unknown", "parameters_exclusive", "payment_intent_action_required", "payment_intent_authentication_failure", "payment_intent_incompatible_payment_method", "payment_intent_invalid_parameter", "payment_intent_mandate_invalid", "payment_intent_payment_attempt_expired", "payment_intent_payment_attempt_failed", "payment_intent_unexpected_state", "payment_method_billing_details_address_missing", "payment_method_configuration_failures", "payment_method_currency_mismatch", "payment_method_customer_decline", "payment_method_invalid_parameter", "payment_method_invalid_parameter_testmode", "payment_method_not_available", "payment_method_provider_decline", "payment_method_provider_timeout", "payment_method_unactivated", "payment_method_unexpected_state", "payment_method_unsupported_type", "payout_reconciliation_not_ready", "payouts_limit_exceeded", "payouts_not_allowed", "postal_code_invalid", "processing_error", "product_inactive", "progressive_onboarding_limit_exceeded", "rate_limit", "refer_to_customer", "refund_disputed_payment", "resource_already_exists", "resource_missing", "return_intent_already_processed", "routing_number_invalid", "secret_key_required", "setup_attempt_failed", "setup_intent_authentication_failure", "setup_intent_invalid_parameter", "setup_intent_mandate_invalid", "setup_intent_setup_attempt_expired", "setup_intent_unexpected_state", "shipping_calculation_failed", "sku_inactive", "status_transition_invalid", "tax_id_invalid", "taxes_calculation_failed", "testmode_charges_only", "tls_version_unsupported", "token_already_used", "token_in_use", "transfer_source_balance_parameters_mismatch", "transfers_not_allowed", "url_invalid"];
                                readonly description: "`account_closed` `account_information_mismatch` `account_invalid` `account_number_invalid` `amount_too_large` `amount_too_small` `api_key_expired` `authentication_required` `balance_insufficient` `account_bad_routing_numbers` `account_declined` `account_exists` `account_restricted` `account_unusable` `account_unverified` `billing_invalid_mandate` `capture_charge_authorization_expired` `capture_unauthorized_payment` `charge_already_captured` `charge_already_refunded` `charge_disputed` `charge_exceeds_source_limit` `charge_expired_for_capture` `charge_invalid_parameter` `charge_not_refundable` `clearing_code_unsupported` `country_code_invalid` `country_unsupported` `coupon_expired` `customer_max_payment_methods` `customer_max_subscriptions` `debit_not_authorized` `email_invalid` `expired_card` `idempotency_key_in_use` `incorrect_address` `incorrect_number` `insufficient_funds` `intent_invalid_state` `intent_verification_method_missing` `invalid_characters` `invalid_charge_amount` `invalid_source_usage` `invoice_no_customer_line_items` `invoice_no_payment_method_types` `invoice_no_subscription_line_items` `invoice_not_editable` `invoice_on_behalf_of_not_editable` `invoice_payment_intent_requires_action` `invoice_upcoming_none` `livemode_mismatch` `lock_timeout` `missing` `no_account` `parameter_invalid_empty` `parameter_invalid_integer` `parameter_invalid_string_blank` `parameter_invalid_string_empty` `parameter_missing` `parameter_unknown` `parameters_exclusive` `payment_intent_action_required` `payment_intent_authentication_failure` `payment_intent_incompatible_payment_method` `payment_intent_invalid_parameter` `payment_intent_mandate_invalid` `payment_intent_payment_attempt_expired` `payment_intent_payment_attempt_failed` `payment_intent_unexpected_state` `payment_method_billing_details_address_missing` `payment_method_configuration_failures` `payment_method_currency_mismatch` `payment_method_customer_decline` `payment_method_invalid_parameter` `payment_method_invalid_parameter_testmode` `payment_method_not_available` `payment_method_provider_decline` `payment_method_provider_timeout` `payment_method_unactivated` `payment_method_unexpected_state` `payment_method_unsupported_type` `payout_reconciliation_not_ready` `payouts_limit_exceeded` `payouts_not_allowed` `postal_code_invalid` `processing_error` `product_inactive` `progressive_onboarding_limit_exceeded` `rate_limit` `refer_to_customer` `refund_disputed_payment` `resource_already_exists` `resource_missing` `return_intent_already_processed` `routing_number_invalid` `secret_key_required` `setup_attempt_failed` `setup_intent_authentication_failure` `setup_intent_invalid_parameter` `setup_intent_mandate_invalid` `setup_intent_setup_attempt_expired` `setup_intent_unexpected_state` `shipping_calculation_failed` `sku_inactive` `status_transition_invalid` `tax_id_invalid` `taxes_calculation_failed` `testmode_charges_only` `tls_version_unsupported` `token_already_used` `token_in_use` `transfer_source_balance_parameters_mismatch` `transfers_not_allowed` `url_invalid`";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["api_error", "card_error", "idempotency_error", "invalid_request_error", "chain_error", "unknown"];
                                readonly description: "`api_error` `card_error` `idempotency_error` `invalid_request_error` `chain_error` `unknown`";
                            };
                            readonly declineCode: {
                                readonly type: "string";
                            };
                            readonly paymentIntentId: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                            };
                            readonly paymentMethodType: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                            readonly docUrl: {
                                readonly type: "string";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"];
                                readonly description: "`requires_payment_method` `requires_confirmation` `requires_action` `processing` `requires_capture` `canceled` `succeeded`";
                            };
                        };
                        readonly required: readonly ["id", "type", "status"];
                    };
                };
                readonly taxRateIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
            };
            readonly required: readonly ["id", "organizationId", "customerId", "customer", "autoAdvance", "collectionMethod", "paymentSettingId", "paymentSetting", "status", "attempted", "paid", "lineItems", "url", "billingReason"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const InvoiceControllerUpdate: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly description: {
                readonly type: "string";
            };
            readonly customFields: {
                readonly type: "object";
                readonly properties: {
                    readonly fields: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly value: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["name", "value"];
                        };
                    };
                };
            };
            readonly dueDate: {
                readonly format: "date-time";
                readonly type: "string";
            };
            readonly footer: {
                readonly type: "string";
            };
            readonly metadata: {
                readonly type: "object";
                readonly additionalProperties: true;
            };
            readonly clientReferenceId: {
                readonly type: "string";
            };
            readonly visibility: {
                readonly type: "string";
                readonly enum: readonly [10, 20];
            };
            readonly allowPromotionCodes: {
                readonly type: "boolean";
                readonly description: "Enables user redeemable promotion codes.";
            };
            readonly lineItems: {
                readonly type: "object";
                readonly properties: {
                    readonly data: {
                        readonly minItems: 1;
                        readonly description: "The line items to be used in checkout session";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly priceId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly description: "The id of the price to use in checkout session";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly priceData: {
                                    readonly description: "The price data to be created to use in checkout session";
                                    readonly type: "object";
                                    readonly required: readonly ["currency", "unitAmount"];
                                    readonly properties: {
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                            readonly description: "The currency symbol";
                                        };
                                        readonly interval: {
                                            readonly description: "The interval at which to bill for this price. Only required for subscriptions";
                                            readonly type: "string";
                                            readonly enum: readonly ["day", "week", "month", "year"];
                                        };
                                        readonly intervalCount: {
                                            readonly type: "number";
                                            readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                                            readonly examples: readonly [1];
                                        };
                                        readonly unitAmount: {
                                            readonly format: "int64";
                                            readonly type: "integer";
                                            readonly description: "The unit amount in 8 decimals, represented as a whole integer";
                                            readonly examples: readonly ["9223372036854775807"];
                                            readonly minimum: -9223372036854776000;
                                            readonly maximum: 9223372036854776000;
                                        };
                                        readonly productId: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                            readonly description: "The id of the product for which this price is associated";
                                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                        };
                                        readonly productData: {
                                            readonly description: "The product data to be created to link with this price";
                                            readonly type: "object";
                                            readonly required: readonly ["name"];
                                            readonly properties: {
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the product. Displayed on the checkout page";
                                                };
                                                readonly description: {
                                                    readonly type: "string";
                                                    readonly description: "The description of the product. Displayed on the checkout page";
                                                };
                                                readonly images: {
                                                    readonly maxItems: 8;
                                                    readonly description: "The url of product images. Displayed on the checkout page";
                                                    readonly type: "array";
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                                readonly unitLabel: {
                                                    readonly type: "string";
                                                    readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                                };
                                                readonly url: {
                                                    readonly type: "string";
                                                    readonly description: "The url of the product";
                                                };
                                                readonly metadata: {
                                                    readonly type: "object";
                                                    readonly description: "The metadata of the product";
                                                    readonly additionalProperties: true;
                                                };
                                                readonly visibility: {
                                                    readonly description: "The visibility of the product";
                                                    readonly type: "string";
                                                    readonly enum: readonly [10, 20];
                                                };
                                            };
                                        };
                                        readonly type: {
                                            readonly description: "The type of the price";
                                            readonly type: "string";
                                            readonly enum: readonly ["one_time", "recurring", "streaming"];
                                        };
                                    };
                                };
                                readonly quantity: {
                                    readonly type: "number";
                                    readonly default: 1;
                                    readonly description: "The quantity of the line item";
                                    readonly examples: readonly [1];
                                };
                                readonly periodStart: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly periodEnd: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly taxRateIds: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                    };
                };
                readonly required: readonly ["data"];
            };
            readonly paymentSetting: {
                readonly type: "object";
                readonly properties: {
                    readonly allowedChains: {
                        readonly description: "The list of chains allowed for the payment. If not provided, all chains supported by the organization are enabled.";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly chainId: {
                                    readonly type: "number";
                                    readonly examples: readonly [1];
                                };
                                readonly blacklistCurrencies: {
                                    readonly type: "array";
                                    readonly description: "The list of currencies to disable for the payment. Note: This field is only used for checkout session API atm.";
                                    readonly items: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                    };
                                    readonly examples: readonly ["usdc"];
                                };
                                readonly withdrawalAddress: {
                                    readonly type: "string";
                                    readonly description: "This is optional, default withdrawal address configured in dashboard under settings > payment methods is used. The custom withdrawal address to use for this chain instead of stored default withdrawal address.";
                                };
                                readonly withdrawalAddresses: {
                                    readonly description: "The list of withdrawal addresses to split the payment. If provided, the sum of all split percentages should be 100.";
                                    readonly minItems: 2;
                                    readonly maxItems: 4;
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly splitPercentage: {
                                                readonly type: "number";
                                                readonly minimum: 0;
                                                readonly maximum: 100;
                                                readonly examples: readonly [1];
                                            };
                                            readonly address: {
                                                readonly type: "string";
                                                readonly description: "The withdrawal address for the split percentage";
                                            };
                                        };
                                        readonly required: readonly ["splitPercentage", "address"];
                                    };
                                };
                            };
                            readonly required: readonly ["chainId"];
                        };
                    };
                    readonly preferredChainId: {
                        readonly type: "number";
                        readonly description: "The preferred chain's id";
                        readonly examples: readonly [1];
                    };
                    readonly preferredCurrency: {
                        readonly type: "string";
                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                        readonly description: "The preferred currency for payment";
                    };
                    readonly allowSwap: {
                        readonly type: "boolean";
                        readonly description: "Whether the user can swap the payment currency";
                        readonly default: false;
                    };
                };
            };
            readonly taxRateIds: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly total: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly subTotal: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly customer: {
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Customer's id";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's created at";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's updated at";
                        };
                        readonly customerReferenceId: {
                            readonly type: "string";
                            readonly description: "Customer's reference id";
                        };
                        readonly shipping: {
                            readonly description: "Customer's shipping address";
                            readonly type: "object";
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name";
                                };
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The email";
                                };
                                readonly phone: {
                                    readonly type: "string";
                                    readonly description: "The phone";
                                };
                                readonly organizationName: {
                                    readonly type: "string";
                                    readonly description: "The organization name";
                                };
                                readonly address: {
                                    readonly description: "The address";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly line1: {
                                            readonly type: "string";
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                        };
                                        readonly postalCode: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly taxIds: {
                            readonly type: "object";
                            readonly properties: {
                                readonly object: {
                                    readonly type: "string";
                                };
                                readonly data: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                            readonly customerId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                        };
                                        readonly required: readonly ["id", "customerId"];
                                    };
                                };
                            };
                        };
                        readonly visibility: {
                            readonly description: "Customer's visibility. If Dashboard then displayed on dashboard UI. If API then only returned in API response only.\n\n`10` `20`";
                            readonly type: "string";
                            readonly enum: readonly [10, 20];
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "Customer's metadata";
                            readonly additionalProperties: true;
                        };
                        readonly customerNumber: {
                            readonly type: "string";
                            readonly description: "Customer number assigned by the system";
                        };
                    };
                    readonly required: readonly ["id", "customerNumber"];
                };
                readonly autoAdvance: {
                    readonly type: "boolean";
                };
                readonly collectionMethod: {
                    readonly type: "string";
                    readonly enum: readonly ["charge_automatically", "send_invoice"];
                    readonly description: "`charge_automatically` `send_invoice`";
                };
                readonly invoiceType: {
                    readonly type: "string";
                    readonly enum: readonly ["one_time", "recurring"];
                    readonly description: "`one_time` `recurring`";
                };
                readonly customFields: {
                    readonly type: "object";
                    readonly properties: {
                        readonly fields: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly value: {
                                        readonly type: "string";
                                    };
                                };
                                readonly required: readonly ["name", "value"];
                            };
                        };
                    };
                };
                readonly paymentSettingId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly paymentSetting: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly description: "A list of the types of payment methods";
                            readonly minItems: 1;
                            readonly maxItems: 1;
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                            readonly examples: readonly ["wallet"];
                        };
                        readonly allowedChains: {
                            readonly description: "The list of chains allowed for the payment. If not provided, all chains supported by the organization are enabled.";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly chainId: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly blacklistCurrencies: {
                                        readonly type: "array";
                                        readonly description: "The list of currencies to disable for the payment. Note: This field is only used for checkout session API atm.";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                        };
                                        readonly examples: readonly ["usdc"];
                                    };
                                    readonly withdrawalAddress: {
                                        readonly type: "string";
                                        readonly description: "This is optional, default withdrawal address configured in dashboard under settings > payment methods is used. The custom withdrawal address to use for this chain instead of stored default withdrawal address.";
                                    };
                                    readonly withdrawalAddresses: {
                                        readonly description: "The list of withdrawal addresses to split the payment. If provided, the sum of all split percentages should be 100.";
                                        readonly minItems: 2;
                                        readonly maxItems: 4;
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly splitPercentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly examples: readonly [1];
                                                };
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "The withdrawal address for the split percentage";
                                                };
                                            };
                                            readonly required: readonly ["splitPercentage", "address"];
                                        };
                                    };
                                };
                                readonly required: readonly ["chainId"];
                            };
                        };
                        readonly allowedCurrencies: {
                            readonly type: "array";
                            readonly description: "The list of currencies allowed for the payment.";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                            };
                            readonly examples: readonly ["usdc", "usdt"];
                        };
                        readonly preferredChainId: {
                            readonly type: "number";
                            readonly description: "The preferred chain's id";
                            readonly examples: readonly [1];
                        };
                        readonly preferredCurrency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                            readonly description: "The preferred currency for payment\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                        };
                        readonly allowSwap: {
                            readonly type: "boolean";
                            readonly description: "Whether the user can swap the payment currency";
                            readonly default: false;
                        };
                        readonly applyFee: {
                            readonly type: "boolean";
                            readonly description: "Whether add a application fee to the user payment";
                            readonly default: false;
                        };
                        readonly feePercentage: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly maximum: 100;
                            readonly description: "Percent that will be added to subtotal as a fee";
                            readonly examples: readonly [1];
                        };
                        readonly applyGasFee: {
                            readonly type: "boolean";
                            readonly description: "Whether add a transaction fee to the user payment";
                            readonly default: false;
                        };
                        readonly allowSplitPayments: {
                            readonly type: "boolean";
                            readonly description: "Whether the user can split the payment";
                        };
                        readonly slippagePercentage: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly maximum: 100;
                            readonly description: "The slippage percentage allowed for swaps and withdrawals";
                            readonly default: 10;
                            readonly examples: readonly [1];
                        };
                    };
                    readonly required: readonly ["id", "feePercentage"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["draft", "open", "paid", "void", "uncollectible"];
                    readonly description: "`draft` `open` `paid` `void` `uncollectible`";
                };
                readonly attempted: {
                    readonly type: "boolean";
                };
                readonly attemptCount: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly nextPaymentAttempt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly dueDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly footer: {
                    readonly type: "string";
                };
                readonly fromInvoiceId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly latestRevisionId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly invoicePdfUrl: {
                    readonly type: "string";
                };
                readonly invoiceNumber: {
                    readonly type: "string";
                };
                readonly paid: {
                    readonly type: "boolean";
                };
                readonly paidOutOfBand: {
                    readonly type: "boolean";
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly clientReferenceId: {
                    readonly type: "string";
                };
                readonly lineItems: {
                    readonly type: "object";
                    readonly properties: {
                        readonly object: {
                            readonly type: "string";
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly description: {
                                        readonly type: "string";
                                    };
                                    readonly periodStart: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly periodEnd: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly quantity: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly price: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly billingScheme: {
                                                readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                                                readonly type: "string";
                                                readonly enum: readonly ["per_unit"];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                                readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                            };
                                            readonly productId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "Product's id";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                            readonly interval: {
                                                readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                                                readonly type: "string";
                                                readonly enum: readonly ["day", "week", "month", "year"];
                                            };
                                            readonly intervalCount: {
                                                readonly type: "number";
                                                readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                                                readonly examples: readonly [1];
                                            };
                                            readonly isActive: {
                                                readonly type: "boolean";
                                                readonly description: "Whether the price is currently active";
                                            };
                                            readonly usageType: {
                                                readonly description: "The usage type of the price.\n\n`licensed`";
                                                readonly type: "string";
                                                readonly enum: readonly ["licensed"];
                                            };
                                            readonly type: {
                                                readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                                                readonly type: "string";
                                                readonly enum: readonly ["one_time", "recurring", "streaming"];
                                            };
                                            readonly unitAmount: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly unitAmountDecimal: {
                                                readonly type: "string";
                                            };
                                            readonly customUnitMax: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitMin: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customPreset: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitAmountSuggestions: {
                                                readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                            readonly product: {
                                                readonly description: "The product this price belongs to";
                                                readonly type: "object";
                                                readonly required: readonly ["id", "name"];
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                    };
                                                    readonly createdAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly updatedAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the product. Displayed on the checkout page";
                                                    };
                                                    readonly description: {
                                                        readonly type: "string";
                                                        readonly description: "The description of the product. Displayed on the checkout page";
                                                    };
                                                    readonly isActive: {
                                                        readonly type: "boolean";
                                                        readonly description: "Whether the product is currently active";
                                                    };
                                                    readonly images: {
                                                        readonly maxItems: 8;
                                                        readonly description: "The url of product images. Displayed on the checkout page";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly publicImages: {
                                                        readonly description: "Product images with absolute public url";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly unitLabel: {
                                                        readonly type: "string";
                                                        readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                                    };
                                                    readonly url: {
                                                        readonly type: "string";
                                                        readonly description: "The url of the product";
                                                    };
                                                    readonly defaultPriceId: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Product's default price id";
                                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                    };
                                                    readonly metadata: {
                                                        readonly type: "object";
                                                        readonly description: "The metadata of the product";
                                                        readonly additionalProperties: true;
                                                    };
                                                    readonly visibility: {
                                                        readonly description: "The visibility of the product\n\n`10` `20`";
                                                        readonly type: "string";
                                                        readonly enum: readonly [10, 20];
                                                    };
                                                };
                                            };
                                            readonly metadata: {
                                                readonly type: "object";
                                                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                                readonly additionalProperties: true;
                                            };
                                            readonly visibility: {
                                                readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                                                readonly type: "string";
                                                readonly enum: readonly [10, 20];
                                            };
                                        };
                                        readonly required: readonly ["id", "currency", "productId", "type", "product"];
                                    };
                                    readonly taxRates: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the tax rate.";
                                                };
                                                readonly description: {
                                                    readonly type: "string";
                                                    readonly description: "The description of the tax rate.";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                    readonly description: "The country of the tax rate.";
                                                };
                                                readonly percentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly description: "Percent that will be added to subtotal as a tax.";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly type: {
                                                    readonly description: "The type of the tax rate.\n\n`exclusive` `inclusive`";
                                                    readonly type: "string";
                                                    readonly enum: readonly ["exclusive", "inclusive"];
                                                };
                                                readonly isDefault: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                            readonly required: readonly ["id", "name", "percentage", "type", "isDefault"];
                                        };
                                    };
                                    readonly amountTotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountSubtotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountTax: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                };
                                readonly required: readonly ["price"];
                            };
                        };
                    };
                };
                readonly finalizedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly paidAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly markedUncollectibleAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly visibility: {
                    readonly type: "string";
                    readonly enum: readonly [10, 20];
                    readonly description: "`10` `20`";
                };
                readonly paymentIntentId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "The URL to redirect the customer to pay invoice";
                };
                readonly subscriptionId: {
                    readonly type: "string";
                };
                readonly periodStart: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly periodEnd: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly billingReason: {
                    readonly type: "string";
                    readonly enum: readonly ["subscription_cycle", "subscription_create", "subscription_update", "subscription", "manual", "upcoming", "subscription_threshold"];
                    readonly description: "`subscription_cycle` `subscription_create` `subscription_update` `subscription` `manual` `upcoming` `subscription_threshold`";
                };
                readonly allowPromotionCodes: {
                    readonly type: "boolean";
                    readonly description: "Enables user redeemable promotion codes.";
                };
                readonly finalizeScheduleAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "The date on which invoice will be finalize and send";
                };
                readonly totalTax: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly paymentIntent: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly organizationId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly amount: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountReceived: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"];
                            readonly description: "`requires_payment_method` `requires_confirmation` `requires_action` `processing` `requires_capture` `canceled` `succeeded`";
                        };
                        readonly paymentMethodId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly description: {
                            readonly type: "string";
                        };
                        readonly paymentMethod: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly assetId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly asset: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "Asset id";
                                        };
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "Asset name";
                                        };
                                        readonly chainId: {
                                            readonly type: "number";
                                            readonly description: "Asset chain id";
                                            readonly examples: readonly [1];
                                        };
                                        readonly address: {
                                            readonly type: "string";
                                            readonly description: "Asset address on chain";
                                        };
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                            readonly description: "Asset currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                        };
                                        readonly symbol: {
                                            readonly type: "string";
                                            readonly description: "Asset symbol";
                                        };
                                        readonly decimals: {
                                            readonly type: "number";
                                            readonly description: "Asset decimals in which it is represented on chain";
                                            readonly examples: readonly [1];
                                        };
                                        readonly coingeckoId: {
                                            readonly type: "string";
                                            readonly description: "Asset coingecko id";
                                        };
                                        readonly superToken: {
                                            readonly description: "SuperToken data";
                                            readonly type: "object";
                                            readonly required: readonly ["address", "decimals", "symbol"];
                                            readonly properties: {
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's address";
                                                };
                                                readonly decimals: {
                                                    readonly type: "number";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly symbol: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's symbol";
                                                };
                                            };
                                        };
                                        readonly isEIP5827Supported: {
                                            readonly type: "boolean";
                                            readonly description: "Is EIP5827 supported";
                                        };
                                    };
                                    readonly required: readonly ["id", "name", "chainId", "address", "currency", "symbol", "decimals", "isEIP5827Supported"];
                                };
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                    readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                                };
                                readonly accountAddress: {
                                    readonly type: "string";
                                };
                                readonly billingDetails: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "The name";
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                            readonly description: "The email";
                                        };
                                        readonly phone: {
                                            readonly type: "string";
                                            readonly description: "The phone";
                                        };
                                        readonly organizationName: {
                                            readonly type: "string";
                                            readonly description: "The organization name";
                                        };
                                        readonly address: {
                                            readonly description: "The address";
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly line1: {
                                                    readonly type: "string";
                                                };
                                                readonly line2: {
                                                    readonly type: "string";
                                                };
                                                readonly city: {
                                                    readonly type: "string";
                                                };
                                                readonly state: {
                                                    readonly type: "string";
                                                };
                                                readonly postalCode: {
                                                    readonly type: "string";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly customerId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                };
                            };
                            readonly required: readonly ["id", "assetId", "asset", "type"];
                        };
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                        };
                        readonly transferAccountAddress: {
                            readonly type: "string";
                        };
                        readonly transactions: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly description: "Transaction type\n\n`incoming` `outgoing` `event` `transfer`";
                                        readonly type: "string";
                                        readonly enum: readonly ["incoming", "outgoing", "event", "transfer"];
                                    };
                                    readonly transactionRelayId: {
                                        readonly type: "string";
                                        readonly description: "Transaction relay id";
                                    };
                                    readonly transactionHash: {
                                        readonly type: "string";
                                        readonly description: "Transaction hash";
                                    };
                                    readonly nonce: {
                                        readonly type: "number";
                                        readonly description: "Transaction nonce";
                                        readonly examples: readonly [1];
                                    };
                                    readonly gasLimit: {
                                        readonly type: "number";
                                        readonly description: "Transaction gas limit used in payment";
                                        readonly examples: readonly [1];
                                    };
                                    readonly validUntil: {
                                        readonly type: "string";
                                        readonly description: "Transaction valid until";
                                    };
                                    readonly fromAddress: {
                                        readonly type: "string";
                                        readonly description: "Transaction from address";
                                    };
                                    readonly toAddress: {
                                        readonly type: "string";
                                        readonly description: "Transaction to address";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "Transaction currency\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                        readonly description: "Transaction created at";
                                    };
                                    readonly amount: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "Transaction amount in 8 decimals";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountRaw: {
                                        readonly type: "string";
                                        readonly description: "Transaction amount raw received from alchemy";
                                    };
                                    readonly assetId: {
                                        readonly type: "string";
                                        readonly description: "Transaction asset id";
                                    };
                                    readonly asset: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly address: {
                                                readonly type: "string";
                                            };
                                            readonly chainId: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                            };
                                            readonly symbol: {
                                                readonly type: "string";
                                            };
                                            readonly decimals: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly coingeckoId: {
                                                readonly type: "string";
                                            };
                                            readonly isPublic: {
                                                readonly type: "boolean";
                                            };
                                            readonly superToken: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly address: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's address";
                                                    };
                                                    readonly decimals: {
                                                        readonly type: "number";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly symbol: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's symbol";
                                                    };
                                                };
                                                readonly required: readonly ["address", "decimals", "symbol"];
                                            };
                                            readonly chain: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "number";
                                                        readonly description: "Chain id";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "Chain name";
                                                    };
                                                    readonly icon: {
                                                        readonly type: "string";
                                                        readonly description: "Chain icon";
                                                    };
                                                    readonly currency: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                        readonly description: "Chain currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                                    };
                                                    readonly blockExplorerTransactionUrl: {
                                                        readonly type: "string";
                                                        readonly description: "Chain block explorer transaction url";
                                                    };
                                                    readonly blockExplorerName: {
                                                        readonly type: "string";
                                                        readonly description: "Chain block explorer name";
                                                    };
                                                    readonly type: {
                                                        readonly description: "Chain type\n\n`evm` `solana` `tron` `stripe` `binance_pay`";
                                                        readonly type: "string";
                                                        readonly enum: readonly ["evm", "solana", "tron", "stripe", "binance_pay"];
                                                    };
                                                    readonly isBeta: {
                                                        readonly type: "boolean";
                                                        readonly description: "Is beta asset";
                                                    };
                                                };
                                                readonly required: readonly ["id", "name", "icon", "currency", "blockExplorerTransactionUrl", "blockExplorerName", "type", "isBeta"];
                                            };
                                        };
                                        readonly required: readonly ["id", "name", "address", "chainId", "currency", "symbol", "decimals", "isPublic", "chain"];
                                    };
                                    readonly transactionUrl: {
                                        readonly type: "string";
                                        readonly description: "Transaction url";
                                    };
                                };
                                readonly required: readonly ["type", "fromAddress", "toAddress", "currency", "amountRaw", "assetId", "asset"];
                            };
                        };
                        readonly paymentReceipt: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly organizationId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly paymentIntentId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly receiptNumber: {
                                    readonly type: "string";
                                };
                                readonly uri: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["id", "organizationId", "paymentIntentId", "receiptNumber"];
                        };
                        readonly canceledAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly cancellationReason: {
                            readonly type: "string";
                        };
                        readonly stripe: {
                            readonly type: "object";
                            readonly properties: {
                                readonly paymentIntentId: {
                                    readonly type: "string";
                                };
                                readonly receiptUrl: {
                                    readonly type: "string";
                                };
                                readonly cardLast4: {
                                    readonly type: "string";
                                };
                                readonly displayName: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly isMarkRefunded: {
                            readonly type: "boolean";
                        };
                        readonly markRefundedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly markRefundedComment: {
                            readonly type: "string";
                        };
                    };
                    readonly required: readonly ["id", "organizationId", "status", "paymentMethodId", "transactions"];
                };
                readonly paymentIntentAttempt: {
                    readonly description: "The payment intent associated with the session. Payment intent is created when the session is created.";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly errorCode: {
                                readonly type: "string";
                                readonly enum: readonly ["account_closed", "account_information_mismatch", "account_invalid", "account_number_invalid", "amount_too_large", "amount_too_small", "api_key_expired", "authentication_required", "balance_insufficient", "account_bad_routing_numbers", "account_declined", "account_exists", "account_restricted", "account_unusable", "account_unverified", "billing_invalid_mandate", "capture_charge_authorization_expired", "capture_unauthorized_payment", "charge_already_captured", "charge_already_refunded", "charge_disputed", "charge_exceeds_source_limit", "charge_expired_for_capture", "charge_invalid_parameter", "charge_not_refundable", "clearing_code_unsupported", "country_code_invalid", "country_unsupported", "coupon_expired", "customer_max_payment_methods", "customer_max_subscriptions", "debit_not_authorized", "email_invalid", "expired_card", "idempotency_key_in_use", "incorrect_address", "incorrect_number", "insufficient_funds", "intent_invalid_state", "intent_verification_method_missing", "invalid_characters", "invalid_charge_amount", "invalid_source_usage", "invoice_no_customer_line_items", "invoice_no_payment_method_types", "invoice_no_subscription_line_items", "invoice_not_editable", "invoice_on_behalf_of_not_editable", "invoice_payment_intent_requires_action", "invoice_upcoming_none", "livemode_mismatch", "lock_timeout", "missing", "no_account", "parameter_invalid_empty", "parameter_invalid_integer", "parameter_invalid_string_blank", "parameter_invalid_string_empty", "parameter_missing", "parameter_unknown", "parameters_exclusive", "payment_intent_action_required", "payment_intent_authentication_failure", "payment_intent_incompatible_payment_method", "payment_intent_invalid_parameter", "payment_intent_mandate_invalid", "payment_intent_payment_attempt_expired", "payment_intent_payment_attempt_failed", "payment_intent_unexpected_state", "payment_method_billing_details_address_missing", "payment_method_configuration_failures", "payment_method_currency_mismatch", "payment_method_customer_decline", "payment_method_invalid_parameter", "payment_method_invalid_parameter_testmode", "payment_method_not_available", "payment_method_provider_decline", "payment_method_provider_timeout", "payment_method_unactivated", "payment_method_unexpected_state", "payment_method_unsupported_type", "payout_reconciliation_not_ready", "payouts_limit_exceeded", "payouts_not_allowed", "postal_code_invalid", "processing_error", "product_inactive", "progressive_onboarding_limit_exceeded", "rate_limit", "refer_to_customer", "refund_disputed_payment", "resource_already_exists", "resource_missing", "return_intent_already_processed", "routing_number_invalid", "secret_key_required", "setup_attempt_failed", "setup_intent_authentication_failure", "setup_intent_invalid_parameter", "setup_intent_mandate_invalid", "setup_intent_setup_attempt_expired", "setup_intent_unexpected_state", "shipping_calculation_failed", "sku_inactive", "status_transition_invalid", "tax_id_invalid", "taxes_calculation_failed", "testmode_charges_only", "tls_version_unsupported", "token_already_used", "token_in_use", "transfer_source_balance_parameters_mismatch", "transfers_not_allowed", "url_invalid"];
                                readonly description: "`account_closed` `account_information_mismatch` `account_invalid` `account_number_invalid` `amount_too_large` `amount_too_small` `api_key_expired` `authentication_required` `balance_insufficient` `account_bad_routing_numbers` `account_declined` `account_exists` `account_restricted` `account_unusable` `account_unverified` `billing_invalid_mandate` `capture_charge_authorization_expired` `capture_unauthorized_payment` `charge_already_captured` `charge_already_refunded` `charge_disputed` `charge_exceeds_source_limit` `charge_expired_for_capture` `charge_invalid_parameter` `charge_not_refundable` `clearing_code_unsupported` `country_code_invalid` `country_unsupported` `coupon_expired` `customer_max_payment_methods` `customer_max_subscriptions` `debit_not_authorized` `email_invalid` `expired_card` `idempotency_key_in_use` `incorrect_address` `incorrect_number` `insufficient_funds` `intent_invalid_state` `intent_verification_method_missing` `invalid_characters` `invalid_charge_amount` `invalid_source_usage` `invoice_no_customer_line_items` `invoice_no_payment_method_types` `invoice_no_subscription_line_items` `invoice_not_editable` `invoice_on_behalf_of_not_editable` `invoice_payment_intent_requires_action` `invoice_upcoming_none` `livemode_mismatch` `lock_timeout` `missing` `no_account` `parameter_invalid_empty` `parameter_invalid_integer` `parameter_invalid_string_blank` `parameter_invalid_string_empty` `parameter_missing` `parameter_unknown` `parameters_exclusive` `payment_intent_action_required` `payment_intent_authentication_failure` `payment_intent_incompatible_payment_method` `payment_intent_invalid_parameter` `payment_intent_mandate_invalid` `payment_intent_payment_attempt_expired` `payment_intent_payment_attempt_failed` `payment_intent_unexpected_state` `payment_method_billing_details_address_missing` `payment_method_configuration_failures` `payment_method_currency_mismatch` `payment_method_customer_decline` `payment_method_invalid_parameter` `payment_method_invalid_parameter_testmode` `payment_method_not_available` `payment_method_provider_decline` `payment_method_provider_timeout` `payment_method_unactivated` `payment_method_unexpected_state` `payment_method_unsupported_type` `payout_reconciliation_not_ready` `payouts_limit_exceeded` `payouts_not_allowed` `postal_code_invalid` `processing_error` `product_inactive` `progressive_onboarding_limit_exceeded` `rate_limit` `refer_to_customer` `refund_disputed_payment` `resource_already_exists` `resource_missing` `return_intent_already_processed` `routing_number_invalid` `secret_key_required` `setup_attempt_failed` `setup_intent_authentication_failure` `setup_intent_invalid_parameter` `setup_intent_mandate_invalid` `setup_intent_setup_attempt_expired` `setup_intent_unexpected_state` `shipping_calculation_failed` `sku_inactive` `status_transition_invalid` `tax_id_invalid` `taxes_calculation_failed` `testmode_charges_only` `tls_version_unsupported` `token_already_used` `token_in_use` `transfer_source_balance_parameters_mismatch` `transfers_not_allowed` `url_invalid`";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["api_error", "card_error", "idempotency_error", "invalid_request_error", "chain_error", "unknown"];
                                readonly description: "`api_error` `card_error` `idempotency_error` `invalid_request_error` `chain_error` `unknown`";
                            };
                            readonly declineCode: {
                                readonly type: "string";
                            };
                            readonly paymentIntentId: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                            };
                            readonly paymentMethodType: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                            readonly docUrl: {
                                readonly type: "string";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"];
                                readonly description: "`requires_payment_method` `requires_confirmation` `requires_action` `processing` `requires_capture` `canceled` `succeeded`";
                            };
                        };
                        readonly required: readonly ["id", "type", "status"];
                    };
                };
                readonly taxRateIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
            };
            readonly required: readonly ["id", "organizationId", "customerId", "customer", "autoAdvance", "collectionMethod", "paymentSettingId", "paymentSetting", "status", "attempted", "paid", "lineItems", "url", "billingReason"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const InvoiceControllerVoidInvoice: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly total: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly subTotal: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly customer: {
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Customer's id";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's created at";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's updated at";
                        };
                        readonly customerReferenceId: {
                            readonly type: "string";
                            readonly description: "Customer's reference id";
                        };
                        readonly shipping: {
                            readonly description: "Customer's shipping address";
                            readonly type: "object";
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name";
                                };
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The email";
                                };
                                readonly phone: {
                                    readonly type: "string";
                                    readonly description: "The phone";
                                };
                                readonly organizationName: {
                                    readonly type: "string";
                                    readonly description: "The organization name";
                                };
                                readonly address: {
                                    readonly description: "The address";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly line1: {
                                            readonly type: "string";
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                        };
                                        readonly postalCode: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly taxIds: {
                            readonly type: "object";
                            readonly properties: {
                                readonly object: {
                                    readonly type: "string";
                                };
                                readonly data: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                            readonly customerId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                        };
                                        readonly required: readonly ["id", "customerId"];
                                    };
                                };
                            };
                        };
                        readonly visibility: {
                            readonly description: "Customer's visibility. If Dashboard then displayed on dashboard UI. If API then only returned in API response only.\n\n`10` `20`";
                            readonly type: "string";
                            readonly enum: readonly [10, 20];
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "Customer's metadata";
                            readonly additionalProperties: true;
                        };
                        readonly customerNumber: {
                            readonly type: "string";
                            readonly description: "Customer number assigned by the system";
                        };
                    };
                    readonly required: readonly ["id", "customerNumber"];
                };
                readonly autoAdvance: {
                    readonly type: "boolean";
                };
                readonly collectionMethod: {
                    readonly type: "string";
                    readonly enum: readonly ["charge_automatically", "send_invoice"];
                    readonly description: "`charge_automatically` `send_invoice`";
                };
                readonly invoiceType: {
                    readonly type: "string";
                    readonly enum: readonly ["one_time", "recurring"];
                    readonly description: "`one_time` `recurring`";
                };
                readonly customFields: {
                    readonly type: "object";
                    readonly properties: {
                        readonly fields: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly value: {
                                        readonly type: "string";
                                    };
                                };
                                readonly required: readonly ["name", "value"];
                            };
                        };
                    };
                };
                readonly paymentSettingId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly paymentSetting: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly description: "A list of the types of payment methods";
                            readonly minItems: 1;
                            readonly maxItems: 1;
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                            readonly examples: readonly ["wallet"];
                        };
                        readonly allowedChains: {
                            readonly description: "The list of chains allowed for the payment. If not provided, all chains supported by the organization are enabled.";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly chainId: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly blacklistCurrencies: {
                                        readonly type: "array";
                                        readonly description: "The list of currencies to disable for the payment. Note: This field is only used for checkout session API atm.";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                        };
                                        readonly examples: readonly ["usdc"];
                                    };
                                    readonly withdrawalAddress: {
                                        readonly type: "string";
                                        readonly description: "This is optional, default withdrawal address configured in dashboard under settings > payment methods is used. The custom withdrawal address to use for this chain instead of stored default withdrawal address.";
                                    };
                                    readonly withdrawalAddresses: {
                                        readonly description: "The list of withdrawal addresses to split the payment. If provided, the sum of all split percentages should be 100.";
                                        readonly minItems: 2;
                                        readonly maxItems: 4;
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly splitPercentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly examples: readonly [1];
                                                };
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "The withdrawal address for the split percentage";
                                                };
                                            };
                                            readonly required: readonly ["splitPercentage", "address"];
                                        };
                                    };
                                };
                                readonly required: readonly ["chainId"];
                            };
                        };
                        readonly allowedCurrencies: {
                            readonly type: "array";
                            readonly description: "The list of currencies allowed for the payment.";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                            };
                            readonly examples: readonly ["usdc", "usdt"];
                        };
                        readonly preferredChainId: {
                            readonly type: "number";
                            readonly description: "The preferred chain's id";
                            readonly examples: readonly [1];
                        };
                        readonly preferredCurrency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                            readonly description: "The preferred currency for payment\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                        };
                        readonly allowSwap: {
                            readonly type: "boolean";
                            readonly description: "Whether the user can swap the payment currency";
                            readonly default: false;
                        };
                        readonly applyFee: {
                            readonly type: "boolean";
                            readonly description: "Whether add a application fee to the user payment";
                            readonly default: false;
                        };
                        readonly feePercentage: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly maximum: 100;
                            readonly description: "Percent that will be added to subtotal as a fee";
                            readonly examples: readonly [1];
                        };
                        readonly applyGasFee: {
                            readonly type: "boolean";
                            readonly description: "Whether add a transaction fee to the user payment";
                            readonly default: false;
                        };
                        readonly allowSplitPayments: {
                            readonly type: "boolean";
                            readonly description: "Whether the user can split the payment";
                        };
                        readonly slippagePercentage: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly maximum: 100;
                            readonly description: "The slippage percentage allowed for swaps and withdrawals";
                            readonly default: 10;
                            readonly examples: readonly [1];
                        };
                    };
                    readonly required: readonly ["id", "feePercentage"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["draft", "open", "paid", "void", "uncollectible"];
                    readonly description: "`draft` `open` `paid` `void` `uncollectible`";
                };
                readonly attempted: {
                    readonly type: "boolean";
                };
                readonly attemptCount: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly nextPaymentAttempt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly dueDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly footer: {
                    readonly type: "string";
                };
                readonly fromInvoiceId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly latestRevisionId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly invoicePdfUrl: {
                    readonly type: "string";
                };
                readonly invoiceNumber: {
                    readonly type: "string";
                };
                readonly paid: {
                    readonly type: "boolean";
                };
                readonly paidOutOfBand: {
                    readonly type: "boolean";
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly clientReferenceId: {
                    readonly type: "string";
                };
                readonly lineItems: {
                    readonly type: "object";
                    readonly properties: {
                        readonly object: {
                            readonly type: "string";
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly description: {
                                        readonly type: "string";
                                    };
                                    readonly periodStart: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly periodEnd: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly quantity: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly price: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly billingScheme: {
                                                readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                                                readonly type: "string";
                                                readonly enum: readonly ["per_unit"];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                                readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                            };
                                            readonly productId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "Product's id";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                            readonly interval: {
                                                readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                                                readonly type: "string";
                                                readonly enum: readonly ["day", "week", "month", "year"];
                                            };
                                            readonly intervalCount: {
                                                readonly type: "number";
                                                readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                                                readonly examples: readonly [1];
                                            };
                                            readonly isActive: {
                                                readonly type: "boolean";
                                                readonly description: "Whether the price is currently active";
                                            };
                                            readonly usageType: {
                                                readonly description: "The usage type of the price.\n\n`licensed`";
                                                readonly type: "string";
                                                readonly enum: readonly ["licensed"];
                                            };
                                            readonly type: {
                                                readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                                                readonly type: "string";
                                                readonly enum: readonly ["one_time", "recurring", "streaming"];
                                            };
                                            readonly unitAmount: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly unitAmountDecimal: {
                                                readonly type: "string";
                                            };
                                            readonly customUnitMax: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitMin: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customPreset: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitAmountSuggestions: {
                                                readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                            readonly product: {
                                                readonly description: "The product this price belongs to";
                                                readonly type: "object";
                                                readonly required: readonly ["id", "name"];
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                    };
                                                    readonly createdAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly updatedAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the product. Displayed on the checkout page";
                                                    };
                                                    readonly description: {
                                                        readonly type: "string";
                                                        readonly description: "The description of the product. Displayed on the checkout page";
                                                    };
                                                    readonly isActive: {
                                                        readonly type: "boolean";
                                                        readonly description: "Whether the product is currently active";
                                                    };
                                                    readonly images: {
                                                        readonly maxItems: 8;
                                                        readonly description: "The url of product images. Displayed on the checkout page";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly publicImages: {
                                                        readonly description: "Product images with absolute public url";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly unitLabel: {
                                                        readonly type: "string";
                                                        readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                                    };
                                                    readonly url: {
                                                        readonly type: "string";
                                                        readonly description: "The url of the product";
                                                    };
                                                    readonly defaultPriceId: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Product's default price id";
                                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                    };
                                                    readonly metadata: {
                                                        readonly type: "object";
                                                        readonly description: "The metadata of the product";
                                                        readonly additionalProperties: true;
                                                    };
                                                    readonly visibility: {
                                                        readonly description: "The visibility of the product\n\n`10` `20`";
                                                        readonly type: "string";
                                                        readonly enum: readonly [10, 20];
                                                    };
                                                };
                                            };
                                            readonly metadata: {
                                                readonly type: "object";
                                                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                                readonly additionalProperties: true;
                                            };
                                            readonly visibility: {
                                                readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                                                readonly type: "string";
                                                readonly enum: readonly [10, 20];
                                            };
                                        };
                                        readonly required: readonly ["id", "currency", "productId", "type", "product"];
                                    };
                                    readonly taxRates: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the tax rate.";
                                                };
                                                readonly description: {
                                                    readonly type: "string";
                                                    readonly description: "The description of the tax rate.";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                    readonly description: "The country of the tax rate.";
                                                };
                                                readonly percentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly description: "Percent that will be added to subtotal as a tax.";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly type: {
                                                    readonly description: "The type of the tax rate.\n\n`exclusive` `inclusive`";
                                                    readonly type: "string";
                                                    readonly enum: readonly ["exclusive", "inclusive"];
                                                };
                                                readonly isDefault: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                            readonly required: readonly ["id", "name", "percentage", "type", "isDefault"];
                                        };
                                    };
                                    readonly amountTotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountSubtotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountTax: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                };
                                readonly required: readonly ["price"];
                            };
                        };
                    };
                };
                readonly finalizedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly paidAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly markedUncollectibleAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly visibility: {
                    readonly type: "string";
                    readonly enum: readonly [10, 20];
                    readonly description: "`10` `20`";
                };
                readonly paymentIntentId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "The URL to redirect the customer to pay invoice";
                };
                readonly subscriptionId: {
                    readonly type: "string";
                };
                readonly periodStart: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly periodEnd: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly billingReason: {
                    readonly type: "string";
                    readonly enum: readonly ["subscription_cycle", "subscription_create", "subscription_update", "subscription", "manual", "upcoming", "subscription_threshold"];
                    readonly description: "`subscription_cycle` `subscription_create` `subscription_update` `subscription` `manual` `upcoming` `subscription_threshold`";
                };
                readonly allowPromotionCodes: {
                    readonly type: "boolean";
                    readonly description: "Enables user redeemable promotion codes.";
                };
                readonly finalizeScheduleAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "The date on which invoice will be finalize and send";
                };
                readonly totalTax: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly paymentIntent: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly organizationId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly amount: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountReceived: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"];
                            readonly description: "`requires_payment_method` `requires_confirmation` `requires_action` `processing` `requires_capture` `canceled` `succeeded`";
                        };
                        readonly paymentMethodId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly description: {
                            readonly type: "string";
                        };
                        readonly paymentMethod: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly assetId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly asset: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "Asset id";
                                        };
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "Asset name";
                                        };
                                        readonly chainId: {
                                            readonly type: "number";
                                            readonly description: "Asset chain id";
                                            readonly examples: readonly [1];
                                        };
                                        readonly address: {
                                            readonly type: "string";
                                            readonly description: "Asset address on chain";
                                        };
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                            readonly description: "Asset currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                        };
                                        readonly symbol: {
                                            readonly type: "string";
                                            readonly description: "Asset symbol";
                                        };
                                        readonly decimals: {
                                            readonly type: "number";
                                            readonly description: "Asset decimals in which it is represented on chain";
                                            readonly examples: readonly [1];
                                        };
                                        readonly coingeckoId: {
                                            readonly type: "string";
                                            readonly description: "Asset coingecko id";
                                        };
                                        readonly superToken: {
                                            readonly description: "SuperToken data";
                                            readonly type: "object";
                                            readonly required: readonly ["address", "decimals", "symbol"];
                                            readonly properties: {
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's address";
                                                };
                                                readonly decimals: {
                                                    readonly type: "number";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly symbol: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's symbol";
                                                };
                                            };
                                        };
                                        readonly isEIP5827Supported: {
                                            readonly type: "boolean";
                                            readonly description: "Is EIP5827 supported";
                                        };
                                    };
                                    readonly required: readonly ["id", "name", "chainId", "address", "currency", "symbol", "decimals", "isEIP5827Supported"];
                                };
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                    readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                                };
                                readonly accountAddress: {
                                    readonly type: "string";
                                };
                                readonly billingDetails: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "The name";
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                            readonly description: "The email";
                                        };
                                        readonly phone: {
                                            readonly type: "string";
                                            readonly description: "The phone";
                                        };
                                        readonly organizationName: {
                                            readonly type: "string";
                                            readonly description: "The organization name";
                                        };
                                        readonly address: {
                                            readonly description: "The address";
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly line1: {
                                                    readonly type: "string";
                                                };
                                                readonly line2: {
                                                    readonly type: "string";
                                                };
                                                readonly city: {
                                                    readonly type: "string";
                                                };
                                                readonly state: {
                                                    readonly type: "string";
                                                };
                                                readonly postalCode: {
                                                    readonly type: "string";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly customerId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                };
                            };
                            readonly required: readonly ["id", "assetId", "asset", "type"];
                        };
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                        };
                        readonly transferAccountAddress: {
                            readonly type: "string";
                        };
                        readonly transactions: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly description: "Transaction type\n\n`incoming` `outgoing` `event` `transfer`";
                                        readonly type: "string";
                                        readonly enum: readonly ["incoming", "outgoing", "event", "transfer"];
                                    };
                                    readonly transactionRelayId: {
                                        readonly type: "string";
                                        readonly description: "Transaction relay id";
                                    };
                                    readonly transactionHash: {
                                        readonly type: "string";
                                        readonly description: "Transaction hash";
                                    };
                                    readonly nonce: {
                                        readonly type: "number";
                                        readonly description: "Transaction nonce";
                                        readonly examples: readonly [1];
                                    };
                                    readonly gasLimit: {
                                        readonly type: "number";
                                        readonly description: "Transaction gas limit used in payment";
                                        readonly examples: readonly [1];
                                    };
                                    readonly validUntil: {
                                        readonly type: "string";
                                        readonly description: "Transaction valid until";
                                    };
                                    readonly fromAddress: {
                                        readonly type: "string";
                                        readonly description: "Transaction from address";
                                    };
                                    readonly toAddress: {
                                        readonly type: "string";
                                        readonly description: "Transaction to address";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "Transaction currency\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                        readonly description: "Transaction created at";
                                    };
                                    readonly amount: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "Transaction amount in 8 decimals";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountRaw: {
                                        readonly type: "string";
                                        readonly description: "Transaction amount raw received from alchemy";
                                    };
                                    readonly assetId: {
                                        readonly type: "string";
                                        readonly description: "Transaction asset id";
                                    };
                                    readonly asset: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly address: {
                                                readonly type: "string";
                                            };
                                            readonly chainId: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                            };
                                            readonly symbol: {
                                                readonly type: "string";
                                            };
                                            readonly decimals: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly coingeckoId: {
                                                readonly type: "string";
                                            };
                                            readonly isPublic: {
                                                readonly type: "boolean";
                                            };
                                            readonly superToken: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly address: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's address";
                                                    };
                                                    readonly decimals: {
                                                        readonly type: "number";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly symbol: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's symbol";
                                                    };
                                                };
                                                readonly required: readonly ["address", "decimals", "symbol"];
                                            };
                                            readonly chain: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "number";
                                                        readonly description: "Chain id";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "Chain name";
                                                    };
                                                    readonly icon: {
                                                        readonly type: "string";
                                                        readonly description: "Chain icon";
                                                    };
                                                    readonly currency: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                        readonly description: "Chain currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                                    };
                                                    readonly blockExplorerTransactionUrl: {
                                                        readonly type: "string";
                                                        readonly description: "Chain block explorer transaction url";
                                                    };
                                                    readonly blockExplorerName: {
                                                        readonly type: "string";
                                                        readonly description: "Chain block explorer name";
                                                    };
                                                    readonly type: {
                                                        readonly description: "Chain type\n\n`evm` `solana` `tron` `stripe` `binance_pay`";
                                                        readonly type: "string";
                                                        readonly enum: readonly ["evm", "solana", "tron", "stripe", "binance_pay"];
                                                    };
                                                    readonly isBeta: {
                                                        readonly type: "boolean";
                                                        readonly description: "Is beta asset";
                                                    };
                                                };
                                                readonly required: readonly ["id", "name", "icon", "currency", "blockExplorerTransactionUrl", "blockExplorerName", "type", "isBeta"];
                                            };
                                        };
                                        readonly required: readonly ["id", "name", "address", "chainId", "currency", "symbol", "decimals", "isPublic", "chain"];
                                    };
                                    readonly transactionUrl: {
                                        readonly type: "string";
                                        readonly description: "Transaction url";
                                    };
                                };
                                readonly required: readonly ["type", "fromAddress", "toAddress", "currency", "amountRaw", "assetId", "asset"];
                            };
                        };
                        readonly paymentReceipt: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly organizationId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly paymentIntentId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly receiptNumber: {
                                    readonly type: "string";
                                };
                                readonly uri: {
                                    readonly type: "string";
                                };
                            };
                            readonly required: readonly ["id", "organizationId", "paymentIntentId", "receiptNumber"];
                        };
                        readonly canceledAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly cancellationReason: {
                            readonly type: "string";
                        };
                        readonly stripe: {
                            readonly type: "object";
                            readonly properties: {
                                readonly paymentIntentId: {
                                    readonly type: "string";
                                };
                                readonly receiptUrl: {
                                    readonly type: "string";
                                };
                                readonly cardLast4: {
                                    readonly type: "string";
                                };
                                readonly displayName: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly isMarkRefunded: {
                            readonly type: "boolean";
                        };
                        readonly markRefundedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly markRefundedComment: {
                            readonly type: "string";
                        };
                    };
                    readonly required: readonly ["id", "organizationId", "status", "paymentMethodId", "transactions"];
                };
                readonly paymentIntentAttempt: {
                    readonly description: "The payment intent associated with the session. Payment intent is created when the session is created.";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly errorCode: {
                                readonly type: "string";
                                readonly enum: readonly ["account_closed", "account_information_mismatch", "account_invalid", "account_number_invalid", "amount_too_large", "amount_too_small", "api_key_expired", "authentication_required", "balance_insufficient", "account_bad_routing_numbers", "account_declined", "account_exists", "account_restricted", "account_unusable", "account_unverified", "billing_invalid_mandate", "capture_charge_authorization_expired", "capture_unauthorized_payment", "charge_already_captured", "charge_already_refunded", "charge_disputed", "charge_exceeds_source_limit", "charge_expired_for_capture", "charge_invalid_parameter", "charge_not_refundable", "clearing_code_unsupported", "country_code_invalid", "country_unsupported", "coupon_expired", "customer_max_payment_methods", "customer_max_subscriptions", "debit_not_authorized", "email_invalid", "expired_card", "idempotency_key_in_use", "incorrect_address", "incorrect_number", "insufficient_funds", "intent_invalid_state", "intent_verification_method_missing", "invalid_characters", "invalid_charge_amount", "invalid_source_usage", "invoice_no_customer_line_items", "invoice_no_payment_method_types", "invoice_no_subscription_line_items", "invoice_not_editable", "invoice_on_behalf_of_not_editable", "invoice_payment_intent_requires_action", "invoice_upcoming_none", "livemode_mismatch", "lock_timeout", "missing", "no_account", "parameter_invalid_empty", "parameter_invalid_integer", "parameter_invalid_string_blank", "parameter_invalid_string_empty", "parameter_missing", "parameter_unknown", "parameters_exclusive", "payment_intent_action_required", "payment_intent_authentication_failure", "payment_intent_incompatible_payment_method", "payment_intent_invalid_parameter", "payment_intent_mandate_invalid", "payment_intent_payment_attempt_expired", "payment_intent_payment_attempt_failed", "payment_intent_unexpected_state", "payment_method_billing_details_address_missing", "payment_method_configuration_failures", "payment_method_currency_mismatch", "payment_method_customer_decline", "payment_method_invalid_parameter", "payment_method_invalid_parameter_testmode", "payment_method_not_available", "payment_method_provider_decline", "payment_method_provider_timeout", "payment_method_unactivated", "payment_method_unexpected_state", "payment_method_unsupported_type", "payout_reconciliation_not_ready", "payouts_limit_exceeded", "payouts_not_allowed", "postal_code_invalid", "processing_error", "product_inactive", "progressive_onboarding_limit_exceeded", "rate_limit", "refer_to_customer", "refund_disputed_payment", "resource_already_exists", "resource_missing", "return_intent_already_processed", "routing_number_invalid", "secret_key_required", "setup_attempt_failed", "setup_intent_authentication_failure", "setup_intent_invalid_parameter", "setup_intent_mandate_invalid", "setup_intent_setup_attempt_expired", "setup_intent_unexpected_state", "shipping_calculation_failed", "sku_inactive", "status_transition_invalid", "tax_id_invalid", "taxes_calculation_failed", "testmode_charges_only", "tls_version_unsupported", "token_already_used", "token_in_use", "transfer_source_balance_parameters_mismatch", "transfers_not_allowed", "url_invalid"];
                                readonly description: "`account_closed` `account_information_mismatch` `account_invalid` `account_number_invalid` `amount_too_large` `amount_too_small` `api_key_expired` `authentication_required` `balance_insufficient` `account_bad_routing_numbers` `account_declined` `account_exists` `account_restricted` `account_unusable` `account_unverified` `billing_invalid_mandate` `capture_charge_authorization_expired` `capture_unauthorized_payment` `charge_already_captured` `charge_already_refunded` `charge_disputed` `charge_exceeds_source_limit` `charge_expired_for_capture` `charge_invalid_parameter` `charge_not_refundable` `clearing_code_unsupported` `country_code_invalid` `country_unsupported` `coupon_expired` `customer_max_payment_methods` `customer_max_subscriptions` `debit_not_authorized` `email_invalid` `expired_card` `idempotency_key_in_use` `incorrect_address` `incorrect_number` `insufficient_funds` `intent_invalid_state` `intent_verification_method_missing` `invalid_characters` `invalid_charge_amount` `invalid_source_usage` `invoice_no_customer_line_items` `invoice_no_payment_method_types` `invoice_no_subscription_line_items` `invoice_not_editable` `invoice_on_behalf_of_not_editable` `invoice_payment_intent_requires_action` `invoice_upcoming_none` `livemode_mismatch` `lock_timeout` `missing` `no_account` `parameter_invalid_empty` `parameter_invalid_integer` `parameter_invalid_string_blank` `parameter_invalid_string_empty` `parameter_missing` `parameter_unknown` `parameters_exclusive` `payment_intent_action_required` `payment_intent_authentication_failure` `payment_intent_incompatible_payment_method` `payment_intent_invalid_parameter` `payment_intent_mandate_invalid` `payment_intent_payment_attempt_expired` `payment_intent_payment_attempt_failed` `payment_intent_unexpected_state` `payment_method_billing_details_address_missing` `payment_method_configuration_failures` `payment_method_currency_mismatch` `payment_method_customer_decline` `payment_method_invalid_parameter` `payment_method_invalid_parameter_testmode` `payment_method_not_available` `payment_method_provider_decline` `payment_method_provider_timeout` `payment_method_unactivated` `payment_method_unexpected_state` `payment_method_unsupported_type` `payout_reconciliation_not_ready` `payouts_limit_exceeded` `payouts_not_allowed` `postal_code_invalid` `processing_error` `product_inactive` `progressive_onboarding_limit_exceeded` `rate_limit` `refer_to_customer` `refund_disputed_payment` `resource_already_exists` `resource_missing` `return_intent_already_processed` `routing_number_invalid` `secret_key_required` `setup_attempt_failed` `setup_intent_authentication_failure` `setup_intent_invalid_parameter` `setup_intent_mandate_invalid` `setup_intent_setup_attempt_expired` `setup_intent_unexpected_state` `shipping_calculation_failed` `sku_inactive` `status_transition_invalid` `tax_id_invalid` `taxes_calculation_failed` `testmode_charges_only` `tls_version_unsupported` `token_already_used` `token_in_use` `transfer_source_balance_parameters_mismatch` `transfers_not_allowed` `url_invalid`";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["api_error", "card_error", "idempotency_error", "invalid_request_error", "chain_error", "unknown"];
                                readonly description: "`api_error` `card_error` `idempotency_error` `invalid_request_error` `chain_error` `unknown`";
                            };
                            readonly declineCode: {
                                readonly type: "string";
                            };
                            readonly paymentIntentId: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                            };
                            readonly paymentMethodType: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                            readonly docUrl: {
                                readonly type: "string";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"];
                                readonly description: "`requires_payment_method` `requires_confirmation` `requires_action` `processing` `requires_capture` `canceled` `succeeded`";
                            };
                        };
                        readonly required: readonly ["id", "type", "status"];
                    };
                };
                readonly taxRateIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
            };
            readonly required: readonly ["id", "organizationId", "customerId", "customer", "autoAdvance", "collectionMethod", "paymentSettingId", "paymentSetting", "status", "attempted", "paid", "lineItems", "url", "billingReason"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const InvoiceSettingControllerGet: {
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly numberingScheme: {
                    readonly description: "The preferred numbering scheme for invoice\n\n`merchant_level` `customer_level`";
                    readonly default: "customer_level";
                    readonly type: "string";
                    readonly enum: readonly ["merchant_level", "customer_level"];
                };
                readonly invoicePrefix: {
                    readonly type: "string";
                    readonly description: "The preferred invoice id prefix";
                };
                readonly nextInvoiceSequence: {
                    readonly type: "number";
                    readonly description: "The next invoice starting sequence";
                    readonly examples: readonly [1];
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "The default invoice description";
                };
                readonly footer: {
                    readonly type: "string";
                    readonly description: "The default invoice footer";
                };
            };
            readonly required: readonly ["id"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const OrganizationControllerDeleteBrandLogo: {
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "string";
                };
                readonly statusCode: {
                    readonly type: "number";
                };
            };
            readonly required: readonly ["message", "statusCode"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const OrganizationControllerGetOrganizationInfo: {
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Organization's name";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Organization's type";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["pending", "active", "suspended"];
                    readonly description: "Organization's status\n\n`pending` `active` `suspended`";
                };
                readonly kind: {
                    readonly description: "Organization's kind\n\n`individual` `business`";
                    readonly type: "string";
                    readonly enum: readonly ["individual", "business"];
                };
                readonly ownerId: {
                    readonly type: "string";
                    readonly description: "User's id who owns organization";
                };
                readonly noOfEmployees: {
                    readonly type: "string";
                    readonly description: "No of employees";
                };
                readonly monthlyPaymentVolume: {
                    readonly type: "string";
                    readonly description: "Monthly payment volume";
                };
                readonly addresses: {
                    readonly description: "Withdrawal addresses";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Withdrawal address id";
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Withdrawal address name";
                            };
                            readonly address: {
                                readonly type: "string";
                                readonly description: "Withdrawal address";
                            };
                            readonly chainId: {
                                readonly type: "number";
                                readonly description: "Withdrawal address chain id";
                                readonly examples: readonly [1];
                            };
                            readonly isDefault: {
                                readonly type: "boolean";
                                readonly description: "Is default withdrawal address";
                            };
                        };
                        readonly required: readonly ["id", "name", "address", "chainId", "isDefault"];
                    };
                };
                readonly email: {
                    readonly type: "string";
                    readonly description: "Organization's email";
                };
                readonly supportEmail: {
                    readonly type: "string";
                    readonly description: "Organization's support email";
                };
                readonly phone: {
                    readonly type: "string";
                    readonly description: "Organization's support phone number";
                };
                readonly addressDetails: {
                    readonly description: "Organization's business address";
                    readonly type: "object";
                    readonly properties: {
                        readonly line1: {
                            readonly type: "string";
                        };
                        readonly line2: {
                            readonly type: "string";
                        };
                        readonly city: {
                            readonly type: "string";
                        };
                        readonly state: {
                            readonly type: "string";
                        };
                        readonly postalCode: {
                            readonly type: "string";
                        };
                        readonly country: {
                            readonly type: "string";
                        };
                    };
                };
                readonly brandLogo: {
                    readonly type: "string";
                    readonly description: "Brand logo url";
                };
                readonly brandColor: {
                    readonly type: "string";
                    readonly description: "Brand color in hex format";
                };
                readonly supportUrl: {
                    readonly type: "string";
                    readonly description: "Organization's support url";
                };
                readonly termsUrl: {
                    readonly type: "string";
                    readonly description: "Organization's terms and conditions url";
                };
                readonly privacyUrl: {
                    readonly type: "string";
                    readonly description: "Organization's privacy policy url";
                };
                readonly websiteUrl: {
                    readonly type: "string";
                    readonly description: "Organization's website url";
                };
                readonly featureAccessRequests: {
                    readonly description: "Feature access requests from organization";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly companyIdentificationNumber: {
                    readonly type: "string";
                };
                readonly taxIdentificationNumber: {
                    readonly type: "string";
                };
                readonly referralCode: {
                    readonly type: "string";
                    readonly description: "Referral code";
                };
                readonly referrerId: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["id", "name", "type", "status", "kind", "ownerId", "noOfEmployees", "monthlyPaymentVolume", "addresses", "brandLogo", "brandColor", "featureAccessRequests"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const OrganizationControllerUpdateBranding: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["brandColor"];
        readonly properties: {
            readonly brandLogo: {
                readonly type: "string";
                readonly format: "binary";
                readonly description: "Brand logo file";
            };
            readonly brandColor: {
                readonly type: "string";
                readonly description: "Brand color in hex format";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Organization's name";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Organization's type";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["pending", "active", "suspended"];
                    readonly description: "Organization's status\n\n`pending` `active` `suspended`";
                };
                readonly kind: {
                    readonly description: "Organization's kind\n\n`individual` `business`";
                    readonly type: "string";
                    readonly enum: readonly ["individual", "business"];
                };
                readonly ownerId: {
                    readonly type: "string";
                    readonly description: "User's id who owns organization";
                };
                readonly noOfEmployees: {
                    readonly type: "string";
                    readonly description: "No of employees";
                };
                readonly monthlyPaymentVolume: {
                    readonly type: "string";
                    readonly description: "Monthly payment volume";
                };
                readonly addresses: {
                    readonly description: "Withdrawal addresses";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Withdrawal address id";
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Withdrawal address name";
                            };
                            readonly address: {
                                readonly type: "string";
                                readonly description: "Withdrawal address";
                            };
                            readonly chainId: {
                                readonly type: "number";
                                readonly description: "Withdrawal address chain id";
                                readonly examples: readonly [1];
                            };
                            readonly isDefault: {
                                readonly type: "boolean";
                                readonly description: "Is default withdrawal address";
                            };
                        };
                        readonly required: readonly ["id", "name", "address", "chainId", "isDefault"];
                    };
                };
                readonly email: {
                    readonly type: "string";
                    readonly description: "Organization's email";
                };
                readonly supportEmail: {
                    readonly type: "string";
                    readonly description: "Organization's support email";
                };
                readonly phone: {
                    readonly type: "string";
                    readonly description: "Organization's support phone number";
                };
                readonly addressDetails: {
                    readonly description: "Organization's business address";
                    readonly type: "object";
                    readonly properties: {
                        readonly line1: {
                            readonly type: "string";
                        };
                        readonly line2: {
                            readonly type: "string";
                        };
                        readonly city: {
                            readonly type: "string";
                        };
                        readonly state: {
                            readonly type: "string";
                        };
                        readonly postalCode: {
                            readonly type: "string";
                        };
                        readonly country: {
                            readonly type: "string";
                        };
                    };
                };
                readonly brandLogo: {
                    readonly type: "string";
                    readonly description: "Brand logo url";
                };
                readonly brandColor: {
                    readonly type: "string";
                    readonly description: "Brand color in hex format";
                };
                readonly supportUrl: {
                    readonly type: "string";
                    readonly description: "Organization's support url";
                };
                readonly termsUrl: {
                    readonly type: "string";
                    readonly description: "Organization's terms and conditions url";
                };
                readonly privacyUrl: {
                    readonly type: "string";
                    readonly description: "Organization's privacy policy url";
                };
                readonly websiteUrl: {
                    readonly type: "string";
                    readonly description: "Organization's website url";
                };
                readonly featureAccessRequests: {
                    readonly description: "Feature access requests from organization";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly companyIdentificationNumber: {
                    readonly type: "string";
                };
                readonly taxIdentificationNumber: {
                    readonly type: "string";
                };
                readonly referralCode: {
                    readonly type: "string";
                    readonly description: "Referral code";
                };
                readonly referrerId: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["id", "name", "type", "status", "kind", "ownerId", "noOfEmployees", "monthlyPaymentVolume", "addresses", "brandLogo", "brandColor", "featureAccessRequests"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PartnerControllerCreateAccount: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly email: {
                readonly type: "string";
                readonly description: "User email. Should be unique";
            };
            readonly name: {
                readonly type: "string";
                readonly description: "Business name";
            };
            readonly website: {
                readonly type: "string";
                readonly description: "Business website";
            };
            readonly phone: {
                readonly type: "string";
                readonly description: "Business phone number";
            };
            readonly brandColor: {
                readonly type: "string";
                readonly description: "Brand color in hex format";
            };
            readonly addressDetails: {
                readonly description: "Organization's business address";
                readonly type: "object";
                readonly properties: {
                    readonly line1: {
                        readonly type: "string";
                    };
                    readonly line2: {
                        readonly type: "string";
                    };
                    readonly city: {
                        readonly type: "string";
                    };
                    readonly state: {
                        readonly type: "string";
                    };
                    readonly postalCode: {
                        readonly type: "string";
                    };
                    readonly country: {
                        readonly type: "string";
                    };
                };
            };
            readonly paymentSetting: {
                readonly description: "Organization payment setting";
                readonly type: "object";
                readonly properties: {
                    readonly preferredChainId: {
                        readonly type: "number";
                        readonly description: "The preferred chain's id";
                        readonly examples: readonly [1];
                    };
                    readonly preferredCurrency: {
                        readonly type: "string";
                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                        readonly description: "The preferred currency for payment";
                    };
                    readonly allowSwap: {
                        readonly type: "boolean";
                        readonly description: "Whether the user can swap the payment currency";
                        readonly default: false;
                    };
                    readonly applyFee: {
                        readonly type: "boolean";
                        readonly description: "Whether add a application fee to the user payment";
                        readonly default: false;
                    };
                    readonly applyGasFee: {
                        readonly type: "boolean";
                        readonly description: "Whether add a transaction fee to the user payment";
                        readonly default: false;
                    };
                    readonly allowSplitPayments: {
                        readonly type: "boolean";
                        readonly description: "Whether the user can split the payment";
                    };
                    readonly slippagePercentage: {
                        readonly type: "number";
                        readonly minimum: 0;
                        readonly maximum: 100;
                        readonly description: "The slippage percentage allowed for swaps and withdrawals";
                        readonly default: 10;
                        readonly examples: readonly [1];
                    };
                };
            };
            readonly withdrawalAddresses: {
                readonly description: "Organization withdrawal addresses";
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Withdrawal address name";
                        };
                        readonly address: {
                            readonly type: "string";
                            readonly description: "Withdrawal address";
                        };
                        readonly chainId: {
                            readonly type: "number";
                            readonly description: "Withdrawal address chain id";
                            readonly examples: readonly [1];
                        };
                    };
                    readonly required: readonly ["name", "address", "chainId"];
                };
            };
            readonly webhookEndpoints: {
                readonly description: "Organization webhook endpoints";
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly description: {
                            readonly type: "string";
                        };
                        readonly url: {
                            readonly type: "string";
                        };
                        readonly enabledEvents: {
                            readonly type: "object";
                            readonly properties: {
                                readonly events: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                        readonly enum: readonly ["*", "withdrawal_address.created", "withdrawal_address.updated", "withdrawal_address.deleted", "checkout_session.completed", "checkout_session.expired", "checkout_session.canceled", "customer.subscription.created", "customer.subscription.started", "customer.subscription.deleted", "customer.subscription.past_due", "customer.subscription.unpaid", "customer.subscription.incomplete_expired", "payment_intent.payment_failed", "payment_intent.canceled", "payment_intent.succeeded", "invoice.finalized", "invoice.paid", "invoice.marked_as_paid", "invoice.marked_uncollectible", "invoice.payment_failed"];
                                    };
                                };
                            };
                            readonly required: readonly ["events"];
                        };
                    };
                    readonly required: readonly ["description", "url", "enabledEvents"];
                };
            };
        };
        readonly required: readonly ["email", "name"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly organization: {
                    readonly description: "Organization details";
                    readonly type: "object";
                    readonly required: readonly ["id", "name", "type", "status", "kind", "ownerId", "noOfEmployees", "monthlyPaymentVolume", "addresses", "brandLogo", "brandColor", "featureAccessRequests"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Organization's name";
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Organization's type";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["pending", "active", "suspended"];
                            readonly description: "Organization's status\n\n`pending` `active` `suspended`";
                        };
                        readonly kind: {
                            readonly description: "Organization's kind\n\n`individual` `business`";
                            readonly type: "string";
                            readonly enum: readonly ["individual", "business"];
                        };
                        readonly ownerId: {
                            readonly type: "string";
                            readonly description: "User's id who owns organization";
                        };
                        readonly noOfEmployees: {
                            readonly type: "string";
                            readonly description: "No of employees";
                        };
                        readonly monthlyPaymentVolume: {
                            readonly type: "string";
                            readonly description: "Monthly payment volume";
                        };
                        readonly addresses: {
                            readonly description: "Withdrawal addresses";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly required: readonly ["id", "name", "address", "chainId", "isDefault"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "Withdrawal address id";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Withdrawal address name";
                                    };
                                    readonly address: {
                                        readonly type: "string";
                                        readonly description: "Withdrawal address";
                                    };
                                    readonly chainId: {
                                        readonly type: "number";
                                        readonly description: "Withdrawal address chain id";
                                        readonly examples: readonly [1];
                                    };
                                    readonly isDefault: {
                                        readonly type: "boolean";
                                        readonly description: "Is default withdrawal address";
                                    };
                                };
                            };
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "Organization's email";
                        };
                        readonly supportEmail: {
                            readonly type: "string";
                            readonly description: "Organization's support email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "Organization's support phone number";
                        };
                        readonly addressDetails: {
                            readonly description: "Organization's business address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly brandLogo: {
                            readonly type: "string";
                            readonly description: "Brand logo url";
                        };
                        readonly brandColor: {
                            readonly type: "string";
                            readonly description: "Brand color in hex format";
                        };
                        readonly supportUrl: {
                            readonly type: "string";
                            readonly description: "Organization's support url";
                        };
                        readonly termsUrl: {
                            readonly type: "string";
                            readonly description: "Organization's terms and conditions url";
                        };
                        readonly privacyUrl: {
                            readonly type: "string";
                            readonly description: "Organization's privacy policy url";
                        };
                        readonly websiteUrl: {
                            readonly type: "string";
                            readonly description: "Organization's website url";
                        };
                        readonly featureAccessRequests: {
                            readonly description: "Feature access requests from organization";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly companyIdentificationNumber: {
                            readonly type: "string";
                        };
                        readonly taxIdentificationNumber: {
                            readonly type: "string";
                        };
                        readonly referralCode: {
                            readonly type: "string";
                            readonly description: "Referral code";
                        };
                        readonly referrerId: {
                            readonly type: "string";
                        };
                    };
                };
                readonly user: {
                    readonly description: "User details";
                    readonly type: "object";
                    readonly required: readonly ["id", "firstName", "lastName", "role", "status"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly firstName: {
                            readonly type: "string";
                        };
                        readonly lastName: {
                            readonly type: "string";
                        };
                        readonly email: {
                            readonly type: "string";
                        };
                        readonly role: {
                            readonly type: "string";
                        };
                        readonly profilePicture: {
                            readonly type: "string";
                        };
                        readonly phone: {
                            readonly type: "string";
                        };
                        readonly position: {
                            readonly type: "string";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["pending", "active", "suspended"];
                            readonly description: "`pending` `active` `suspended`";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly flags: {
                            readonly type: "object";
                            readonly properties: {
                                readonly introModal: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                    };
                };
                readonly paymentSetting: {
                    readonly description: "Organization payment setting details";
                    readonly type: "object";
                    readonly required: readonly ["id", "feePercentage"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly description: "A list of the types of payment methods";
                            readonly minItems: 1;
                            readonly maxItems: 1;
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                            readonly examples: readonly ["wallet"];
                        };
                        readonly allowedChains: {
                            readonly description: "The list of chains allowed for the payment. If not provided, all chains supported by the organization are enabled.";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly required: readonly ["chainId"];
                                readonly properties: {
                                    readonly chainId: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly blacklistCurrencies: {
                                        readonly type: "array";
                                        readonly description: "The list of currencies to disable for the payment. Note: This field is only used for checkout session API atm.";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                        };
                                        readonly examples: readonly ["usdc"];
                                    };
                                    readonly withdrawalAddress: {
                                        readonly type: "string";
                                        readonly description: "This is optional, default withdrawal address configured in dashboard under settings > payment methods is used. The custom withdrawal address to use for this chain instead of stored default withdrawal address.";
                                    };
                                    readonly withdrawalAddresses: {
                                        readonly description: "The list of withdrawal addresses to split the payment. If provided, the sum of all split percentages should be 100.";
                                        readonly minItems: 2;
                                        readonly maxItems: 4;
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["splitPercentage", "address"];
                                            readonly properties: {
                                                readonly splitPercentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly examples: readonly [1];
                                                };
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "The withdrawal address for the split percentage";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly allowedCurrencies: {
                            readonly type: "array";
                            readonly description: "The list of currencies allowed for the payment.";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                            };
                            readonly examples: readonly ["usdc", "usdt"];
                        };
                        readonly preferredChainId: {
                            readonly type: "number";
                            readonly description: "The preferred chain's id";
                            readonly examples: readonly [1];
                        };
                        readonly preferredCurrency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                            readonly description: "The preferred currency for payment\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                        };
                        readonly allowSwap: {
                            readonly type: "boolean";
                            readonly description: "Whether the user can swap the payment currency";
                            readonly default: false;
                        };
                        readonly applyFee: {
                            readonly type: "boolean";
                            readonly description: "Whether add a application fee to the user payment";
                            readonly default: false;
                        };
                        readonly feePercentage: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly maximum: 100;
                            readonly description: "Percent that will be added to subtotal as a fee";
                            readonly examples: readonly [1];
                        };
                        readonly applyGasFee: {
                            readonly type: "boolean";
                            readonly description: "Whether add a transaction fee to the user payment";
                            readonly default: false;
                        };
                        readonly allowSplitPayments: {
                            readonly type: "boolean";
                            readonly description: "Whether the user can split the payment";
                        };
                        readonly slippagePercentage: {
                            readonly type: "number";
                            readonly minimum: 0;
                            readonly maximum: 100;
                            readonly description: "The slippage percentage allowed for swaps and withdrawals";
                            readonly default: 10;
                            readonly examples: readonly [1];
                        };
                    };
                };
                readonly webhookEndpoints: {
                    readonly description: "Organization webhook endpoints";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly line1: {
                                readonly type: "string";
                            };
                            readonly line2: {
                                readonly type: "string";
                            };
                            readonly city: {
                                readonly type: "string";
                            };
                            readonly state: {
                                readonly type: "string";
                            };
                            readonly postalCode: {
                                readonly type: "string";
                            };
                            readonly country: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly withdrawalAddresses: {
                    readonly description: "Organization withdrawal addresses";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Withdrawal address id";
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Withdrawal address name";
                            };
                            readonly address: {
                                readonly type: "string";
                                readonly description: "Withdrawal address";
                            };
                            readonly chainId: {
                                readonly type: "number";
                                readonly description: "Withdrawal address chain id";
                                readonly examples: readonly [1];
                            };
                            readonly isDefault: {
                                readonly type: "boolean";
                                readonly description: "Is default withdrawal address";
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "Withdrawal address creation date";
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "Withdrawal address update date";
                            };
                        };
                        readonly required: readonly ["id", "name", "address", "chainId", "isDefault", "createdAt", "updatedAt"];
                    };
                };
                readonly personalAccessToken: {
                    readonly description: "Organization personal access token to access organization' API";
                    readonly type: "object";
                    readonly required: readonly ["id", "name", "tokenIdentifier", "organizationId", "userId", "createdAt", "updatedAt", "token"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly tokenIdentifier: {
                            readonly type: "string";
                        };
                        readonly organizationId: {
                            readonly type: "string";
                        };
                        readonly userId: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly token: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly required: readonly ["organization", "user", "paymentSetting", "webhookEndpoints", "withdrawalAddresses", "personalAccessToken"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PartnerControllerGetAccount: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly emails: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter accounts by email";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["page", "limit", "count", "hasMore", "data"];
            readonly properties: {
                readonly page: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly description: "Page number. Starts from 1";
                    readonly examples: readonly [1];
                };
                readonly limit: {
                    readonly type: "number";
                    readonly default: 200;
                    readonly description: "Number of items per page";
                    readonly examples: readonly [10];
                };
                readonly count: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly hasMore: {
                    readonly type: "boolean";
                };
                readonly query: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly default: 1;
                            readonly description: "Page number. Starts from 1";
                            readonly examples: readonly [1];
                        };
                        readonly limit: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly maximum: 200;
                            readonly default: 200;
                            readonly description: "Number of items per page";
                            readonly examples: readonly [10];
                        };
                        readonly createdAt: {
                            readonly description: "Filter by created date";
                            readonly type: "object";
                            readonly properties: {
                                readonly isnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns null values";
                                };
                                readonly notnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns not null values";
                                };
                                readonly gt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than the given date";
                                    readonly examples: readonly ["2020-01-01"];
                                };
                                readonly gte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than or equal to the given date";
                                };
                                readonly lt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than the given date";
                                };
                                readonly lte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than or equal to the given date";
                                };
                            };
                        };
                    };
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["organization", "user", "paymentSetting", "webhookEndpoints", "withdrawalAddresses", "personalAccessToken"];
                        readonly properties: {
                            readonly organization: {
                                readonly description: "Organization details";
                                readonly type: "object";
                                readonly required: readonly ["id", "name", "type", "status", "kind", "ownerId", "noOfEmployees", "monthlyPaymentVolume", "addresses", "brandLogo", "brandColor", "featureAccessRequests"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly updatedAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Organization's name";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "Organization's type";
                                    };
                                    readonly status: {
                                        readonly type: "string";
                                        readonly enum: readonly ["pending", "active", "suspended"];
                                        readonly description: "Organization's status\n\n`pending` `active` `suspended`";
                                    };
                                    readonly kind: {
                                        readonly description: "Organization's kind\n\n`individual` `business`";
                                        readonly type: "string";
                                        readonly enum: readonly ["individual", "business"];
                                    };
                                    readonly ownerId: {
                                        readonly type: "string";
                                        readonly description: "User's id who owns organization";
                                    };
                                    readonly noOfEmployees: {
                                        readonly type: "string";
                                        readonly description: "No of employees";
                                    };
                                    readonly monthlyPaymentVolume: {
                                        readonly type: "string";
                                        readonly description: "Monthly payment volume";
                                    };
                                    readonly addresses: {
                                        readonly description: "Withdrawal addresses";
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["id", "name", "address", "chainId", "isDefault"];
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                    readonly description: "Withdrawal address id";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "Withdrawal address name";
                                                };
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "Withdrawal address";
                                                };
                                                readonly chainId: {
                                                    readonly type: "number";
                                                    readonly description: "Withdrawal address chain id";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly isDefault: {
                                                    readonly type: "boolean";
                                                    readonly description: "Is default withdrawal address";
                                                };
                                            };
                                        };
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                        readonly description: "Organization's email";
                                    };
                                    readonly supportEmail: {
                                        readonly type: "string";
                                        readonly description: "Organization's support email";
                                    };
                                    readonly phone: {
                                        readonly type: "string";
                                        readonly description: "Organization's support phone number";
                                    };
                                    readonly addressDetails: {
                                        readonly description: "Organization's business address";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly line1: {
                                                readonly type: "string";
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                            };
                                            readonly city: {
                                                readonly type: "string";
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                            };
                                            readonly postalCode: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly brandLogo: {
                                        readonly type: "string";
                                        readonly description: "Brand logo url";
                                    };
                                    readonly brandColor: {
                                        readonly type: "string";
                                        readonly description: "Brand color in hex format";
                                    };
                                    readonly supportUrl: {
                                        readonly type: "string";
                                        readonly description: "Organization's support url";
                                    };
                                    readonly termsUrl: {
                                        readonly type: "string";
                                        readonly description: "Organization's terms and conditions url";
                                    };
                                    readonly privacyUrl: {
                                        readonly type: "string";
                                        readonly description: "Organization's privacy policy url";
                                    };
                                    readonly websiteUrl: {
                                        readonly type: "string";
                                        readonly description: "Organization's website url";
                                    };
                                    readonly featureAccessRequests: {
                                        readonly description: "Feature access requests from organization";
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly companyIdentificationNumber: {
                                        readonly type: "string";
                                    };
                                    readonly taxIdentificationNumber: {
                                        readonly type: "string";
                                    };
                                    readonly referralCode: {
                                        readonly type: "string";
                                        readonly description: "Referral code";
                                    };
                                    readonly referrerId: {
                                        readonly type: "string";
                                    };
                                };
                            };
                            readonly user: {
                                readonly description: "User details";
                                readonly type: "object";
                                readonly required: readonly ["id", "firstName", "lastName", "role", "status"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly firstName: {
                                        readonly type: "string";
                                    };
                                    readonly lastName: {
                                        readonly type: "string";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                    };
                                    readonly role: {
                                        readonly type: "string";
                                    };
                                    readonly profilePicture: {
                                        readonly type: "string";
                                    };
                                    readonly phone: {
                                        readonly type: "string";
                                    };
                                    readonly position: {
                                        readonly type: "string";
                                    };
                                    readonly status: {
                                        readonly type: "string";
                                        readonly enum: readonly ["pending", "active", "suspended"];
                                        readonly description: "`pending` `active` `suspended`";
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly updatedAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly flags: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly introModal: {
                                                readonly type: "boolean";
                                            };
                                        };
                                    };
                                };
                            };
                            readonly paymentSetting: {
                                readonly description: "Organization payment setting details";
                                readonly type: "object";
                                readonly required: readonly ["id", "feePercentage"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly updatedAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly paymentMethodTypes: {
                                        readonly type: "array";
                                        readonly description: "A list of the types of payment methods";
                                        readonly minItems: 1;
                                        readonly maxItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                            readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                            readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                                        };
                                        readonly examples: readonly ["wallet"];
                                    };
                                    readonly allowedChains: {
                                        readonly description: "The list of chains allowed for the payment. If not provided, all chains supported by the organization are enabled.";
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["chainId"];
                                            readonly properties: {
                                                readonly chainId: {
                                                    readonly type: "number";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly blacklistCurrencies: {
                                                    readonly type: "array";
                                                    readonly description: "The list of currencies to disable for the payment. Note: This field is only used for checkout session API atm.";
                                                    readonly items: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                                    };
                                                    readonly examples: readonly ["usdc"];
                                                };
                                                readonly withdrawalAddress: {
                                                    readonly type: "string";
                                                    readonly description: "This is optional, default withdrawal address configured in dashboard under settings > payment methods is used. The custom withdrawal address to use for this chain instead of stored default withdrawal address.";
                                                };
                                                readonly withdrawalAddresses: {
                                                    readonly description: "The list of withdrawal addresses to split the payment. If provided, the sum of all split percentages should be 100.";
                                                    readonly minItems: 2;
                                                    readonly maxItems: 4;
                                                    readonly type: "array";
                                                    readonly items: {
                                                        readonly type: "object";
                                                        readonly required: readonly ["splitPercentage", "address"];
                                                        readonly properties: {
                                                            readonly splitPercentage: {
                                                                readonly type: "number";
                                                                readonly minimum: 0;
                                                                readonly maximum: 100;
                                                                readonly examples: readonly [1];
                                                            };
                                                            readonly address: {
                                                                readonly type: "string";
                                                                readonly description: "The withdrawal address for the split percentage";
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly allowedCurrencies: {
                                        readonly type: "array";
                                        readonly description: "The list of currencies allowed for the payment.";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                        };
                                        readonly examples: readonly ["usdc", "usdt"];
                                    };
                                    readonly preferredChainId: {
                                        readonly type: "number";
                                        readonly description: "The preferred chain's id";
                                        readonly examples: readonly [1];
                                    };
                                    readonly preferredCurrency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                        readonly description: "The preferred currency for payment\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                    };
                                    readonly allowSwap: {
                                        readonly type: "boolean";
                                        readonly description: "Whether the user can swap the payment currency";
                                        readonly default: false;
                                    };
                                    readonly applyFee: {
                                        readonly type: "boolean";
                                        readonly description: "Whether add a application fee to the user payment";
                                        readonly default: false;
                                    };
                                    readonly feePercentage: {
                                        readonly type: "number";
                                        readonly minimum: 0;
                                        readonly maximum: 100;
                                        readonly description: "Percent that will be added to subtotal as a fee";
                                        readonly examples: readonly [1];
                                    };
                                    readonly applyGasFee: {
                                        readonly type: "boolean";
                                        readonly description: "Whether add a transaction fee to the user payment";
                                        readonly default: false;
                                    };
                                    readonly allowSplitPayments: {
                                        readonly type: "boolean";
                                        readonly description: "Whether the user can split the payment";
                                    };
                                    readonly slippagePercentage: {
                                        readonly type: "number";
                                        readonly minimum: 0;
                                        readonly maximum: 100;
                                        readonly description: "The slippage percentage allowed for swaps and withdrawals";
                                        readonly default: 10;
                                        readonly examples: readonly [1];
                                    };
                                };
                            };
                            readonly webhookEndpoints: {
                                readonly description: "Organization webhook endpoints";
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly line1: {
                                            readonly type: "string";
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                        };
                                        readonly postalCode: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                            readonly withdrawalAddresses: {
                                readonly description: "Organization withdrawal addresses";
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly required: readonly ["id", "name", "address", "chainId", "isDefault", "createdAt", "updatedAt"];
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "Withdrawal address id";
                                        };
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "Withdrawal address name";
                                        };
                                        readonly address: {
                                            readonly type: "string";
                                            readonly description: "Withdrawal address";
                                        };
                                        readonly chainId: {
                                            readonly type: "number";
                                            readonly description: "Withdrawal address chain id";
                                            readonly examples: readonly [1];
                                        };
                                        readonly isDefault: {
                                            readonly type: "boolean";
                                            readonly description: "Is default withdrawal address";
                                        };
                                        readonly createdAt: {
                                            readonly format: "date-time";
                                            readonly type: "string";
                                            readonly description: "Withdrawal address creation date";
                                        };
                                        readonly updatedAt: {
                                            readonly format: "date-time";
                                            readonly type: "string";
                                            readonly description: "Withdrawal address update date";
                                        };
                                    };
                                };
                            };
                            readonly personalAccessToken: {
                                readonly description: "Organization personal access token to access organization' API";
                                readonly type: "object";
                                readonly required: readonly ["id", "name", "tokenIdentifier", "organizationId", "userId", "createdAt", "updatedAt", "token"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly tokenIdentifier: {
                                        readonly type: "string";
                                    };
                                    readonly organizationId: {
                                        readonly type: "string";
                                    };
                                    readonly userId: {
                                        readonly type: "string";
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly updatedAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly token: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PaymentIntentControllerMarkAsRefunded: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly markRefundedComment: {
                readonly type: "string";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly paymentIntentId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["paymentIntentId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly amount: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly amountReceived: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                    readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"];
                    readonly description: "`requires_payment_method` `requires_confirmation` `requires_action` `processing` `requires_capture` `canceled` `succeeded`";
                };
                readonly paymentMethodId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly paymentMethod: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly assetId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly asset: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "Asset id";
                                };
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "Asset name";
                                };
                                readonly chainId: {
                                    readonly type: "number";
                                    readonly description: "Asset chain id";
                                    readonly examples: readonly [1];
                                };
                                readonly address: {
                                    readonly type: "string";
                                    readonly description: "Asset address on chain";
                                };
                                readonly currency: {
                                    readonly type: "string";
                                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                    readonly description: "Asset currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                };
                                readonly symbol: {
                                    readonly type: "string";
                                    readonly description: "Asset symbol";
                                };
                                readonly decimals: {
                                    readonly type: "number";
                                    readonly description: "Asset decimals in which it is represented on chain";
                                    readonly examples: readonly [1];
                                };
                                readonly coingeckoId: {
                                    readonly type: "string";
                                    readonly description: "Asset coingecko id";
                                };
                                readonly superToken: {
                                    readonly description: "SuperToken data";
                                    readonly type: "object";
                                    readonly required: readonly ["address", "decimals", "symbol"];
                                    readonly properties: {
                                        readonly address: {
                                            readonly type: "string";
                                            readonly description: "SuperToken's address";
                                        };
                                        readonly decimals: {
                                            readonly type: "number";
                                            readonly examples: readonly [1];
                                        };
                                        readonly symbol: {
                                            readonly type: "string";
                                            readonly description: "SuperToken's symbol";
                                        };
                                    };
                                };
                                readonly isEIP5827Supported: {
                                    readonly type: "boolean";
                                    readonly description: "Is EIP5827 supported";
                                };
                            };
                            readonly required: readonly ["id", "name", "chainId", "address", "currency", "symbol", "decimals", "isEIP5827Supported"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                            readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                        };
                        readonly accountAddress: {
                            readonly type: "string";
                        };
                        readonly billingDetails: {
                            readonly type: "object";
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name";
                                };
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The email";
                                };
                                readonly phone: {
                                    readonly type: "string";
                                    readonly description: "The phone";
                                };
                                readonly organizationName: {
                                    readonly type: "string";
                                    readonly description: "The organization name";
                                };
                                readonly address: {
                                    readonly description: "The address";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly line1: {
                                            readonly type: "string";
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                        };
                                        readonly postalCode: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly customerId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly options: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                    };
                    readonly required: readonly ["id", "assetId", "asset", "type"];
                };
                readonly paymentMethodTypes: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                        readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                    };
                };
                readonly transferAccountAddress: {
                    readonly type: "string";
                };
                readonly transactions: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly type: {
                                readonly description: "Transaction type\n\n`incoming` `outgoing` `event` `transfer`";
                                readonly type: "string";
                                readonly enum: readonly ["incoming", "outgoing", "event", "transfer"];
                            };
                            readonly transactionRelayId: {
                                readonly type: "string";
                                readonly description: "Transaction relay id";
                            };
                            readonly transactionHash: {
                                readonly type: "string";
                                readonly description: "Transaction hash";
                            };
                            readonly nonce: {
                                readonly type: "number";
                                readonly description: "Transaction nonce";
                                readonly examples: readonly [1];
                            };
                            readonly gasLimit: {
                                readonly type: "number";
                                readonly description: "Transaction gas limit used in payment";
                                readonly examples: readonly [1];
                            };
                            readonly validUntil: {
                                readonly type: "string";
                                readonly description: "Transaction valid until";
                            };
                            readonly fromAddress: {
                                readonly type: "string";
                                readonly description: "Transaction from address";
                            };
                            readonly toAddress: {
                                readonly type: "string";
                                readonly description: "Transaction to address";
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                readonly description: "Transaction currency\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "Transaction created at";
                            };
                            readonly amount: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly description: "Transaction amount in 8 decimals";
                                readonly examples: readonly ["9223372036854775807"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                            readonly amountRaw: {
                                readonly type: "string";
                                readonly description: "Transaction amount raw received from alchemy";
                            };
                            readonly assetId: {
                                readonly type: "string";
                                readonly description: "Transaction asset id";
                            };
                            readonly asset: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly address: {
                                        readonly type: "string";
                                    };
                                    readonly chainId: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                    readonly symbol: {
                                        readonly type: "string";
                                    };
                                    readonly decimals: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly coingeckoId: {
                                        readonly type: "string";
                                    };
                                    readonly isPublic: {
                                        readonly type: "boolean";
                                    };
                                    readonly superToken: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly address: {
                                                readonly type: "string";
                                                readonly description: "SuperToken's address";
                                            };
                                            readonly decimals: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly symbol: {
                                                readonly type: "string";
                                                readonly description: "SuperToken's symbol";
                                            };
                                        };
                                        readonly required: readonly ["address", "decimals", "symbol"];
                                    };
                                    readonly chain: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "number";
                                                readonly description: "Chain id";
                                                readonly examples: readonly [1];
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                                readonly description: "Chain name";
                                            };
                                            readonly icon: {
                                                readonly type: "string";
                                                readonly description: "Chain icon";
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                readonly description: "Chain currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                            };
                                            readonly blockExplorerTransactionUrl: {
                                                readonly type: "string";
                                                readonly description: "Chain block explorer transaction url";
                                            };
                                            readonly blockExplorerName: {
                                                readonly type: "string";
                                                readonly description: "Chain block explorer name";
                                            };
                                            readonly type: {
                                                readonly description: "Chain type\n\n`evm` `solana` `tron` `stripe` `binance_pay`";
                                                readonly type: "string";
                                                readonly enum: readonly ["evm", "solana", "tron", "stripe", "binance_pay"];
                                            };
                                            readonly isBeta: {
                                                readonly type: "boolean";
                                                readonly description: "Is beta asset";
                                            };
                                        };
                                        readonly required: readonly ["id", "name", "icon", "currency", "blockExplorerTransactionUrl", "blockExplorerName", "type", "isBeta"];
                                    };
                                };
                                readonly required: readonly ["id", "name", "address", "chainId", "currency", "symbol", "decimals", "isPublic", "chain"];
                            };
                            readonly transactionUrl: {
                                readonly type: "string";
                                readonly description: "Transaction url";
                            };
                        };
                        readonly required: readonly ["type", "fromAddress", "toAddress", "currency", "amountRaw", "assetId", "asset"];
                    };
                };
                readonly paymentReceipt: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly organizationId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly paymentIntentId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly receiptNumber: {
                            readonly type: "string";
                        };
                        readonly uri: {
                            readonly type: "string";
                        };
                    };
                    readonly required: readonly ["id", "organizationId", "paymentIntentId", "receiptNumber"];
                };
                readonly canceledAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly cancellationReason: {
                    readonly type: "string";
                };
                readonly stripe: {
                    readonly type: "object";
                    readonly properties: {
                        readonly paymentIntentId: {
                            readonly type: "string";
                        };
                        readonly receiptUrl: {
                            readonly type: "string";
                        };
                        readonly cardLast4: {
                            readonly type: "string";
                        };
                        readonly displayName: {
                            readonly type: "string";
                        };
                    };
                };
                readonly isMarkRefunded: {
                    readonly type: "boolean";
                };
                readonly markRefundedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly markRefundedComment: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["id", "organizationId", "status", "paymentMethodId", "transactions"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PaymentIntentControllerSendCheckoutSessionPaymentReceipt: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly paymentIntentId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["paymentIntentId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly paymentIntentId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly name: {
                    readonly type: "string";
                };
                readonly receiptNumber: {
                    readonly type: "string";
                };
                readonly uri: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["id", "organizationId", "paymentIntentId", "receiptNumber"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PaymentLinkControllerActivate: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly linkId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["linkId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly description: "Organization's id";
                };
                readonly type: {
                    readonly description: "Payment link type\n\n`one_time` `multiple`";
                    readonly type: "string";
                    readonly enum: readonly ["one_time", "multiple"];
                };
                readonly amount: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "Amount to take from user in 8 decimal places. If not provided then user can enter any amount";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "Amount's . This field is deprecated and will be removed in future versions. Use currencies and preferredCurrency instead.\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                    readonly deprecated: true;
                };
                readonly currencies: {
                    readonly type: "array";
                    readonly description: "Currencies in which amount is to be taken";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                    };
                };
                readonly preferredCurrency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "Preferred currency. If provided then it will be selected by default on checkout page\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly title: {
                    readonly type: "string";
                    readonly description: "Payment link title";
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Payment link description";
                };
                readonly image: {
                    readonly type: "string";
                    readonly description: "Payment link product image";
                };
                readonly publicImage: {
                    readonly type: "string";
                    readonly description: "Payment link product image with absolute public url";
                };
                readonly tags: {
                    readonly description: "Payment link tags";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly isActive: {
                    readonly type: "boolean";
                    readonly description: "Whether the payment link is currently active";
                };
                readonly nameCollection: {
                    readonly type: "boolean";
                    readonly description: "If true then take name from user";
                };
                readonly emailCollection: {
                    readonly type: "boolean";
                    readonly description: "If true then take email from user";
                };
                readonly phoneNumberCollection: {
                    readonly type: "boolean";
                    readonly description: "If true then take phone number from user";
                };
                readonly shippingAddressCollection: {
                    readonly type: "boolean";
                    readonly description: "If true then take shipping address from user";
                };
                readonly billingAddressCollection: {
                    readonly type: "boolean";
                    readonly description: "If true then take billing address from user";
                };
                readonly customFields: {
                    readonly type: "object";
                    readonly properties: {
                        readonly fields: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly key: {
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly enum: readonly ["text", "numeric", "dropdown"];
                                        readonly description: "`text` `numeric` `dropdown`";
                                    };
                                    readonly label: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["custom"];
                                                readonly description: "`custom`";
                                            };
                                            readonly custom: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly required: readonly ["custom"];
                                    };
                                    readonly optional: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                };
                                readonly required: readonly ["key", "type", "label", "optional"];
                            };
                        };
                    };
                };
                readonly submitType: {
                    readonly description: "Payment link submit type\n\n`pay` `book` `donate`";
                    readonly type: "string";
                    readonly enum: readonly ["pay", "book", "donate"];
                };
                readonly afterCompletion: {
                    readonly description: "After completion action to perform on checkout page\n\n`redirect` `hosted_confirmation`";
                    readonly type: "string";
                    readonly enum: readonly ["redirect", "hosted_confirmation"];
                };
                readonly afterCompletionRedirectUrl: {
                    readonly type: "string";
                    readonly description: "After completion redirect url to redirect user to after payment";
                };
                readonly afterCompletionConfirmMsg: {
                    readonly type: "string";
                    readonly description: "After completion confirmation message to show to user after payment";
                };
                readonly suggestedCurrency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "Suggested currency to take payment in\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly suggestedAmounts: {
                    readonly description: "Suggested amounts to show on checkout page if amount is not provided";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly productId: {
                    readonly type: "string";
                    readonly description: "Product id to take payment for";
                };
                readonly allowedChains: {
                    readonly description: "Allowed chains to take payment from";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly chainId: {
                                readonly type: "number";
                                readonly description: "Chain id";
                                readonly examples: readonly [1];
                            };
                            readonly isPreferred: {
                                readonly type: "boolean";
                                readonly description: "Is this chain preferred. If yes then it will be selected by default on checkout page";
                            };
                        };
                        readonly required: readonly ["chainId", "isPreferred"];
                    };
                };
                readonly interval: {
                    readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                    readonly type: "string";
                    readonly enum: readonly ["day", "week", "month", "year"];
                };
                readonly intervalCount: {
                    readonly type: "number";
                    readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                    readonly examples: readonly [1];
                };
                readonly priceType: {
                    readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                    readonly type: "string";
                    readonly enum: readonly ["one_time", "recurring", "streaming"];
                };
                readonly allowPromotionCodes: {
                    readonly type: "boolean";
                    readonly description: "Enables user redeemable promotion codes.";
                };
            };
            readonly required: readonly ["id", "organizationId", "type", "title", "tags", "nameCollection", "emailCollection", "phoneNumberCollection", "shippingAddressCollection", "billingAddressCollection", "submitType", "afterCompletion", "priceType"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PaymentLinkControllerCreate: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly type: {
                readonly description: "Payment link type";
                readonly type: "string";
                readonly enum: readonly ["one_time", "multiple"];
            };
            readonly amount: {
                readonly format: "int64";
                readonly type: "integer";
                readonly description: "Amount to take from user in 8 decimal places. If not provided then user can enter any amount";
                readonly examples: readonly ["9223372036854775807"];
                readonly minimum: -9223372036854776000;
                readonly maximum: 9223372036854776000;
            };
            readonly currency: {
                readonly type: "string";
                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                readonly description: "Amount's . This field is deprecated and will be removed in future versions. Use currencies and preferredCurrency instead.";
                readonly deprecated: true;
            };
            readonly currencies: {
                readonly type: "array";
                readonly description: "Currencies in which amount is to be taken";
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                };
            };
            readonly preferredCurrency: {
                readonly type: "string";
                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                readonly description: "Preferred currency. If provided then it will be selected by default on checkout page";
            };
            readonly title: {
                readonly type: "string";
                readonly description: "Payment link title";
            };
            readonly description: {
                readonly type: "string";
                readonly description: "Payment link description";
            };
            readonly image: {
                readonly type: "string";
                readonly description: "Payment link product image";
            };
            readonly tags: {
                readonly description: "Payment link tags";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly nameCollection: {
                readonly type: "boolean";
                readonly description: "If true then take name from user";
            };
            readonly emailCollection: {
                readonly type: "boolean";
                readonly description: "If true then take email from user";
            };
            readonly phoneNumberCollection: {
                readonly type: "boolean";
                readonly description: "If true then take phone number from user";
            };
            readonly shippingAddressCollection: {
                readonly type: "boolean";
                readonly description: "If true then take shipping address from user";
            };
            readonly billingAddressCollection: {
                readonly type: "boolean";
                readonly description: "If true then take billing address from user";
            };
            readonly customFields: {
                readonly type: "object";
                readonly properties: {
                    readonly fields: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly key: {
                                    readonly type: "string";
                                };
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["text", "numeric", "dropdown"];
                                };
                                readonly label: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["custom"];
                                        };
                                        readonly custom: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly required: readonly ["custom"];
                                };
                                readonly optional: {
                                    readonly type: "boolean";
                                    readonly default: false;
                                };
                            };
                            readonly required: readonly ["key", "type", "label", "optional"];
                        };
                    };
                };
            };
            readonly submitType: {
                readonly description: "Payment link submit type";
                readonly type: "string";
                readonly enum: readonly ["pay", "book", "donate"];
            };
            readonly afterCompletion: {
                readonly description: "After completion action to perform on checkout page";
                readonly type: "string";
                readonly enum: readonly ["redirect", "hosted_confirmation"];
            };
            readonly afterCompletionRedirectUrl: {
                readonly type: "string";
                readonly description: "After completion redirect url to redirect user to after payment";
            };
            readonly afterCompletionConfirmMsg: {
                readonly type: "string";
                readonly description: "After completion confirmation message to show to user after payment";
            };
            readonly suggestedCurrency: {
                readonly type: "string";
                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                readonly description: "Suggested currency to take payment in";
            };
            readonly suggestedAmounts: {
                readonly description: "Suggested amounts to show on checkout page if amount is not provided";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly productId: {
                readonly type: "string";
                readonly description: "Product id to take payment for";
            };
            readonly allowPromotionCodes: {
                readonly type: "boolean";
                readonly description: "Enables user redeemable promotion codes.";
            };
            readonly allowedChains: {
                readonly description: "Allowed chains to take payment from";
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly chainId: {
                            readonly type: "number";
                            readonly description: "Chain id";
                            readonly examples: readonly [1];
                        };
                        readonly isPreferred: {
                            readonly type: "boolean";
                            readonly description: "Is this chain preferred. If yes then it will be selected by default on checkout page";
                        };
                    };
                    readonly required: readonly ["chainId", "isPreferred"];
                };
            };
        };
        readonly required: readonly ["type", "title", "tags", "nameCollection", "emailCollection", "phoneNumberCollection", "shippingAddressCollection", "billingAddressCollection", "submitType", "afterCompletion"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly description: "Organization's id";
                };
                readonly type: {
                    readonly description: "Payment link type\n\n`one_time` `multiple`";
                    readonly type: "string";
                    readonly enum: readonly ["one_time", "multiple"];
                };
                readonly amount: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "Amount to take from user in 8 decimal places. If not provided then user can enter any amount";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "Amount's . This field is deprecated and will be removed in future versions. Use currencies and preferredCurrency instead.\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                    readonly deprecated: true;
                };
                readonly currencies: {
                    readonly type: "array";
                    readonly description: "Currencies in which amount is to be taken";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                    };
                };
                readonly preferredCurrency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "Preferred currency. If provided then it will be selected by default on checkout page\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly title: {
                    readonly type: "string";
                    readonly description: "Payment link title";
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Payment link description";
                };
                readonly image: {
                    readonly type: "string";
                    readonly description: "Payment link product image";
                };
                readonly publicImage: {
                    readonly type: "string";
                    readonly description: "Payment link product image with absolute public url";
                };
                readonly tags: {
                    readonly description: "Payment link tags";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly isActive: {
                    readonly type: "boolean";
                    readonly description: "Whether the payment link is currently active";
                };
                readonly nameCollection: {
                    readonly type: "boolean";
                    readonly description: "If true then take name from user";
                };
                readonly emailCollection: {
                    readonly type: "boolean";
                    readonly description: "If true then take email from user";
                };
                readonly phoneNumberCollection: {
                    readonly type: "boolean";
                    readonly description: "If true then take phone number from user";
                };
                readonly shippingAddressCollection: {
                    readonly type: "boolean";
                    readonly description: "If true then take shipping address from user";
                };
                readonly billingAddressCollection: {
                    readonly type: "boolean";
                    readonly description: "If true then take billing address from user";
                };
                readonly customFields: {
                    readonly type: "object";
                    readonly properties: {
                        readonly fields: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly key: {
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly enum: readonly ["text", "numeric", "dropdown"];
                                        readonly description: "`text` `numeric` `dropdown`";
                                    };
                                    readonly label: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["custom"];
                                                readonly description: "`custom`";
                                            };
                                            readonly custom: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly required: readonly ["custom"];
                                    };
                                    readonly optional: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                };
                                readonly required: readonly ["key", "type", "label", "optional"];
                            };
                        };
                    };
                };
                readonly submitType: {
                    readonly description: "Payment link submit type\n\n`pay` `book` `donate`";
                    readonly type: "string";
                    readonly enum: readonly ["pay", "book", "donate"];
                };
                readonly afterCompletion: {
                    readonly description: "After completion action to perform on checkout page\n\n`redirect` `hosted_confirmation`";
                    readonly type: "string";
                    readonly enum: readonly ["redirect", "hosted_confirmation"];
                };
                readonly afterCompletionRedirectUrl: {
                    readonly type: "string";
                    readonly description: "After completion redirect url to redirect user to after payment";
                };
                readonly afterCompletionConfirmMsg: {
                    readonly type: "string";
                    readonly description: "After completion confirmation message to show to user after payment";
                };
                readonly suggestedCurrency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "Suggested currency to take payment in\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly suggestedAmounts: {
                    readonly description: "Suggested amounts to show on checkout page if amount is not provided";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly productId: {
                    readonly type: "string";
                    readonly description: "Product id to take payment for";
                };
                readonly allowedChains: {
                    readonly description: "Allowed chains to take payment from";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly chainId: {
                                readonly type: "number";
                                readonly description: "Chain id";
                                readonly examples: readonly [1];
                            };
                            readonly isPreferred: {
                                readonly type: "boolean";
                                readonly description: "Is this chain preferred. If yes then it will be selected by default on checkout page";
                            };
                        };
                        readonly required: readonly ["chainId", "isPreferred"];
                    };
                };
                readonly interval: {
                    readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                    readonly type: "string";
                    readonly enum: readonly ["day", "week", "month", "year"];
                };
                readonly intervalCount: {
                    readonly type: "number";
                    readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                    readonly examples: readonly [1];
                };
                readonly priceType: {
                    readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                    readonly type: "string";
                    readonly enum: readonly ["one_time", "recurring", "streaming"];
                };
                readonly allowPromotionCodes: {
                    readonly type: "boolean";
                    readonly description: "Enables user redeemable promotion codes.";
                };
            };
            readonly required: readonly ["id", "organizationId", "type", "title", "tags", "nameCollection", "emailCollection", "phoneNumberCollection", "shippingAddressCollection", "billingAddressCollection", "submitType", "afterCompletion", "priceType"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PaymentLinkControllerDeactivate: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly linkId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["linkId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly description: "Organization's id";
                };
                readonly type: {
                    readonly description: "Payment link type\n\n`one_time` `multiple`";
                    readonly type: "string";
                    readonly enum: readonly ["one_time", "multiple"];
                };
                readonly amount: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "Amount to take from user in 8 decimal places. If not provided then user can enter any amount";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "Amount's . This field is deprecated and will be removed in future versions. Use currencies and preferredCurrency instead.\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                    readonly deprecated: true;
                };
                readonly currencies: {
                    readonly type: "array";
                    readonly description: "Currencies in which amount is to be taken";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                    };
                };
                readonly preferredCurrency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "Preferred currency. If provided then it will be selected by default on checkout page\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly title: {
                    readonly type: "string";
                    readonly description: "Payment link title";
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Payment link description";
                };
                readonly image: {
                    readonly type: "string";
                    readonly description: "Payment link product image";
                };
                readonly publicImage: {
                    readonly type: "string";
                    readonly description: "Payment link product image with absolute public url";
                };
                readonly tags: {
                    readonly description: "Payment link tags";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly isActive: {
                    readonly type: "boolean";
                    readonly description: "Whether the payment link is currently active";
                };
                readonly nameCollection: {
                    readonly type: "boolean";
                    readonly description: "If true then take name from user";
                };
                readonly emailCollection: {
                    readonly type: "boolean";
                    readonly description: "If true then take email from user";
                };
                readonly phoneNumberCollection: {
                    readonly type: "boolean";
                    readonly description: "If true then take phone number from user";
                };
                readonly shippingAddressCollection: {
                    readonly type: "boolean";
                    readonly description: "If true then take shipping address from user";
                };
                readonly billingAddressCollection: {
                    readonly type: "boolean";
                    readonly description: "If true then take billing address from user";
                };
                readonly customFields: {
                    readonly type: "object";
                    readonly properties: {
                        readonly fields: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly key: {
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly enum: readonly ["text", "numeric", "dropdown"];
                                        readonly description: "`text` `numeric` `dropdown`";
                                    };
                                    readonly label: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["custom"];
                                                readonly description: "`custom`";
                                            };
                                            readonly custom: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly required: readonly ["custom"];
                                    };
                                    readonly optional: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                };
                                readonly required: readonly ["key", "type", "label", "optional"];
                            };
                        };
                    };
                };
                readonly submitType: {
                    readonly description: "Payment link submit type\n\n`pay` `book` `donate`";
                    readonly type: "string";
                    readonly enum: readonly ["pay", "book", "donate"];
                };
                readonly afterCompletion: {
                    readonly description: "After completion action to perform on checkout page\n\n`redirect` `hosted_confirmation`";
                    readonly type: "string";
                    readonly enum: readonly ["redirect", "hosted_confirmation"];
                };
                readonly afterCompletionRedirectUrl: {
                    readonly type: "string";
                    readonly description: "After completion redirect url to redirect user to after payment";
                };
                readonly afterCompletionConfirmMsg: {
                    readonly type: "string";
                    readonly description: "After completion confirmation message to show to user after payment";
                };
                readonly suggestedCurrency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "Suggested currency to take payment in\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly suggestedAmounts: {
                    readonly description: "Suggested amounts to show on checkout page if amount is not provided";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly productId: {
                    readonly type: "string";
                    readonly description: "Product id to take payment for";
                };
                readonly allowedChains: {
                    readonly description: "Allowed chains to take payment from";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly chainId: {
                                readonly type: "number";
                                readonly description: "Chain id";
                                readonly examples: readonly [1];
                            };
                            readonly isPreferred: {
                                readonly type: "boolean";
                                readonly description: "Is this chain preferred. If yes then it will be selected by default on checkout page";
                            };
                        };
                        readonly required: readonly ["chainId", "isPreferred"];
                    };
                };
                readonly interval: {
                    readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                    readonly type: "string";
                    readonly enum: readonly ["day", "week", "month", "year"];
                };
                readonly intervalCount: {
                    readonly type: "number";
                    readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                    readonly examples: readonly [1];
                };
                readonly priceType: {
                    readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                    readonly type: "string";
                    readonly enum: readonly ["one_time", "recurring", "streaming"];
                };
                readonly allowPromotionCodes: {
                    readonly type: "boolean";
                    readonly description: "Enables user redeemable promotion codes.";
                };
            };
            readonly required: readonly ["id", "organizationId", "type", "title", "tags", "nameCollection", "emailCollection", "phoneNumberCollection", "shippingAddressCollection", "billingAddressCollection", "submitType", "afterCompletion", "priceType"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PaymentLinkControllerDelete: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly linkId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["linkId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "string";
                };
                readonly statusCode: {
                    readonly type: "number";
                };
            };
            readonly required: readonly ["message", "statusCode"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PaymentLinkControllerFindAll: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number. Starts from 1";
                };
                readonly limit: {
                    readonly type: "number";
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of items per page";
                };
                readonly createdAt: {
                    readonly type: "object";
                    readonly properties: {
                        readonly isnull: {
                            readonly type: "boolean";
                            readonly description: "Returns null values";
                        };
                        readonly notnull: {
                            readonly type: "boolean";
                            readonly description: "Returns not null values";
                        };
                        readonly gt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than the given date";
                            readonly examples: readonly ["2020-01-01"];
                        };
                        readonly gte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than or equal to the given date";
                        };
                        readonly lt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than the given date";
                        };
                        readonly lte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than or equal to the given date";
                        };
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by created date";
                };
                readonly ids: {
                    readonly type: "string";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0", "c3611c05-df51-4b47-b601-f2eac02f4ef2"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by id. Returns items with given ids";
                };
                readonly isActive: {
                    readonly type: "boolean";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter active payment links";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["page", "limit", "count", "hasMore", "data"];
            readonly properties: {
                readonly page: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly description: "Page number. Starts from 1";
                    readonly examples: readonly [1];
                };
                readonly limit: {
                    readonly type: "number";
                    readonly default: 200;
                    readonly description: "Number of items per page";
                    readonly examples: readonly [10];
                };
                readonly count: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly hasMore: {
                    readonly type: "boolean";
                };
                readonly query: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly default: 1;
                            readonly description: "Page number. Starts from 1";
                            readonly examples: readonly [1];
                        };
                        readonly limit: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly maximum: 200;
                            readonly default: 200;
                            readonly description: "Number of items per page";
                            readonly examples: readonly [10];
                        };
                        readonly createdAt: {
                            readonly description: "Filter by created date";
                            readonly type: "object";
                            readonly properties: {
                                readonly isnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns null values";
                                };
                                readonly notnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns not null values";
                                };
                                readonly gt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than the given date";
                                    readonly examples: readonly ["2020-01-01"];
                                };
                                readonly gte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than or equal to the given date";
                                };
                                readonly lt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than the given date";
                                };
                                readonly lte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than or equal to the given date";
                                };
                            };
                        };
                    };
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["id", "organizationId", "type", "title", "tags", "nameCollection", "emailCollection", "phoneNumberCollection", "shippingAddressCollection", "billingAddressCollection", "submitType", "afterCompletion", "priceType"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly organizationId: {
                                readonly type: "string";
                                readonly description: "Organization's id";
                            };
                            readonly type: {
                                readonly description: "Payment link type\n\n`one_time` `multiple`";
                                readonly type: "string";
                                readonly enum: readonly ["one_time", "multiple"];
                            };
                            readonly amount: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly description: "Amount to take from user in 8 decimal places. If not provided then user can enter any amount";
                                readonly examples: readonly ["9223372036854775807"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                readonly description: "Amount's . This field is deprecated and will be removed in future versions. Use currencies and preferredCurrency instead.\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                readonly deprecated: true;
                            };
                            readonly currencies: {
                                readonly type: "array";
                                readonly description: "Currencies in which amount is to be taken";
                                readonly items: {
                                    readonly type: "string";
                                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                    readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                };
                            };
                            readonly preferredCurrency: {
                                readonly type: "string";
                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                readonly description: "Preferred currency. If provided then it will be selected by default on checkout page\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                            };
                            readonly title: {
                                readonly type: "string";
                                readonly description: "Payment link title";
                            };
                            readonly description: {
                                readonly type: "string";
                                readonly description: "Payment link description";
                            };
                            readonly image: {
                                readonly type: "string";
                                readonly description: "Payment link product image";
                            };
                            readonly publicImage: {
                                readonly type: "string";
                                readonly description: "Payment link product image with absolute public url";
                            };
                            readonly tags: {
                                readonly description: "Payment link tags";
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly isActive: {
                                readonly type: "boolean";
                                readonly description: "Whether the payment link is currently active";
                            };
                            readonly nameCollection: {
                                readonly type: "boolean";
                                readonly description: "If true then take name from user";
                            };
                            readonly emailCollection: {
                                readonly type: "boolean";
                                readonly description: "If true then take email from user";
                            };
                            readonly phoneNumberCollection: {
                                readonly type: "boolean";
                                readonly description: "If true then take phone number from user";
                            };
                            readonly shippingAddressCollection: {
                                readonly type: "boolean";
                                readonly description: "If true then take shipping address from user";
                            };
                            readonly billingAddressCollection: {
                                readonly type: "boolean";
                                readonly description: "If true then take billing address from user";
                            };
                            readonly customFields: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly fields: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["key", "type", "label", "optional"];
                                            readonly properties: {
                                                readonly key: {
                                                    readonly type: "string";
                                                };
                                                readonly type: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["text", "numeric", "dropdown"];
                                                    readonly description: "`text` `numeric` `dropdown`";
                                                };
                                                readonly label: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["custom"];
                                                    readonly properties: {
                                                        readonly type: {
                                                            readonly type: "string";
                                                            readonly enum: readonly ["custom"];
                                                            readonly description: "`custom`";
                                                        };
                                                        readonly custom: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                                readonly optional: {
                                                    readonly type: "boolean";
                                                    readonly default: false;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            readonly submitType: {
                                readonly description: "Payment link submit type\n\n`pay` `book` `donate`";
                                readonly type: "string";
                                readonly enum: readonly ["pay", "book", "donate"];
                            };
                            readonly afterCompletion: {
                                readonly description: "After completion action to perform on checkout page\n\n`redirect` `hosted_confirmation`";
                                readonly type: "string";
                                readonly enum: readonly ["redirect", "hosted_confirmation"];
                            };
                            readonly afterCompletionRedirectUrl: {
                                readonly type: "string";
                                readonly description: "After completion redirect url to redirect user to after payment";
                            };
                            readonly afterCompletionConfirmMsg: {
                                readonly type: "string";
                                readonly description: "After completion confirmation message to show to user after payment";
                            };
                            readonly suggestedCurrency: {
                                readonly type: "string";
                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                readonly description: "Suggested currency to take payment in\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                            };
                            readonly suggestedAmounts: {
                                readonly description: "Suggested amounts to show on checkout page if amount is not provided";
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly productId: {
                                readonly type: "string";
                                readonly description: "Product id to take payment for";
                            };
                            readonly allowedChains: {
                                readonly description: "Allowed chains to take payment from";
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly required: readonly ["chainId", "isPreferred"];
                                    readonly properties: {
                                        readonly chainId: {
                                            readonly type: "number";
                                            readonly description: "Chain id";
                                            readonly examples: readonly [1];
                                        };
                                        readonly isPreferred: {
                                            readonly type: "boolean";
                                            readonly description: "Is this chain preferred. If yes then it will be selected by default on checkout page";
                                        };
                                    };
                                };
                            };
                            readonly interval: {
                                readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                                readonly type: "string";
                                readonly enum: readonly ["day", "week", "month", "year"];
                            };
                            readonly intervalCount: {
                                readonly type: "number";
                                readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                                readonly examples: readonly [1];
                            };
                            readonly priceType: {
                                readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                                readonly type: "string";
                                readonly enum: readonly ["one_time", "recurring", "streaming"];
                            };
                            readonly allowPromotionCodes: {
                                readonly type: "boolean";
                                readonly description: "Enables user redeemable promotion codes.";
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PaymentLinkControllerGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly linkId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["linkId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly description: "Organization's id";
                };
                readonly type: {
                    readonly description: "Payment link type\n\n`one_time` `multiple`";
                    readonly type: "string";
                    readonly enum: readonly ["one_time", "multiple"];
                };
                readonly amount: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "Amount to take from user in 8 decimal places. If not provided then user can enter any amount";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "Amount's . This field is deprecated and will be removed in future versions. Use currencies and preferredCurrency instead.\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                    readonly deprecated: true;
                };
                readonly currencies: {
                    readonly type: "array";
                    readonly description: "Currencies in which amount is to be taken";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                    };
                };
                readonly preferredCurrency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "Preferred currency. If provided then it will be selected by default on checkout page\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly title: {
                    readonly type: "string";
                    readonly description: "Payment link title";
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Payment link description";
                };
                readonly image: {
                    readonly type: "string";
                    readonly description: "Payment link product image";
                };
                readonly publicImage: {
                    readonly type: "string";
                    readonly description: "Payment link product image with absolute public url";
                };
                readonly tags: {
                    readonly description: "Payment link tags";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly isActive: {
                    readonly type: "boolean";
                    readonly description: "Whether the payment link is currently active";
                };
                readonly nameCollection: {
                    readonly type: "boolean";
                    readonly description: "If true then take name from user";
                };
                readonly emailCollection: {
                    readonly type: "boolean";
                    readonly description: "If true then take email from user";
                };
                readonly phoneNumberCollection: {
                    readonly type: "boolean";
                    readonly description: "If true then take phone number from user";
                };
                readonly shippingAddressCollection: {
                    readonly type: "boolean";
                    readonly description: "If true then take shipping address from user";
                };
                readonly billingAddressCollection: {
                    readonly type: "boolean";
                    readonly description: "If true then take billing address from user";
                };
                readonly customFields: {
                    readonly type: "object";
                    readonly properties: {
                        readonly fields: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly key: {
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly enum: readonly ["text", "numeric", "dropdown"];
                                        readonly description: "`text` `numeric` `dropdown`";
                                    };
                                    readonly label: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["custom"];
                                                readonly description: "`custom`";
                                            };
                                            readonly custom: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly required: readonly ["custom"];
                                    };
                                    readonly optional: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                };
                                readonly required: readonly ["key", "type", "label", "optional"];
                            };
                        };
                    };
                };
                readonly submitType: {
                    readonly description: "Payment link submit type\n\n`pay` `book` `donate`";
                    readonly type: "string";
                    readonly enum: readonly ["pay", "book", "donate"];
                };
                readonly afterCompletion: {
                    readonly description: "After completion action to perform on checkout page\n\n`redirect` `hosted_confirmation`";
                    readonly type: "string";
                    readonly enum: readonly ["redirect", "hosted_confirmation"];
                };
                readonly afterCompletionRedirectUrl: {
                    readonly type: "string";
                    readonly description: "After completion redirect url to redirect user to after payment";
                };
                readonly afterCompletionConfirmMsg: {
                    readonly type: "string";
                    readonly description: "After completion confirmation message to show to user after payment";
                };
                readonly suggestedCurrency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "Suggested currency to take payment in\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly suggestedAmounts: {
                    readonly description: "Suggested amounts to show on checkout page if amount is not provided";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly productId: {
                    readonly type: "string";
                    readonly description: "Product id to take payment for";
                };
                readonly allowedChains: {
                    readonly description: "Allowed chains to take payment from";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly chainId: {
                                readonly type: "number";
                                readonly description: "Chain id";
                                readonly examples: readonly [1];
                            };
                            readonly isPreferred: {
                                readonly type: "boolean";
                                readonly description: "Is this chain preferred. If yes then it will be selected by default on checkout page";
                            };
                        };
                        readonly required: readonly ["chainId", "isPreferred"];
                    };
                };
                readonly interval: {
                    readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                    readonly type: "string";
                    readonly enum: readonly ["day", "week", "month", "year"];
                };
                readonly intervalCount: {
                    readonly type: "number";
                    readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                    readonly examples: readonly [1];
                };
                readonly priceType: {
                    readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                    readonly type: "string";
                    readonly enum: readonly ["one_time", "recurring", "streaming"];
                };
                readonly allowPromotionCodes: {
                    readonly type: "boolean";
                    readonly description: "Enables user redeemable promotion codes.";
                };
            };
            readonly required: readonly ["id", "organizationId", "type", "title", "tags", "nameCollection", "emailCollection", "phoneNumberCollection", "shippingAddressCollection", "billingAddressCollection", "submitType", "afterCompletion", "priceType"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PaymentLinkControllerUpdate: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly type: {
                readonly description: "Payment link type";
                readonly type: "string";
                readonly enum: readonly ["one_time", "multiple"];
            };
            readonly amount: {
                readonly format: "int64";
                readonly type: "integer";
                readonly description: "Amount to take from user in 8 decimal places. If not provided then user can enter any amount";
                readonly examples: readonly ["9223372036854775807"];
                readonly minimum: -9223372036854776000;
                readonly maximum: 9223372036854776000;
            };
            readonly currency: {
                readonly type: "string";
                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                readonly description: "Amount's . This field is deprecated and will be removed in future versions. Use currencies and preferredCurrency instead.";
                readonly deprecated: true;
            };
            readonly currencies: {
                readonly type: "array";
                readonly description: "Currencies in which amount is to be taken";
                readonly items: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                };
            };
            readonly preferredCurrency: {
                readonly type: "string";
                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                readonly description: "Preferred currency. If provided then it will be selected by default on checkout page";
            };
            readonly title: {
                readonly type: "string";
                readonly description: "Payment link title";
            };
            readonly description: {
                readonly type: "string";
                readonly description: "Payment link description";
            };
            readonly image: {
                readonly type: "string";
                readonly description: "Payment link product image";
            };
            readonly tags: {
                readonly description: "Payment link tags";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly nameCollection: {
                readonly type: "boolean";
                readonly description: "If true then take name from user";
            };
            readonly emailCollection: {
                readonly type: "boolean";
                readonly description: "If true then take email from user";
            };
            readonly phoneNumberCollection: {
                readonly type: "boolean";
                readonly description: "If true then take phone number from user";
            };
            readonly shippingAddressCollection: {
                readonly type: "boolean";
                readonly description: "If true then take shipping address from user";
            };
            readonly billingAddressCollection: {
                readonly type: "boolean";
                readonly description: "If true then take billing address from user";
            };
            readonly customFields: {
                readonly type: "object";
                readonly properties: {
                    readonly fields: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly key: {
                                    readonly type: "string";
                                };
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["text", "numeric", "dropdown"];
                                };
                                readonly label: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["custom"];
                                        };
                                        readonly custom: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly required: readonly ["custom"];
                                };
                                readonly optional: {
                                    readonly type: "boolean";
                                    readonly default: false;
                                };
                            };
                            readonly required: readonly ["key", "type", "label", "optional"];
                        };
                    };
                };
            };
            readonly submitType: {
                readonly description: "Payment link submit type";
                readonly type: "string";
                readonly enum: readonly ["pay", "book", "donate"];
            };
            readonly afterCompletion: {
                readonly description: "After completion action to perform on checkout page";
                readonly type: "string";
                readonly enum: readonly ["redirect", "hosted_confirmation"];
            };
            readonly afterCompletionRedirectUrl: {
                readonly type: "string";
                readonly description: "After completion redirect url to redirect user to after payment";
            };
            readonly afterCompletionConfirmMsg: {
                readonly type: "string";
                readonly description: "After completion confirmation message to show to user after payment";
            };
            readonly suggestedCurrency: {
                readonly type: "string";
                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                readonly description: "Suggested currency to take payment in";
            };
            readonly suggestedAmounts: {
                readonly description: "Suggested amounts to show on checkout page if amount is not provided";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly productId: {
                readonly type: "string";
                readonly description: "Product id to take payment for";
            };
            readonly allowPromotionCodes: {
                readonly type: "boolean";
                readonly description: "Enables user redeemable promotion codes.";
            };
            readonly allowedChains: {
                readonly description: "Allowed chains to take payment from";
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly chainId: {
                            readonly type: "number";
                            readonly description: "Chain id";
                            readonly examples: readonly [1];
                        };
                        readonly isPreferred: {
                            readonly type: "boolean";
                            readonly description: "Is this chain preferred. If yes then it will be selected by default on checkout page";
                        };
                    };
                    readonly required: readonly ["chainId", "isPreferred"];
                };
            };
        };
        readonly required: readonly ["type", "title", "tags", "nameCollection", "emailCollection", "phoneNumberCollection", "shippingAddressCollection", "billingAddressCollection", "submitType", "afterCompletion"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly linkId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["linkId"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly description: "Organization's id";
                };
                readonly type: {
                    readonly description: "Payment link type\n\n`one_time` `multiple`";
                    readonly type: "string";
                    readonly enum: readonly ["one_time", "multiple"];
                };
                readonly amount: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "Amount to take from user in 8 decimal places. If not provided then user can enter any amount";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "Amount's . This field is deprecated and will be removed in future versions. Use currencies and preferredCurrency instead.\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                    readonly deprecated: true;
                };
                readonly currencies: {
                    readonly type: "array";
                    readonly description: "Currencies in which amount is to be taken";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                    };
                };
                readonly preferredCurrency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "Preferred currency. If provided then it will be selected by default on checkout page\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly title: {
                    readonly type: "string";
                    readonly description: "Payment link title";
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "Payment link description";
                };
                readonly image: {
                    readonly type: "string";
                    readonly description: "Payment link product image";
                };
                readonly publicImage: {
                    readonly type: "string";
                    readonly description: "Payment link product image with absolute public url";
                };
                readonly tags: {
                    readonly description: "Payment link tags";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly isActive: {
                    readonly type: "boolean";
                    readonly description: "Whether the payment link is currently active";
                };
                readonly nameCollection: {
                    readonly type: "boolean";
                    readonly description: "If true then take name from user";
                };
                readonly emailCollection: {
                    readonly type: "boolean";
                    readonly description: "If true then take email from user";
                };
                readonly phoneNumberCollection: {
                    readonly type: "boolean";
                    readonly description: "If true then take phone number from user";
                };
                readonly shippingAddressCollection: {
                    readonly type: "boolean";
                    readonly description: "If true then take shipping address from user";
                };
                readonly billingAddressCollection: {
                    readonly type: "boolean";
                    readonly description: "If true then take billing address from user";
                };
                readonly customFields: {
                    readonly type: "object";
                    readonly properties: {
                        readonly fields: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly key: {
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly enum: readonly ["text", "numeric", "dropdown"];
                                        readonly description: "`text` `numeric` `dropdown`";
                                    };
                                    readonly label: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["custom"];
                                                readonly description: "`custom`";
                                            };
                                            readonly custom: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly required: readonly ["custom"];
                                    };
                                    readonly optional: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                };
                                readonly required: readonly ["key", "type", "label", "optional"];
                            };
                        };
                    };
                };
                readonly submitType: {
                    readonly description: "Payment link submit type\n\n`pay` `book` `donate`";
                    readonly type: "string";
                    readonly enum: readonly ["pay", "book", "donate"];
                };
                readonly afterCompletion: {
                    readonly description: "After completion action to perform on checkout page\n\n`redirect` `hosted_confirmation`";
                    readonly type: "string";
                    readonly enum: readonly ["redirect", "hosted_confirmation"];
                };
                readonly afterCompletionRedirectUrl: {
                    readonly type: "string";
                    readonly description: "After completion redirect url to redirect user to after payment";
                };
                readonly afterCompletionConfirmMsg: {
                    readonly type: "string";
                    readonly description: "After completion confirmation message to show to user after payment";
                };
                readonly suggestedCurrency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "Suggested currency to take payment in\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly suggestedAmounts: {
                    readonly description: "Suggested amounts to show on checkout page if amount is not provided";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly productId: {
                    readonly type: "string";
                    readonly description: "Product id to take payment for";
                };
                readonly allowedChains: {
                    readonly description: "Allowed chains to take payment from";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly chainId: {
                                readonly type: "number";
                                readonly description: "Chain id";
                                readonly examples: readonly [1];
                            };
                            readonly isPreferred: {
                                readonly type: "boolean";
                                readonly description: "Is this chain preferred. If yes then it will be selected by default on checkout page";
                            };
                        };
                        readonly required: readonly ["chainId", "isPreferred"];
                    };
                };
                readonly interval: {
                    readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                    readonly type: "string";
                    readonly enum: readonly ["day", "week", "month", "year"];
                };
                readonly intervalCount: {
                    readonly type: "number";
                    readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                    readonly examples: readonly [1];
                };
                readonly priceType: {
                    readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                    readonly type: "string";
                    readonly enum: readonly ["one_time", "recurring", "streaming"];
                };
                readonly allowPromotionCodes: {
                    readonly type: "boolean";
                    readonly description: "Enables user redeemable promotion codes.";
                };
            };
            readonly required: readonly ["id", "organizationId", "type", "title", "tags", "nameCollection", "emailCollection", "phoneNumberCollection", "shippingAddressCollection", "billingAddressCollection", "submitType", "afterCompletion", "priceType"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PaymentSettingControllerGet: {
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly paymentMethodTypes: {
                    readonly type: "array";
                    readonly description: "A list of the types of payment methods";
                    readonly minItems: 1;
                    readonly maxItems: 1;
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                        readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                    };
                    readonly examples: readonly ["wallet"];
                };
                readonly allowedChains: {
                    readonly description: "The list of chains allowed for the payment. If not provided, all chains supported by the organization are enabled.";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly chainId: {
                                readonly type: "number";
                                readonly examples: readonly [1];
                            };
                            readonly blacklistCurrencies: {
                                readonly type: "array";
                                readonly description: "The list of currencies to disable for the payment. Note: This field is only used for checkout session API atm.";
                                readonly items: {
                                    readonly type: "string";
                                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                    readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                };
                                readonly examples: readonly ["usdc"];
                            };
                            readonly withdrawalAddress: {
                                readonly type: "string";
                                readonly description: "This is optional, default withdrawal address configured in dashboard under settings > payment methods is used. The custom withdrawal address to use for this chain instead of stored default withdrawal address.";
                            };
                            readonly withdrawalAddresses: {
                                readonly description: "The list of withdrawal addresses to split the payment. If provided, the sum of all split percentages should be 100.";
                                readonly minItems: 2;
                                readonly maxItems: 4;
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly splitPercentage: {
                                            readonly type: "number";
                                            readonly minimum: 0;
                                            readonly maximum: 100;
                                            readonly examples: readonly [1];
                                        };
                                        readonly address: {
                                            readonly type: "string";
                                            readonly description: "The withdrawal address for the split percentage";
                                        };
                                    };
                                    readonly required: readonly ["splitPercentage", "address"];
                                };
                            };
                        };
                        readonly required: readonly ["chainId"];
                    };
                };
                readonly allowedCurrencies: {
                    readonly type: "array";
                    readonly description: "The list of currencies allowed for the payment.";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                    };
                    readonly examples: readonly ["usdc", "usdt"];
                };
                readonly preferredChainId: {
                    readonly type: "number";
                    readonly description: "The preferred chain's id";
                    readonly examples: readonly [1];
                };
                readonly preferredCurrency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "The preferred currency for payment\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly allowSwap: {
                    readonly type: "boolean";
                    readonly description: "Whether the user can swap the payment currency";
                    readonly default: false;
                };
                readonly applyFee: {
                    readonly type: "boolean";
                    readonly description: "Whether add a application fee to the user payment";
                    readonly default: false;
                };
                readonly feePercentage: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly maximum: 100;
                    readonly description: "Percent that will be added to subtotal as a fee";
                    readonly examples: readonly [1];
                };
                readonly applyGasFee: {
                    readonly type: "boolean";
                    readonly description: "Whether add a transaction fee to the user payment";
                    readonly default: false;
                };
                readonly allowSplitPayments: {
                    readonly type: "boolean";
                    readonly description: "Whether the user can split the payment";
                };
                readonly slippagePercentage: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly maximum: 100;
                    readonly description: "The slippage percentage allowed for swaps and withdrawals";
                    readonly default: 10;
                    readonly examples: readonly [1];
                };
            };
            readonly required: readonly ["id", "feePercentage"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PriceControllerCreate: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly currency: {
                readonly type: "string";
                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                readonly description: "The currency symbol";
            };
            readonly interval: {
                readonly description: "The interval at which to bill for this price. Only required for subscriptions";
                readonly type: "string";
                readonly enum: readonly ["day", "week", "month", "year"];
            };
            readonly intervalCount: {
                readonly type: "number";
                readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                readonly examples: readonly [1];
            };
            readonly unitAmount: {
                readonly format: "int64";
                readonly type: "integer";
                readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                readonly examples: readonly ["9223372036854775807"];
                readonly minimum: -9223372036854776000;
                readonly maximum: 9223372036854776000;
            };
            readonly customPreset: {
                readonly format: "int64";
                readonly type: "integer";
                readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                readonly examples: readonly ["9223372036854775807"];
                readonly minimum: -9223372036854776000;
                readonly maximum: 9223372036854776000;
            };
            readonly customUnitAmountSuggestions: {
                readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly metadata: {
                readonly type: "object";
                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                readonly additionalProperties: true;
            };
            readonly visibility: {
                readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard";
                readonly type: "string";
                readonly enum: readonly [10, 20];
            };
            readonly nickname: {
                readonly type: "string";
                readonly description: "A nickname for the price, not displayed to customer. Only visible in the dashboard";
            };
            readonly type: {
                readonly description: "The type of the price. If price has interval and type is not provided then price type is set to default price type configured in settings";
                readonly default: "one_time";
                readonly type: "string";
                readonly enum: readonly ["one_time", "recurring", "streaming"];
            };
            readonly productId: {
                readonly type: "string";
                readonly format: "uuid";
                readonly description: "Product's id to create a price for";
                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
            };
            readonly productData: {
                readonly description: "The product data to create a product and a price for";
                readonly type: "object";
                readonly required: readonly ["name"];
                readonly properties: {
                    readonly name: {
                        readonly type: "string";
                        readonly description: "The name of the product. Displayed on the checkout page";
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly description: "The description of the product. Displayed on the checkout page";
                    };
                    readonly images: {
                        readonly maxItems: 8;
                        readonly description: "The url of product images. Displayed on the checkout page";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                    readonly unitLabel: {
                        readonly type: "string";
                        readonly description: "The label of the unit of the product. Displayed on the checkout page";
                    };
                    readonly url: {
                        readonly type: "string";
                        readonly description: "The url of the product";
                    };
                    readonly metadata: {
                        readonly type: "object";
                        readonly description: "The metadata of the product";
                        readonly additionalProperties: true;
                    };
                    readonly visibility: {
                        readonly description: "The visibility of the product";
                        readonly type: "string";
                        readonly enum: readonly [10, 20];
                    };
                };
            };
        };
        readonly required: readonly ["currency", "type"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly billingScheme: {
                    readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                    readonly type: "string";
                    readonly enum: readonly ["per_unit"];
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly productId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Product's id";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly interval: {
                    readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                    readonly type: "string";
                    readonly enum: readonly ["day", "week", "month", "year"];
                };
                readonly intervalCount: {
                    readonly type: "number";
                    readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                    readonly examples: readonly [1];
                };
                readonly isActive: {
                    readonly type: "boolean";
                    readonly description: "Whether the price is currently active";
                };
                readonly usageType: {
                    readonly description: "The usage type of the price.\n\n`licensed`";
                    readonly type: "string";
                    readonly enum: readonly ["licensed"];
                };
                readonly type: {
                    readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                    readonly type: "string";
                    readonly enum: readonly ["one_time", "recurring", "streaming"];
                };
                readonly unitAmount: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly unitAmountDecimal: {
                    readonly type: "string";
                };
                readonly customUnitMax: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly customUnitMin: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly customPreset: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly customUnitAmountSuggestions: {
                    readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly product: {
                    readonly description: "The product this price belongs to";
                    readonly type: "object";
                    readonly required: readonly ["id", "name"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name of the product. Displayed on the checkout page";
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "The description of the product. Displayed on the checkout page";
                        };
                        readonly isActive: {
                            readonly type: "boolean";
                            readonly description: "Whether the product is currently active";
                        };
                        readonly images: {
                            readonly maxItems: 8;
                            readonly description: "The url of product images. Displayed on the checkout page";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly publicImages: {
                            readonly description: "Product images with absolute public url";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly unitLabel: {
                            readonly type: "string";
                            readonly description: "The label of the unit of the product. Displayed on the checkout page";
                        };
                        readonly url: {
                            readonly type: "string";
                            readonly description: "The url of the product";
                        };
                        readonly defaultPriceId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Product's default price id";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "The metadata of the product";
                            readonly additionalProperties: true;
                        };
                        readonly visibility: {
                            readonly description: "The visibility of the product\n\n`10` `20`";
                            readonly type: "string";
                            readonly enum: readonly [10, 20];
                        };
                    };
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                    readonly additionalProperties: true;
                };
                readonly visibility: {
                    readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                    readonly type: "string";
                    readonly enum: readonly [10, 20];
                };
                readonly nickname: {
                    readonly type: "string";
                    readonly description: "A nickname for the price, not displayed to customer. Only visible in the dashboard";
                };
            };
            readonly required: readonly ["id", "currency", "productId", "type", "product"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PriceControllerFindAll: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number. Starts from 1";
                };
                readonly limit: {
                    readonly type: "number";
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of items per page";
                };
                readonly createdAt: {
                    readonly type: "object";
                    readonly properties: {
                        readonly isnull: {
                            readonly type: "boolean";
                            readonly description: "Returns null values";
                        };
                        readonly notnull: {
                            readonly type: "boolean";
                            readonly description: "Returns not null values";
                        };
                        readonly gt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than the given date";
                            readonly examples: readonly ["2020-01-01"];
                        };
                        readonly gte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than or equal to the given date";
                        };
                        readonly lt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than the given date";
                        };
                        readonly lte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than or equal to the given date";
                        };
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by created date";
                };
                readonly ids: {
                    readonly type: "string";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0", "c3611c05-df51-4b47-b601-f2eac02f4ef2"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by id. Returns items with given ids";
                };
                readonly visibility: {
                    readonly type: "string";
                    readonly enum: readonly [10, 20];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter prices by visibility";
                };
                readonly isActive: {
                    readonly type: "boolean";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "If true, only active prices will be returned";
                };
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["one_time", "recurring", "streaming"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter prices by type";
                };
                readonly productId: {
                    readonly type: "string";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter prices by product id";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["page", "limit", "count", "hasMore", "data"];
            readonly properties: {
                readonly page: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly description: "Page number. Starts from 1";
                    readonly examples: readonly [1];
                };
                readonly limit: {
                    readonly type: "number";
                    readonly default: 200;
                    readonly description: "Number of items per page";
                    readonly examples: readonly [10];
                };
                readonly count: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly hasMore: {
                    readonly type: "boolean";
                };
                readonly query: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly default: 1;
                            readonly description: "Page number. Starts from 1";
                            readonly examples: readonly [1];
                        };
                        readonly limit: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly maximum: 200;
                            readonly default: 200;
                            readonly description: "Number of items per page";
                            readonly examples: readonly [10];
                        };
                        readonly createdAt: {
                            readonly description: "Filter by created date";
                            readonly type: "object";
                            readonly properties: {
                                readonly isnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns null values";
                                };
                                readonly notnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns not null values";
                                };
                                readonly gt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than the given date";
                                    readonly examples: readonly ["2020-01-01"];
                                };
                                readonly gte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than or equal to the given date";
                                };
                                readonly lt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than the given date";
                                };
                                readonly lte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than or equal to the given date";
                                };
                            };
                        };
                    };
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["id", "currency", "productId", "type", "product"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly billingScheme: {
                                readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                                readonly type: "string";
                                readonly enum: readonly ["per_unit"];
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                            };
                            readonly productId: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "Product's id";
                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                            };
                            readonly interval: {
                                readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                                readonly type: "string";
                                readonly enum: readonly ["day", "week", "month", "year"];
                            };
                            readonly intervalCount: {
                                readonly type: "number";
                                readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                                readonly examples: readonly [1];
                            };
                            readonly isActive: {
                                readonly type: "boolean";
                                readonly description: "Whether the price is currently active";
                            };
                            readonly usageType: {
                                readonly description: "The usage type of the price.\n\n`licensed`";
                                readonly type: "string";
                                readonly enum: readonly ["licensed"];
                            };
                            readonly type: {
                                readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                                readonly type: "string";
                                readonly enum: readonly ["one_time", "recurring", "streaming"];
                            };
                            readonly unitAmount: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                                readonly examples: readonly ["9223372036854775807"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                            readonly unitAmountDecimal: {
                                readonly type: "string";
                            };
                            readonly customUnitMax: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                readonly examples: readonly ["9223372036854775807"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                            readonly customUnitMin: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                readonly examples: readonly ["9223372036854775807"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                            readonly customPreset: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                                readonly examples: readonly ["9223372036854775807"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                            readonly customUnitAmountSuggestions: {
                                readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly product: {
                                readonly description: "The product this price belongs to";
                                readonly type: "object";
                                readonly required: readonly ["id", "name"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly updatedAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "The name of the product. Displayed on the checkout page";
                                    };
                                    readonly description: {
                                        readonly type: "string";
                                        readonly description: "The description of the product. Displayed on the checkout page";
                                    };
                                    readonly isActive: {
                                        readonly type: "boolean";
                                        readonly description: "Whether the product is currently active";
                                    };
                                    readonly images: {
                                        readonly maxItems: 8;
                                        readonly description: "The url of product images. Displayed on the checkout page";
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly publicImages: {
                                        readonly description: "Product images with absolute public url";
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly unitLabel: {
                                        readonly type: "string";
                                        readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                    };
                                    readonly url: {
                                        readonly type: "string";
                                        readonly description: "The url of the product";
                                    };
                                    readonly defaultPriceId: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "Product's default price id";
                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                    };
                                    readonly metadata: {
                                        readonly type: "object";
                                        readonly description: "The metadata of the product";
                                        readonly additionalProperties: true;
                                    };
                                    readonly visibility: {
                                        readonly description: "The visibility of the product\n\n`10` `20`";
                                        readonly type: "string";
                                        readonly enum: readonly [10, 20];
                                    };
                                };
                            };
                            readonly metadata: {
                                readonly type: "object";
                                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                readonly additionalProperties: true;
                            };
                            readonly visibility: {
                                readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                                readonly type: "string";
                                readonly enum: readonly [10, 20];
                            };
                            readonly nickname: {
                                readonly type: "string";
                                readonly description: "A nickname for the price, not displayed to customer. Only visible in the dashboard";
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PriceControllerGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly billingScheme: {
                    readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                    readonly type: "string";
                    readonly enum: readonly ["per_unit"];
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly productId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Product's id";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly interval: {
                    readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                    readonly type: "string";
                    readonly enum: readonly ["day", "week", "month", "year"];
                };
                readonly intervalCount: {
                    readonly type: "number";
                    readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                    readonly examples: readonly [1];
                };
                readonly isActive: {
                    readonly type: "boolean";
                    readonly description: "Whether the price is currently active";
                };
                readonly usageType: {
                    readonly description: "The usage type of the price.\n\n`licensed`";
                    readonly type: "string";
                    readonly enum: readonly ["licensed"];
                };
                readonly type: {
                    readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                    readonly type: "string";
                    readonly enum: readonly ["one_time", "recurring", "streaming"];
                };
                readonly unitAmount: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly unitAmountDecimal: {
                    readonly type: "string";
                };
                readonly customUnitMax: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly customUnitMin: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly customPreset: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly customUnitAmountSuggestions: {
                    readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly product: {
                    readonly description: "The product this price belongs to";
                    readonly type: "object";
                    readonly required: readonly ["id", "name"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name of the product. Displayed on the checkout page";
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "The description of the product. Displayed on the checkout page";
                        };
                        readonly isActive: {
                            readonly type: "boolean";
                            readonly description: "Whether the product is currently active";
                        };
                        readonly images: {
                            readonly maxItems: 8;
                            readonly description: "The url of product images. Displayed on the checkout page";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly publicImages: {
                            readonly description: "Product images with absolute public url";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly unitLabel: {
                            readonly type: "string";
                            readonly description: "The label of the unit of the product. Displayed on the checkout page";
                        };
                        readonly url: {
                            readonly type: "string";
                            readonly description: "The url of the product";
                        };
                        readonly defaultPriceId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Product's default price id";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "The metadata of the product";
                            readonly additionalProperties: true;
                        };
                        readonly visibility: {
                            readonly description: "The visibility of the product\n\n`10` `20`";
                            readonly type: "string";
                            readonly enum: readonly [10, 20];
                        };
                    };
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                    readonly additionalProperties: true;
                };
                readonly visibility: {
                    readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                    readonly type: "string";
                    readonly enum: readonly [10, 20];
                };
                readonly nickname: {
                    readonly type: "string";
                    readonly description: "A nickname for the price, not displayed to customer. Only visible in the dashboard";
                };
            };
            readonly required: readonly ["id", "currency", "productId", "type", "product"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const PriceControllerUpdate: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly isActive: {
                readonly type: "boolean";
                readonly description: "Whether the price is currently active";
            };
            readonly metadata: {
                readonly type: "object";
                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                readonly additionalProperties: true;
            };
            readonly visibility: {
                readonly type: "string";
                readonly enum: readonly [10, 20];
                readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard";
            };
            readonly nickname: {
                readonly type: "string";
                readonly description: "A nickname for the price, not displayed to customer. Only visible in the dashboard";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly billingScheme: {
                    readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                    readonly type: "string";
                    readonly enum: readonly ["per_unit"];
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly productId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Product's id";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly interval: {
                    readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                    readonly type: "string";
                    readonly enum: readonly ["day", "week", "month", "year"];
                };
                readonly intervalCount: {
                    readonly type: "number";
                    readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                    readonly examples: readonly [1];
                };
                readonly isActive: {
                    readonly type: "boolean";
                    readonly description: "Whether the price is currently active";
                };
                readonly usageType: {
                    readonly description: "The usage type of the price.\n\n`licensed`";
                    readonly type: "string";
                    readonly enum: readonly ["licensed"];
                };
                readonly type: {
                    readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                    readonly type: "string";
                    readonly enum: readonly ["one_time", "recurring", "streaming"];
                };
                readonly unitAmount: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly unitAmountDecimal: {
                    readonly type: "string";
                };
                readonly customUnitMax: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly customUnitMin: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly customPreset: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly customUnitAmountSuggestions: {
                    readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly product: {
                    readonly description: "The product this price belongs to";
                    readonly type: "object";
                    readonly required: readonly ["id", "name"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name of the product. Displayed on the checkout page";
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "The description of the product. Displayed on the checkout page";
                        };
                        readonly isActive: {
                            readonly type: "boolean";
                            readonly description: "Whether the product is currently active";
                        };
                        readonly images: {
                            readonly maxItems: 8;
                            readonly description: "The url of product images. Displayed on the checkout page";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly publicImages: {
                            readonly description: "Product images with absolute public url";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly unitLabel: {
                            readonly type: "string";
                            readonly description: "The label of the unit of the product. Displayed on the checkout page";
                        };
                        readonly url: {
                            readonly type: "string";
                            readonly description: "The url of the product";
                        };
                        readonly defaultPriceId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Product's default price id";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "The metadata of the product";
                            readonly additionalProperties: true;
                        };
                        readonly visibility: {
                            readonly description: "The visibility of the product\n\n`10` `20`";
                            readonly type: "string";
                            readonly enum: readonly [10, 20];
                        };
                    };
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                    readonly additionalProperties: true;
                };
                readonly visibility: {
                    readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                    readonly type: "string";
                    readonly enum: readonly [10, 20];
                };
                readonly nickname: {
                    readonly type: "string";
                    readonly description: "A nickname for the price, not displayed to customer. Only visible in the dashboard";
                };
            };
            readonly required: readonly ["id", "currency", "productId", "type", "product"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ProductControllerActivate: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "The name of the product. Displayed on the checkout page";
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "The description of the product. Displayed on the checkout page";
                };
                readonly isActive: {
                    readonly type: "boolean";
                    readonly description: "Whether the product is currently active";
                };
                readonly images: {
                    readonly maxItems: 8;
                    readonly description: "The url of product images. Displayed on the checkout page";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly publicImages: {
                    readonly description: "Product images with absolute public url";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly unitLabel: {
                    readonly type: "string";
                    readonly description: "The label of the unit of the product. Displayed on the checkout page";
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "The url of the product";
                };
                readonly defaultPriceId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Product's default price id";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly description: "The metadata of the product";
                    readonly additionalProperties: true;
                };
                readonly visibility: {
                    readonly type: "string";
                    readonly enum: readonly [10, 20];
                    readonly description: "The visibility of the product\n\n`10` `20`";
                };
                readonly defaultPrice: {
                    readonly description: "The default price of the product";
                    readonly type: "object";
                    readonly required: readonly ["id", "currency", "productId", "type", "product"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly billingScheme: {
                            readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                            readonly type: "string";
                            readonly enum: readonly ["per_unit"];
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                            readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                        };
                        readonly productId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Product's id";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly interval: {
                            readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                            readonly type: "string";
                            readonly enum: readonly ["day", "week", "month", "year"];
                        };
                        readonly intervalCount: {
                            readonly type: "number";
                            readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                            readonly examples: readonly [1];
                        };
                        readonly isActive: {
                            readonly type: "boolean";
                            readonly description: "Whether the price is currently active";
                        };
                        readonly usageType: {
                            readonly description: "The usage type of the price.\n\n`licensed`";
                            readonly type: "string";
                            readonly enum: readonly ["licensed"];
                        };
                        readonly type: {
                            readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                            readonly type: "string";
                            readonly enum: readonly ["one_time", "recurring", "streaming"];
                        };
                        readonly unitAmount: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly unitAmountDecimal: {
                            readonly type: "string";
                        };
                        readonly customUnitMax: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly customUnitMin: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly customPreset: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly customUnitAmountSuggestions: {
                            readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly product: {
                            readonly description: "The product this price belongs to";
                            readonly type: "object";
                            readonly required: readonly ["id", "name"];
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name of the product. Displayed on the checkout page";
                                };
                                readonly description: {
                                    readonly type: "string";
                                    readonly description: "The description of the product. Displayed on the checkout page";
                                };
                                readonly isActive: {
                                    readonly type: "boolean";
                                    readonly description: "Whether the product is currently active";
                                };
                                readonly images: {
                                    readonly maxItems: 8;
                                    readonly description: "The url of product images. Displayed on the checkout page";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                                readonly publicImages: {
                                    readonly description: "Product images with absolute public url";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                                readonly unitLabel: {
                                    readonly type: "string";
                                    readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                };
                                readonly url: {
                                    readonly type: "string";
                                    readonly description: "The url of the product";
                                };
                                readonly defaultPriceId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly description: "Product's default price id";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly metadata: {
                                    readonly type: "object";
                                    readonly description: "The metadata of the product";
                                    readonly additionalProperties: true;
                                };
                                readonly visibility: {
                                    readonly description: "The visibility of the product\n\n`10` `20`";
                                    readonly type: "string";
                                    readonly enum: readonly [10, 20];
                                };
                            };
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                            readonly additionalProperties: true;
                        };
                        readonly visibility: {
                            readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                            readonly type: "string";
                            readonly enum: readonly [10, 20];
                        };
                    };
                };
            };
            readonly required: readonly ["id", "name"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ProductControllerCreate: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "The name of the product. Displayed on the checkout page";
            };
            readonly description: {
                readonly type: "string";
                readonly description: "The description of the product. Displayed on the checkout page";
            };
            readonly isActive: {
                readonly type: "boolean";
                readonly description: "Whether the product is currently active";
            };
            readonly images: {
                readonly maxItems: 8;
                readonly description: "The url of product images. Displayed on the checkout page";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly unitLabel: {
                readonly type: "string";
                readonly description: "The label of the unit of the product. Displayed on the checkout page";
            };
            readonly url: {
                readonly type: "string";
                readonly description: "The url of the product";
            };
            readonly metadata: {
                readonly type: "object";
                readonly description: "The metadata of the product";
                readonly additionalProperties: true;
            };
            readonly visibility: {
                readonly type: "string";
                readonly enum: readonly [10, 20];
                readonly description: "The visibility of the product";
            };
            readonly defaultPriceData: {
                readonly description: "The default price data to attach to the product";
                readonly type: "object";
                readonly required: readonly ["currency", "unitAmount"];
                readonly properties: {
                    readonly type: {
                        readonly type: "string";
                        readonly enum: readonly ["one_time", "recurring", "streaming"];
                        readonly description: "The type of the price";
                    };
                    readonly currency: {
                        readonly type: "string";
                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                        readonly description: "The currency symbol";
                    };
                    readonly unitAmount: {
                        readonly format: "int64";
                        readonly type: "integer";
                        readonly description: "The unit amount in 8 decimals, represented as a whole integer";
                        readonly examples: readonly ["9223372036854775807"];
                        readonly minimum: -9223372036854776000;
                        readonly maximum: 9223372036854776000;
                    };
                    readonly interval: {
                        readonly description: "The interval at which to bill for this price. Only required for subscriptions";
                        readonly type: "string";
                        readonly enum: readonly ["day", "week", "month", "year"];
                    };
                    readonly intervalCount: {
                        readonly type: "number";
                        readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                        readonly examples: readonly [1];
                    };
                };
            };
        };
        readonly required: readonly ["name", "defaultPriceData"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "The name of the product. Displayed on the checkout page";
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "The description of the product. Displayed on the checkout page";
                };
                readonly isActive: {
                    readonly type: "boolean";
                    readonly description: "Whether the product is currently active";
                };
                readonly images: {
                    readonly maxItems: 8;
                    readonly description: "The url of product images. Displayed on the checkout page";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly publicImages: {
                    readonly description: "Product images with absolute public url";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly unitLabel: {
                    readonly type: "string";
                    readonly description: "The label of the unit of the product. Displayed on the checkout page";
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "The url of the product";
                };
                readonly defaultPriceId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Product's default price id";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly description: "The metadata of the product";
                    readonly additionalProperties: true;
                };
                readonly visibility: {
                    readonly type: "string";
                    readonly enum: readonly [10, 20];
                    readonly description: "The visibility of the product\n\n`10` `20`";
                };
                readonly defaultPrice: {
                    readonly description: "The default price of the product";
                    readonly type: "object";
                    readonly required: readonly ["id", "currency", "productId", "type", "product"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly billingScheme: {
                            readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                            readonly type: "string";
                            readonly enum: readonly ["per_unit"];
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                            readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                        };
                        readonly productId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Product's id";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly interval: {
                            readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                            readonly type: "string";
                            readonly enum: readonly ["day", "week", "month", "year"];
                        };
                        readonly intervalCount: {
                            readonly type: "number";
                            readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                            readonly examples: readonly [1];
                        };
                        readonly isActive: {
                            readonly type: "boolean";
                            readonly description: "Whether the price is currently active";
                        };
                        readonly usageType: {
                            readonly description: "The usage type of the price.\n\n`licensed`";
                            readonly type: "string";
                            readonly enum: readonly ["licensed"];
                        };
                        readonly type: {
                            readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                            readonly type: "string";
                            readonly enum: readonly ["one_time", "recurring", "streaming"];
                        };
                        readonly unitAmount: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly unitAmountDecimal: {
                            readonly type: "string";
                        };
                        readonly customUnitMax: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly customUnitMin: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly customPreset: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly customUnitAmountSuggestions: {
                            readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly product: {
                            readonly description: "The product this price belongs to";
                            readonly type: "object";
                            readonly required: readonly ["id", "name"];
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name of the product. Displayed on the checkout page";
                                };
                                readonly description: {
                                    readonly type: "string";
                                    readonly description: "The description of the product. Displayed on the checkout page";
                                };
                                readonly isActive: {
                                    readonly type: "boolean";
                                    readonly description: "Whether the product is currently active";
                                };
                                readonly images: {
                                    readonly maxItems: 8;
                                    readonly description: "The url of product images. Displayed on the checkout page";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                                readonly publicImages: {
                                    readonly description: "Product images with absolute public url";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                                readonly unitLabel: {
                                    readonly type: "string";
                                    readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                };
                                readonly url: {
                                    readonly type: "string";
                                    readonly description: "The url of the product";
                                };
                                readonly defaultPriceId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly description: "Product's default price id";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly metadata: {
                                    readonly type: "object";
                                    readonly description: "The metadata of the product";
                                    readonly additionalProperties: true;
                                };
                                readonly visibility: {
                                    readonly description: "The visibility of the product\n\n`10` `20`";
                                    readonly type: "string";
                                    readonly enum: readonly [10, 20];
                                };
                            };
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                            readonly additionalProperties: true;
                        };
                        readonly visibility: {
                            readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                            readonly type: "string";
                            readonly enum: readonly [10, 20];
                        };
                    };
                };
            };
            readonly required: readonly ["id", "name"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ProductControllerDeactivate: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "The name of the product. Displayed on the checkout page";
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "The description of the product. Displayed on the checkout page";
                };
                readonly isActive: {
                    readonly type: "boolean";
                    readonly description: "Whether the product is currently active";
                };
                readonly images: {
                    readonly maxItems: 8;
                    readonly description: "The url of product images. Displayed on the checkout page";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly publicImages: {
                    readonly description: "Product images with absolute public url";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly unitLabel: {
                    readonly type: "string";
                    readonly description: "The label of the unit of the product. Displayed on the checkout page";
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "The url of the product";
                };
                readonly defaultPriceId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Product's default price id";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly description: "The metadata of the product";
                    readonly additionalProperties: true;
                };
                readonly visibility: {
                    readonly type: "string";
                    readonly enum: readonly [10, 20];
                    readonly description: "The visibility of the product\n\n`10` `20`";
                };
                readonly defaultPrice: {
                    readonly description: "The default price of the product";
                    readonly type: "object";
                    readonly required: readonly ["id", "currency", "productId", "type", "product"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly billingScheme: {
                            readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                            readonly type: "string";
                            readonly enum: readonly ["per_unit"];
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                            readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                        };
                        readonly productId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Product's id";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly interval: {
                            readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                            readonly type: "string";
                            readonly enum: readonly ["day", "week", "month", "year"];
                        };
                        readonly intervalCount: {
                            readonly type: "number";
                            readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                            readonly examples: readonly [1];
                        };
                        readonly isActive: {
                            readonly type: "boolean";
                            readonly description: "Whether the price is currently active";
                        };
                        readonly usageType: {
                            readonly description: "The usage type of the price.\n\n`licensed`";
                            readonly type: "string";
                            readonly enum: readonly ["licensed"];
                        };
                        readonly type: {
                            readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                            readonly type: "string";
                            readonly enum: readonly ["one_time", "recurring", "streaming"];
                        };
                        readonly unitAmount: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly unitAmountDecimal: {
                            readonly type: "string";
                        };
                        readonly customUnitMax: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly customUnitMin: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly customPreset: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly customUnitAmountSuggestions: {
                            readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly product: {
                            readonly description: "The product this price belongs to";
                            readonly type: "object";
                            readonly required: readonly ["id", "name"];
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name of the product. Displayed on the checkout page";
                                };
                                readonly description: {
                                    readonly type: "string";
                                    readonly description: "The description of the product. Displayed on the checkout page";
                                };
                                readonly isActive: {
                                    readonly type: "boolean";
                                    readonly description: "Whether the product is currently active";
                                };
                                readonly images: {
                                    readonly maxItems: 8;
                                    readonly description: "The url of product images. Displayed on the checkout page";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                                readonly publicImages: {
                                    readonly description: "Product images with absolute public url";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                                readonly unitLabel: {
                                    readonly type: "string";
                                    readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                };
                                readonly url: {
                                    readonly type: "string";
                                    readonly description: "The url of the product";
                                };
                                readonly defaultPriceId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly description: "Product's default price id";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly metadata: {
                                    readonly type: "object";
                                    readonly description: "The metadata of the product";
                                    readonly additionalProperties: true;
                                };
                                readonly visibility: {
                                    readonly description: "The visibility of the product\n\n`10` `20`";
                                    readonly type: "string";
                                    readonly enum: readonly [10, 20];
                                };
                            };
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                            readonly additionalProperties: true;
                        };
                        readonly visibility: {
                            readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                            readonly type: "string";
                            readonly enum: readonly [10, 20];
                        };
                    };
                };
            };
            readonly required: readonly ["id", "name"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ProductControllerDelete: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "string";
                };
                readonly statusCode: {
                    readonly type: "number";
                };
            };
            readonly required: readonly ["message", "statusCode"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ProductControllerFindAll: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number. Starts from 1";
                };
                readonly limit: {
                    readonly type: "number";
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of items per page";
                };
                readonly createdAt: {
                    readonly type: "object";
                    readonly properties: {
                        readonly isnull: {
                            readonly type: "boolean";
                            readonly description: "Returns null values";
                        };
                        readonly notnull: {
                            readonly type: "boolean";
                            readonly description: "Returns not null values";
                        };
                        readonly gt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than the given date";
                            readonly examples: readonly ["2020-01-01"];
                        };
                        readonly gte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than or equal to the given date";
                        };
                        readonly lt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than the given date";
                        };
                        readonly lte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than or equal to the given date";
                        };
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by created date";
                };
                readonly ids: {
                    readonly type: "string";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0", "c3611c05-df51-4b47-b601-f2eac02f4ef2"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by id. Returns items with given ids";
                };
                readonly visibility: {
                    readonly type: "string";
                    readonly enum: readonly [10, 20];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter products by visibility";
                };
                readonly isActive: {
                    readonly type: "boolean";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "If true, only active products will be returned";
                };
                readonly url: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter products by url";
                };
                readonly priceTypes: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter products by price type";
                };
                readonly interval: {
                    readonly type: "string";
                    readonly enum: readonly ["day", "week", "month", "year"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The interval at which to bill for this price. Only required for subscriptions";
                };
                readonly intervalCount: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                };
                readonly priceCurrency: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter products by price currency";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["page", "limit", "count", "hasMore", "data"];
            readonly properties: {
                readonly page: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly description: "Page number. Starts from 1";
                    readonly examples: readonly [1];
                };
                readonly limit: {
                    readonly type: "number";
                    readonly default: 200;
                    readonly description: "Number of items per page";
                    readonly examples: readonly [10];
                };
                readonly count: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly hasMore: {
                    readonly type: "boolean";
                };
                readonly query: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly default: 1;
                            readonly description: "Page number. Starts from 1";
                            readonly examples: readonly [1];
                        };
                        readonly limit: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly maximum: 200;
                            readonly default: 200;
                            readonly description: "Number of items per page";
                            readonly examples: readonly [10];
                        };
                        readonly createdAt: {
                            readonly description: "Filter by created date";
                            readonly type: "object";
                            readonly properties: {
                                readonly isnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns null values";
                                };
                                readonly notnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns not null values";
                                };
                                readonly gt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than the given date";
                                    readonly examples: readonly ["2020-01-01"];
                                };
                                readonly gte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than or equal to the given date";
                                };
                                readonly lt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than the given date";
                                };
                                readonly lte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than or equal to the given date";
                                };
                            };
                        };
                    };
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["id", "name"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "The name of the product. Displayed on the checkout page";
                            };
                            readonly description: {
                                readonly type: "string";
                                readonly description: "The description of the product. Displayed on the checkout page";
                            };
                            readonly isActive: {
                                readonly type: "boolean";
                                readonly description: "Whether the product is currently active";
                            };
                            readonly images: {
                                readonly maxItems: 8;
                                readonly description: "The url of product images. Displayed on the checkout page";
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly publicImages: {
                                readonly description: "Product images with absolute public url";
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly unitLabel: {
                                readonly type: "string";
                                readonly description: "The label of the unit of the product. Displayed on the checkout page";
                            };
                            readonly url: {
                                readonly type: "string";
                                readonly description: "The url of the product";
                            };
                            readonly defaultPriceId: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "Product's default price id";
                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                            };
                            readonly metadata: {
                                readonly type: "object";
                                readonly description: "The metadata of the product";
                                readonly additionalProperties: true;
                            };
                            readonly visibility: {
                                readonly type: "string";
                                readonly enum: readonly [10, 20];
                                readonly description: "The visibility of the product\n\n`10` `20`";
                            };
                            readonly defaultPrice: {
                                readonly description: "The default price of the product";
                                readonly type: "object";
                                readonly required: readonly ["id", "currency", "productId", "type", "product"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly updatedAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly billingScheme: {
                                        readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                                        readonly type: "string";
                                        readonly enum: readonly ["per_unit"];
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                        readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                    };
                                    readonly productId: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "Product's id";
                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                    };
                                    readonly interval: {
                                        readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                                        readonly type: "string";
                                        readonly enum: readonly ["day", "week", "month", "year"];
                                    };
                                    readonly intervalCount: {
                                        readonly type: "number";
                                        readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                                        readonly examples: readonly [1];
                                    };
                                    readonly isActive: {
                                        readonly type: "boolean";
                                        readonly description: "Whether the price is currently active";
                                    };
                                    readonly usageType: {
                                        readonly description: "The usage type of the price.\n\n`licensed`";
                                        readonly type: "string";
                                        readonly enum: readonly ["licensed"];
                                    };
                                    readonly type: {
                                        readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                                        readonly type: "string";
                                        readonly enum: readonly ["one_time", "recurring", "streaming"];
                                    };
                                    readonly unitAmount: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly unitAmountDecimal: {
                                        readonly type: "string";
                                    };
                                    readonly customUnitMax: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly customUnitMin: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly customPreset: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly customUnitAmountSuggestions: {
                                        readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly product: {
                                        readonly description: "The product this price belongs to";
                                        readonly type: "object";
                                        readonly required: readonly ["id", "name"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                                readonly description: "The name of the product. Displayed on the checkout page";
                                            };
                                            readonly description: {
                                                readonly type: "string";
                                                readonly description: "The description of the product. Displayed on the checkout page";
                                            };
                                            readonly isActive: {
                                                readonly type: "boolean";
                                                readonly description: "Whether the product is currently active";
                                            };
                                            readonly images: {
                                                readonly maxItems: 8;
                                                readonly description: "The url of product images. Displayed on the checkout page";
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                            readonly publicImages: {
                                                readonly description: "Product images with absolute public url";
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                            readonly unitLabel: {
                                                readonly type: "string";
                                                readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                            };
                                            readonly url: {
                                                readonly type: "string";
                                                readonly description: "The url of the product";
                                            };
                                            readonly defaultPriceId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "Product's default price id";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                            readonly metadata: {
                                                readonly type: "object";
                                                readonly description: "The metadata of the product";
                                                readonly additionalProperties: true;
                                            };
                                            readonly visibility: {
                                                readonly description: "The visibility of the product\n\n`10` `20`";
                                                readonly type: "string";
                                                readonly enum: readonly [10, 20];
                                            };
                                        };
                                    };
                                    readonly metadata: {
                                        readonly type: "object";
                                        readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                        readonly additionalProperties: true;
                                    };
                                    readonly visibility: {
                                        readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                                        readonly type: "string";
                                        readonly enum: readonly [10, 20];
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ProductControllerGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "The name of the product. Displayed on the checkout page";
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "The description of the product. Displayed on the checkout page";
                };
                readonly isActive: {
                    readonly type: "boolean";
                    readonly description: "Whether the product is currently active";
                };
                readonly images: {
                    readonly maxItems: 8;
                    readonly description: "The url of product images. Displayed on the checkout page";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly publicImages: {
                    readonly description: "Product images with absolute public url";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly unitLabel: {
                    readonly type: "string";
                    readonly description: "The label of the unit of the product. Displayed on the checkout page";
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "The url of the product";
                };
                readonly defaultPriceId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Product's default price id";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly description: "The metadata of the product";
                    readonly additionalProperties: true;
                };
                readonly visibility: {
                    readonly type: "string";
                    readonly enum: readonly [10, 20];
                    readonly description: "The visibility of the product\n\n`10` `20`";
                };
                readonly defaultPrice: {
                    readonly description: "The default price of the product";
                    readonly type: "object";
                    readonly required: readonly ["id", "currency", "productId", "type", "product"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly billingScheme: {
                            readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                            readonly type: "string";
                            readonly enum: readonly ["per_unit"];
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                            readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                        };
                        readonly productId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Product's id";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly interval: {
                            readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                            readonly type: "string";
                            readonly enum: readonly ["day", "week", "month", "year"];
                        };
                        readonly intervalCount: {
                            readonly type: "number";
                            readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                            readonly examples: readonly [1];
                        };
                        readonly isActive: {
                            readonly type: "boolean";
                            readonly description: "Whether the price is currently active";
                        };
                        readonly usageType: {
                            readonly description: "The usage type of the price.\n\n`licensed`";
                            readonly type: "string";
                            readonly enum: readonly ["licensed"];
                        };
                        readonly type: {
                            readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                            readonly type: "string";
                            readonly enum: readonly ["one_time", "recurring", "streaming"];
                        };
                        readonly unitAmount: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly unitAmountDecimal: {
                            readonly type: "string";
                        };
                        readonly customUnitMax: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly customUnitMin: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly customPreset: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly customUnitAmountSuggestions: {
                            readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly product: {
                            readonly description: "The product this price belongs to";
                            readonly type: "object";
                            readonly required: readonly ["id", "name"];
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name of the product. Displayed on the checkout page";
                                };
                                readonly description: {
                                    readonly type: "string";
                                    readonly description: "The description of the product. Displayed on the checkout page";
                                };
                                readonly isActive: {
                                    readonly type: "boolean";
                                    readonly description: "Whether the product is currently active";
                                };
                                readonly images: {
                                    readonly maxItems: 8;
                                    readonly description: "The url of product images. Displayed on the checkout page";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                                readonly publicImages: {
                                    readonly description: "Product images with absolute public url";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                                readonly unitLabel: {
                                    readonly type: "string";
                                    readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                };
                                readonly url: {
                                    readonly type: "string";
                                    readonly description: "The url of the product";
                                };
                                readonly defaultPriceId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly description: "Product's default price id";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly metadata: {
                                    readonly type: "object";
                                    readonly description: "The metadata of the product";
                                    readonly additionalProperties: true;
                                };
                                readonly visibility: {
                                    readonly description: "The visibility of the product\n\n`10` `20`";
                                    readonly type: "string";
                                    readonly enum: readonly [10, 20];
                                };
                            };
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                            readonly additionalProperties: true;
                        };
                        readonly visibility: {
                            readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                            readonly type: "string";
                            readonly enum: readonly [10, 20];
                        };
                    };
                };
            };
            readonly required: readonly ["id", "name"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ProductControllerUpdate: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "The name of the product. Displayed on the checkout page";
            };
            readonly description: {
                readonly type: "string";
                readonly description: "The description of the product. Displayed on the checkout page";
            };
            readonly isActive: {
                readonly type: "boolean";
                readonly description: "Whether the product is currently active";
            };
            readonly images: {
                readonly maxItems: 8;
                readonly description: "The url of product images. Displayed on the checkout page";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly unitLabel: {
                readonly type: "string";
                readonly description: "The label of the unit of the product. Displayed on the checkout page";
            };
            readonly url: {
                readonly type: "string";
                readonly description: "The url of the product";
            };
            readonly metadata: {
                readonly type: "object";
                readonly description: "The metadata of the product";
                readonly additionalProperties: true;
            };
            readonly visibility: {
                readonly type: "string";
                readonly enum: readonly [10, 20];
                readonly description: "The visibility of the product";
            };
            readonly defaultPriceId: {
                readonly type: "string";
                readonly format: "uuid";
                readonly description: "Product's default price id";
                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
            };
        };
        readonly required: readonly ["name", "defaultPriceId"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "The name of the product. Displayed on the checkout page";
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "The description of the product. Displayed on the checkout page";
                };
                readonly isActive: {
                    readonly type: "boolean";
                    readonly description: "Whether the product is currently active";
                };
                readonly images: {
                    readonly maxItems: 8;
                    readonly description: "The url of product images. Displayed on the checkout page";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly publicImages: {
                    readonly description: "Product images with absolute public url";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly unitLabel: {
                    readonly type: "string";
                    readonly description: "The label of the unit of the product. Displayed on the checkout page";
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "The url of the product";
                };
                readonly defaultPriceId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "Product's default price id";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly description: "The metadata of the product";
                    readonly additionalProperties: true;
                };
                readonly visibility: {
                    readonly type: "string";
                    readonly enum: readonly [10, 20];
                    readonly description: "The visibility of the product\n\n`10` `20`";
                };
                readonly defaultPrice: {
                    readonly description: "The default price of the product";
                    readonly type: "object";
                    readonly required: readonly ["id", "currency", "productId", "type", "product"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly billingScheme: {
                            readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                            readonly type: "string";
                            readonly enum: readonly ["per_unit"];
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                            readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                        };
                        readonly productId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Product's id";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly interval: {
                            readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                            readonly type: "string";
                            readonly enum: readonly ["day", "week", "month", "year"];
                        };
                        readonly intervalCount: {
                            readonly type: "number";
                            readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                            readonly examples: readonly [1];
                        };
                        readonly isActive: {
                            readonly type: "boolean";
                            readonly description: "Whether the price is currently active";
                        };
                        readonly usageType: {
                            readonly description: "The usage type of the price.\n\n`licensed`";
                            readonly type: "string";
                            readonly enum: readonly ["licensed"];
                        };
                        readonly type: {
                            readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                            readonly type: "string";
                            readonly enum: readonly ["one_time", "recurring", "streaming"];
                        };
                        readonly unitAmount: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly unitAmountDecimal: {
                            readonly type: "string";
                        };
                        readonly customUnitMax: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly customUnitMin: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly customPreset: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly customUnitAmountSuggestions: {
                            readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly product: {
                            readonly description: "The product this price belongs to";
                            readonly type: "object";
                            readonly required: readonly ["id", "name"];
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name of the product. Displayed on the checkout page";
                                };
                                readonly description: {
                                    readonly type: "string";
                                    readonly description: "The description of the product. Displayed on the checkout page";
                                };
                                readonly isActive: {
                                    readonly type: "boolean";
                                    readonly description: "Whether the product is currently active";
                                };
                                readonly images: {
                                    readonly maxItems: 8;
                                    readonly description: "The url of product images. Displayed on the checkout page";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                                readonly publicImages: {
                                    readonly description: "Product images with absolute public url";
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                                readonly unitLabel: {
                                    readonly type: "string";
                                    readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                };
                                readonly url: {
                                    readonly type: "string";
                                    readonly description: "The url of the product";
                                };
                                readonly defaultPriceId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly description: "Product's default price id";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly metadata: {
                                    readonly type: "object";
                                    readonly description: "The metadata of the product";
                                    readonly additionalProperties: true;
                                };
                                readonly visibility: {
                                    readonly description: "The visibility of the product\n\n`10` `20`";
                                    readonly type: "string";
                                    readonly enum: readonly [10, 20];
                                };
                            };
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                            readonly additionalProperties: true;
                        };
                        readonly visibility: {
                            readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                            readonly type: "string";
                            readonly enum: readonly [10, 20];
                        };
                    };
                };
            };
            readonly required: readonly ["id", "name"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const SessionsControllerAutoRecoverCheckoutSession: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly chainId: {
                readonly type: "number";
                readonly description: "Chain ID";
                readonly examples: readonly [1];
            };
            readonly transactionHash: {
                readonly type: "string";
                readonly description: "Transaction hash";
            };
        };
        readonly required: readonly ["chainId", "transactionHash"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "string";
                };
                readonly statusCode: {
                    readonly type: "number";
                };
            };
            readonly required: readonly ["message", "statusCode"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const SessionsControllerAutoRecoverCheckoutSessionByHash: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly chainId: {
                readonly type: "number";
                readonly description: "Chain ID";
                readonly examples: readonly [1];
            };
            readonly transactionHash: {
                readonly type: "string";
                readonly description: "Transaction hash";
            };
        };
        readonly required: readonly ["chainId", "transactionHash"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly description: "Organization id of the checkout session";
                };
                readonly mode: {
                    readonly description: "The mode of the Checkout Session.\n\n`payment` `subscription`";
                    readonly type: "string";
                    readonly enum: readonly ["payment", "subscription"];
                    readonly examples: readonly ["payment"];
                };
                readonly paymentLinkId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The payment link id used to create this checkout session";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly subscriptionId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The subscription created from this checkout session";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly invoiceId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The invoice created from this checkout session";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly amountTotal: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "A non-zero amount filled in with 8 decimal places. For example, 1 USDC is 100000000.";
                    readonly minimum: 0;
                    readonly examples: readonly [100000000];
                    readonly maximum: 9223372036854776000;
                };
                readonly amountSubtotal: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "Amount subtotal is total of all line items excluding tax, shipping, application fee and discount. A non-zero amount filled in with 8 decimal places. For example, 1 USDC is 100000000.";
                    readonly minimum: 0;
                    readonly examples: readonly [100000000];
                    readonly maximum: 9223372036854776000;
                };
                readonly amountGasFee: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "Amount fee is extra amount on top of amountSubtotal. If charged from end user.";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly amountFee: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "Amount fee is extra amount on top of amountSubtotal. If charged from end user.";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly amountNet: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly amountDetails: {
                    readonly description: "The amount details of the payment";
                    readonly type: "object";
                    readonly required: readonly ["currency", "amountTotal", "amountSubtotal", "amountDiscount", "amountTax", "amountFee", "applyFee", "applyGasFee", "discountAmounts"];
                    readonly properties: {
                        readonly currency: {
                            readonly description: "The currency of the payment\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                        };
                        readonly amountTotal: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The total amount of the payment after discounts and taxes";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountSubtotal: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The total amount of the payment before discounts and taxes";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountDiscount: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The total amount of the payment discount";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountTax: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The total amount of the payment tax";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountFee: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The total amount of the payment application fee";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountGasFee: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The total amount of the transaction gas fee. If null then we are not able to calculate gasFee";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly feePercentage: {
                            readonly type: "number";
                            readonly description: "The fee percentage to apply";
                            readonly examples: readonly [1];
                        };
                        readonly applyFee: {
                            readonly type: "boolean";
                            readonly description: "The flag to apply fee";
                        };
                        readonly applyGasFee: {
                            readonly type: "boolean";
                            readonly description: "The flag to apply gas fee";
                        };
                        readonly discountAmounts: {
                            readonly description: "The list of discount amounts";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly required: readonly ["amount", "couponId"];
                                readonly properties: {
                                    readonly amount: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "The amount of the discount";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly couponId: {
                                        readonly type: "string";
                                        readonly description: "The coupon id of the discount";
                                    };
                                };
                            };
                        };
                    };
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "Currency of the amount\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                    readonly examples: readonly ["usdc"];
                };
                readonly paymentMethodTypes: {
                    readonly type: "array";
                    readonly description: "A list of the types of payment methods (e.g. wallet) this Checkout Session is allowed to accept.";
                    readonly minItems: 1;
                    readonly maxItems: 1;
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                        readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                    };
                    readonly examples: readonly ["wallet"];
                };
                readonly paymentSetting: {
                    readonly description: "The payment method settings to use for this checkout's payment";
                    readonly type: "object";
                    readonly properties: {
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly description: "A list of the types of payment methods";
                            readonly minItems: 1;
                            readonly maxItems: 1;
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                            readonly examples: readonly ["wallet"];
                        };
                        readonly allowedChains: {
                            readonly description: "The list of chains allowed for the payment. If not provided, all chains supported by the organization are enabled.";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly required: readonly ["chainId"];
                                readonly properties: {
                                    readonly chainId: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly blacklistCurrencies: {
                                        readonly type: "array";
                                        readonly description: "The list of currencies to disable for the payment. Note: This field is only used for checkout session API atm.";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                        };
                                        readonly examples: readonly ["usdc"];
                                    };
                                    readonly withdrawalAddress: {
                                        readonly type: "string";
                                        readonly description: "This is optional, default withdrawal address configured in dashboard under settings > payment methods is used. The custom withdrawal address to use for this chain instead of stored default withdrawal address.";
                                    };
                                    readonly withdrawalAddresses: {
                                        readonly description: "The list of withdrawal addresses to split the payment. If provided, the sum of all split percentages should be 100.";
                                        readonly minItems: 2;
                                        readonly maxItems: 4;
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["splitPercentage", "address"];
                                            readonly properties: {
                                                readonly splitPercentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly examples: readonly [1];
                                                };
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "The withdrawal address for the split percentage";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly preferredChainId: {
                            readonly type: "number";
                            readonly description: "The preferred chain's id";
                            readonly examples: readonly [1];
                        };
                        readonly allowSwap: {
                            readonly type: "boolean";
                            readonly description: "Whether the user can swap the payment currency";
                            readonly default: false;
                        };
                        readonly allowFiatPayment: {
                            readonly type: "boolean";
                            readonly description: "Whether to allow payment with fiat currency. If set to true, the payment will be made in fiat currency.\n      This is experimental field and supposed to change. Default: false";
                        };
                    };
                };
                readonly status: {
                    readonly description: "The status of the session\n\n`open` `complete` `incomplete` `expired`";
                    readonly type: "string";
                    readonly enum: readonly ["open", "complete", "incomplete", "expired"];
                };
                readonly paymentStatus: {
                    readonly description: "The status of the payment\n\n`unpaid` `paid`";
                    readonly type: "string";
                    readonly enum: readonly ["unpaid", "paid"];
                };
                readonly expiresAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "The time at which the session will expire. Default: 1 Hour";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly description: "The ID of the customer if you want to associate the session with a customer";
                };
                readonly customer: {
                    readonly description: "The customer detail from saved customer's information. This is only available when customer id is provided or customer is stored";
                    readonly type: "object";
                    readonly required: readonly ["id", "customerNumber"];
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Customer's id";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's created at";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's updated at";
                        };
                        readonly customerReferenceId: {
                            readonly type: "string";
                            readonly description: "Customer's reference id";
                        };
                        readonly shipping: {
                            readonly description: "Customer's shipping address";
                            readonly type: "object";
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name";
                                };
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The email";
                                };
                                readonly phone: {
                                    readonly type: "string";
                                    readonly description: "The phone";
                                };
                                readonly organizationName: {
                                    readonly type: "string";
                                    readonly description: "The organization name";
                                };
                                readonly address: {
                                    readonly description: "The address";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly line1: {
                                            readonly type: "string";
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                        };
                                        readonly postalCode: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly taxIds: {
                            readonly type: "object";
                            readonly properties: {
                                readonly object: {
                                    readonly type: "string";
                                };
                                readonly data: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "customerId"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                            readonly customerId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly visibility: {
                            readonly description: "Customer's visibility. If Dashboard then displayed on dashboard UI. If API then only returned in API response only.\n\n`10` `20`";
                            readonly type: "string";
                            readonly enum: readonly [10, 20];
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "Customer's metadata";
                            readonly additionalProperties: true;
                        };
                        readonly customerNumber: {
                            readonly type: "string";
                            readonly description: "Customer number assigned by the system";
                        };
                    };
                };
                readonly customerDetails: {
                    readonly description: "The checkout sessions's customer detail";
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly email: {
                            readonly type: "string";
                        };
                        readonly phone: {
                            readonly type: "string";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly taxIds: {
                            readonly type: "object";
                            readonly properties: {
                                readonly object: {
                                    readonly type: "string";
                                };
                                readonly data: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "customerId"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                            readonly customerId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                readonly clientReferenceId: {
                    readonly type: "string";
                    readonly description: "Unique ID string used to identify the session in your backend. This can be your payment ID, cart ID, or similar used to link this Checkout Session with your internal system.";
                };
                readonly customerCreation: {
                    readonly description: "Whether to create a customer for the session. If required, a customer will be created for subsequent payments\n\n`if_required` `always`";
                    readonly type: "string";
                    readonly enum: readonly ["if_required", "always"];
                };
                readonly customerUpdate: {
                    readonly description: "The customer update settings to use for this checkout to update existing customer details";
                    readonly type: "object";
                    readonly properties: {
                        readonly address: {
                            readonly type: "string";
                            readonly enum: readonly ["auto", "never"];
                            readonly description: "`auto` `never`";
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly enum: readonly ["auto", "never"];
                            readonly description: "`auto` `never`";
                        };
                        readonly shipping: {
                            readonly type: "string";
                            readonly enum: readonly ["auto", "never"];
                            readonly description: "`auto` `never`";
                        };
                    };
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "The URL to redirect the customer to complete payment";
                };
                readonly successUrl: {
                    readonly type: "string";
                    readonly description: "The URL to redirect the customer to after payment is completed. Only applicable when `afterCompletion` is set to `redirect`";
                };
                readonly cancelUrl: {
                    readonly type: "string";
                    readonly description: "The URL to redirect the customer to if they decide to cancel payment";
                };
                readonly submitType: {
                    readonly default: "pay";
                    readonly description: "The type of submit button to display on the Checkout page\n\n`pay` `book` `donate`";
                    readonly type: "string";
                    readonly enum: readonly ["pay", "book", "donate"];
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly description: "A set of key-value pairs that you can attach to a Checkout Session object";
                    readonly additionalProperties: true;
                };
                readonly nameCollection: {
                    readonly type: "boolean";
                    readonly description: "Whether to collect the customer's name. Default: false";
                };
                readonly emailCollection: {
                    readonly type: "boolean";
                    readonly description: "Whether to collect the customer's email address. Default: false";
                };
                readonly phoneNumberCollection: {
                    readonly type: "boolean";
                    readonly description: "Whether to collect the customer's phone number Default: false";
                };
                readonly shippingAddressCollection: {
                    readonly type: "boolean";
                    readonly description: "Whether to collect the customer's shipping address. Default: false";
                };
                readonly billingAddressCollection: {
                    readonly type: "boolean";
                    readonly description: "Whether to collect the customer's billing address. Default: false";
                };
                readonly customFields: {
                    readonly type: "object";
                    readonly properties: {
                        readonly fields: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly key: {
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly enum: readonly ["text", "numeric", "dropdown"];
                                        readonly description: "`text` `numeric` `dropdown`";
                                    };
                                    readonly label: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["custom"];
                                                readonly description: "`custom`";
                                            };
                                            readonly custom: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly required: readonly ["custom"];
                                    };
                                    readonly optional: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                    readonly text: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly maximumLength: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly minimumLength: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly required: readonly ["value"];
                                    };
                                    readonly numeric: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly maximumLength: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly minimumLength: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly required: readonly ["value"];
                                    };
                                    readonly dropdown: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly options: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly label: {
                                                            readonly type: "string";
                                                        };
                                                        readonly value: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly required: readonly ["label", "value"];
                                                };
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly required: readonly ["value"];
                                    };
                                };
                                readonly required: readonly ["key", "type", "label", "optional"];
                            };
                        };
                    };
                };
                readonly afterCompletion: {
                    readonly description: "The action to take after the payment is completed. You can choose to redirect user to your application or use the default payment confirmation page provided by Copperx\n\n`redirect` `hosted_confirmation`";
                    readonly type: "string";
                    readonly enum: readonly ["redirect", "hosted_confirmation"];
                };
                readonly afterCompletionConfirmMsg: {
                    readonly type: "string";
                    readonly description: "The message to show after successful payment. Only applicable when `afterCompletion` is set to `hosted_confirmation`";
                };
                readonly shippingDetails: {
                    readonly description: "The shipping address to use for this checkout";
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                };
                readonly billingDetails: {
                    readonly description: "The billing address to use for this checkout";
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                };
                readonly lineItems: {
                    readonly description: "The list of line items to display on the session";
                    readonly type: "object";
                    readonly properties: {
                        readonly object: {
                            readonly type: "string";
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly required: readonly ["price"];
                                readonly properties: {
                                    readonly description: {
                                        readonly type: "string";
                                    };
                                    readonly quantity: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly price: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "currency", "productId", "type", "product"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly billingScheme: {
                                                readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                                                readonly type: "string";
                                                readonly enum: readonly ["per_unit"];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                                readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                            };
                                            readonly productId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "Product's id";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                            readonly interval: {
                                                readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                                                readonly type: "string";
                                                readonly enum: readonly ["day", "week", "month", "year"];
                                            };
                                            readonly intervalCount: {
                                                readonly type: "number";
                                                readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                                                readonly examples: readonly [1];
                                            };
                                            readonly isActive: {
                                                readonly type: "boolean";
                                                readonly description: "Whether the price is currently active";
                                            };
                                            readonly usageType: {
                                                readonly description: "The usage type of the price.\n\n`licensed`";
                                                readonly type: "string";
                                                readonly enum: readonly ["licensed"];
                                            };
                                            readonly type: {
                                                readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                                                readonly type: "string";
                                                readonly enum: readonly ["one_time", "recurring", "streaming"];
                                            };
                                            readonly unitAmount: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly unitAmountDecimal: {
                                                readonly type: "string";
                                            };
                                            readonly customUnitMax: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitMin: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customPreset: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitAmountSuggestions: {
                                                readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                            readonly product: {
                                                readonly description: "The product this price belongs to";
                                                readonly type: "object";
                                                readonly required: readonly ["id", "name"];
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                    };
                                                    readonly createdAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly updatedAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the product. Displayed on the checkout page";
                                                    };
                                                    readonly description: {
                                                        readonly type: "string";
                                                        readonly description: "The description of the product. Displayed on the checkout page";
                                                    };
                                                    readonly isActive: {
                                                        readonly type: "boolean";
                                                        readonly description: "Whether the product is currently active";
                                                    };
                                                    readonly images: {
                                                        readonly maxItems: 8;
                                                        readonly description: "The url of product images. Displayed on the checkout page";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly publicImages: {
                                                        readonly description: "Product images with absolute public url";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly unitLabel: {
                                                        readonly type: "string";
                                                        readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                                    };
                                                    readonly url: {
                                                        readonly type: "string";
                                                        readonly description: "The url of the product";
                                                    };
                                                    readonly defaultPriceId: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Product's default price id";
                                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                    };
                                                    readonly metadata: {
                                                        readonly type: "object";
                                                        readonly description: "The metadata of the product";
                                                        readonly additionalProperties: true;
                                                    };
                                                    readonly visibility: {
                                                        readonly description: "The visibility of the product\n\n`10` `20`";
                                                        readonly type: "string";
                                                        readonly enum: readonly [10, 20];
                                                    };
                                                };
                                            };
                                            readonly metadata: {
                                                readonly type: "object";
                                                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                                readonly additionalProperties: true;
                                            };
                                            readonly visibility: {
                                                readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                                                readonly type: "string";
                                                readonly enum: readonly [10, 20];
                                            };
                                        };
                                    };
                                    readonly taxRates: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["id", "name", "percentage", "type", "isDefault"];
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the tax rate.";
                                                };
                                                readonly description: {
                                                    readonly type: "string";
                                                    readonly description: "The description of the tax rate.";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                    readonly description: "The country of the tax rate.";
                                                };
                                                readonly percentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly description: "Percent that will be added to subtotal as a tax.";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly type: {
                                                    readonly description: "The type of the tax rate.\n\n`exclusive` `inclusive`";
                                                    readonly type: "string";
                                                    readonly enum: readonly ["exclusive", "inclusive"];
                                                };
                                                readonly isDefault: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                        };
                                    };
                                    readonly amountTotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountSubtotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountTax: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                };
                            };
                        };
                    };
                };
                readonly addresses: {
                    readonly description: "The list of payment addresses associated with the session. It is the list of the addresses that will be used to pay the amount.";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly checkoutSessionId: {
                                readonly type: "string";
                            };
                            readonly asset: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly address: {
                                        readonly type: "string";
                                    };
                                    readonly chainId: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                    readonly symbol: {
                                        readonly type: "string";
                                    };
                                    readonly decimals: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly coingeckoId: {
                                        readonly type: "string";
                                    };
                                    readonly isPublic: {
                                        readonly type: "boolean";
                                    };
                                    readonly superToken: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly address: {
                                                readonly type: "string";
                                                readonly description: "SuperToken's address";
                                            };
                                            readonly decimals: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly symbol: {
                                                readonly type: "string";
                                                readonly description: "SuperToken's symbol";
                                            };
                                        };
                                        readonly required: readonly ["address", "decimals", "symbol"];
                                    };
                                    readonly chain: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "number";
                                                readonly description: "Chain id";
                                                readonly examples: readonly [1];
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                                readonly description: "Chain name";
                                            };
                                            readonly icon: {
                                                readonly type: "string";
                                                readonly description: "Chain icon";
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                readonly description: "Chain currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                            };
                                            readonly blockExplorerTransactionUrl: {
                                                readonly type: "string";
                                                readonly description: "Chain block explorer transaction url";
                                            };
                                            readonly blockExplorerName: {
                                                readonly type: "string";
                                                readonly description: "Chain block explorer name";
                                            };
                                            readonly type: {
                                                readonly description: "Chain type\n\n`evm` `solana` `tron` `stripe` `binance_pay`";
                                                readonly type: "string";
                                                readonly enum: readonly ["evm", "solana", "tron", "stripe", "binance_pay"];
                                            };
                                            readonly isBeta: {
                                                readonly type: "boolean";
                                                readonly description: "Is beta asset";
                                            };
                                        };
                                        readonly required: readonly ["id", "name", "icon", "currency", "blockExplorerTransactionUrl", "blockExplorerName", "type", "isBeta"];
                                    };
                                };
                                readonly required: readonly ["id", "name", "address", "chainId", "currency", "symbol", "decimals", "isPublic", "chain"];
                            };
                            readonly paymentAddress: {
                                readonly type: "string";
                            };
                            readonly gas: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly description: "This approx estimated gas required to withdraw amount from the payment address. It is in gas unit, and need to multiply by gas price to get the total gas fee in native token";
                                readonly examples: readonly ["9223372036854775807"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                            readonly gasAmount: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly description: "This the approx estimated total amount a user should pay in checkout session currency as transaction fees. This is equivalent to gas * gasPrice. This amount is in 8 (currency decimals)This can be null if gas fee is inclusive of subtotal and not additionally charged";
                                readonly examples: readonly ["9223372036854775807"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                        };
                        readonly required: readonly ["id", "checkoutSessionId", "asset", "paymentAddress"];
                    };
                };
                readonly paymentIntent: {
                    readonly description: "The payment intent associated with the session. Payment intent is created when the session is created.";
                    readonly type: "object";
                    readonly required: readonly ["id", "organizationId", "status", "paymentMethodId", "transactions"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly organizationId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly amount: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountReceived: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"];
                            readonly description: "`requires_payment_method` `requires_confirmation` `requires_action` `processing` `requires_capture` `canceled` `succeeded`";
                        };
                        readonly paymentMethodId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly description: {
                            readonly type: "string";
                        };
                        readonly paymentMethod: {
                            readonly type: "object";
                            readonly required: readonly ["id", "assetId", "asset", "type"];
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly assetId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly asset: {
                                    readonly type: "object";
                                    readonly required: readonly ["id", "name", "chainId", "address", "currency", "symbol", "decimals", "isEIP5827Supported"];
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "Asset id";
                                        };
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "Asset name";
                                        };
                                        readonly chainId: {
                                            readonly type: "number";
                                            readonly description: "Asset chain id";
                                            readonly examples: readonly [1];
                                        };
                                        readonly address: {
                                            readonly type: "string";
                                            readonly description: "Asset address on chain";
                                        };
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                            readonly description: "Asset currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                        };
                                        readonly symbol: {
                                            readonly type: "string";
                                            readonly description: "Asset symbol";
                                        };
                                        readonly decimals: {
                                            readonly type: "number";
                                            readonly description: "Asset decimals in which it is represented on chain";
                                            readonly examples: readonly [1];
                                        };
                                        readonly coingeckoId: {
                                            readonly type: "string";
                                            readonly description: "Asset coingecko id";
                                        };
                                        readonly superToken: {
                                            readonly description: "SuperToken data";
                                            readonly type: "object";
                                            readonly required: readonly ["address", "decimals", "symbol"];
                                            readonly properties: {
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's address";
                                                };
                                                readonly decimals: {
                                                    readonly type: "number";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly symbol: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's symbol";
                                                };
                                            };
                                        };
                                        readonly isEIP5827Supported: {
                                            readonly type: "boolean";
                                            readonly description: "Is EIP5827 supported";
                                        };
                                    };
                                };
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                    readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                                };
                                readonly accountAddress: {
                                    readonly type: "string";
                                };
                                readonly billingDetails: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "The name";
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                            readonly description: "The email";
                                        };
                                        readonly phone: {
                                            readonly type: "string";
                                            readonly description: "The phone";
                                        };
                                        readonly organizationName: {
                                            readonly type: "string";
                                            readonly description: "The organization name";
                                        };
                                        readonly address: {
                                            readonly description: "The address";
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly line1: {
                                                    readonly type: "string";
                                                };
                                                readonly line2: {
                                                    readonly type: "string";
                                                };
                                                readonly city: {
                                                    readonly type: "string";
                                                };
                                                readonly state: {
                                                    readonly type: "string";
                                                };
                                                readonly postalCode: {
                                                    readonly type: "string";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly customerId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                };
                            };
                        };
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                        };
                        readonly transferAccountAddress: {
                            readonly type: "string";
                        };
                        readonly transactions: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly required: readonly ["type", "fromAddress", "toAddress", "currency", "amountRaw", "assetId", "asset"];
                                readonly properties: {
                                    readonly type: {
                                        readonly description: "Transaction type\n\n`incoming` `outgoing` `event` `transfer`";
                                        readonly type: "string";
                                        readonly enum: readonly ["incoming", "outgoing", "event", "transfer"];
                                    };
                                    readonly transactionRelayId: {
                                        readonly type: "string";
                                        readonly description: "Transaction relay id";
                                    };
                                    readonly transactionHash: {
                                        readonly type: "string";
                                        readonly description: "Transaction hash";
                                    };
                                    readonly nonce: {
                                        readonly type: "number";
                                        readonly description: "Transaction nonce";
                                        readonly examples: readonly [1];
                                    };
                                    readonly gasLimit: {
                                        readonly type: "number";
                                        readonly description: "Transaction gas limit used in payment";
                                        readonly examples: readonly [1];
                                    };
                                    readonly validUntil: {
                                        readonly type: "string";
                                        readonly description: "Transaction valid until";
                                    };
                                    readonly fromAddress: {
                                        readonly type: "string";
                                        readonly description: "Transaction from address";
                                    };
                                    readonly toAddress: {
                                        readonly type: "string";
                                        readonly description: "Transaction to address";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "Transaction currency\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                        readonly description: "Transaction created at";
                                    };
                                    readonly amount: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "Transaction amount in 8 decimals";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountRaw: {
                                        readonly type: "string";
                                        readonly description: "Transaction amount raw received from alchemy";
                                    };
                                    readonly assetId: {
                                        readonly type: "string";
                                        readonly description: "Transaction asset id";
                                    };
                                    readonly asset: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "name", "address", "chainId", "currency", "symbol", "decimals", "isPublic", "chain"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly address: {
                                                readonly type: "string";
                                            };
                                            readonly chainId: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                            };
                                            readonly symbol: {
                                                readonly type: "string";
                                            };
                                            readonly decimals: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly coingeckoId: {
                                                readonly type: "string";
                                            };
                                            readonly isPublic: {
                                                readonly type: "boolean";
                                            };
                                            readonly superToken: {
                                                readonly type: "object";
                                                readonly required: readonly ["address", "decimals", "symbol"];
                                                readonly properties: {
                                                    readonly address: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's address";
                                                    };
                                                    readonly decimals: {
                                                        readonly type: "number";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly symbol: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's symbol";
                                                    };
                                                };
                                            };
                                            readonly chain: {
                                                readonly type: "object";
                                                readonly required: readonly ["id", "name", "icon", "currency", "blockExplorerTransactionUrl", "blockExplorerName", "type", "isBeta"];
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "number";
                                                        readonly description: "Chain id";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "Chain name";
                                                    };
                                                    readonly icon: {
                                                        readonly type: "string";
                                                        readonly description: "Chain icon";
                                                    };
                                                    readonly currency: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                        readonly description: "Chain currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                                    };
                                                    readonly blockExplorerTransactionUrl: {
                                                        readonly type: "string";
                                                        readonly description: "Chain block explorer transaction url";
                                                    };
                                                    readonly blockExplorerName: {
                                                        readonly type: "string";
                                                        readonly description: "Chain block explorer name";
                                                    };
                                                    readonly type: {
                                                        readonly description: "Chain type\n\n`evm` `solana` `tron` `stripe` `binance_pay`";
                                                        readonly type: "string";
                                                        readonly enum: readonly ["evm", "solana", "tron", "stripe", "binance_pay"];
                                                    };
                                                    readonly isBeta: {
                                                        readonly type: "boolean";
                                                        readonly description: "Is beta asset";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly transactionUrl: {
                                        readonly type: "string";
                                        readonly description: "Transaction url";
                                    };
                                };
                            };
                        };
                        readonly paymentReceipt: {
                            readonly type: "object";
                            readonly required: readonly ["id", "organizationId", "paymentIntentId", "receiptNumber"];
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly organizationId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly paymentIntentId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly receiptNumber: {
                                    readonly type: "string";
                                };
                                readonly uri: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly canceledAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly cancellationReason: {
                            readonly type: "string";
                        };
                        readonly stripe: {
                            readonly type: "object";
                            readonly properties: {
                                readonly paymentIntentId: {
                                    readonly type: "string";
                                };
                                readonly receiptUrl: {
                                    readonly type: "string";
                                };
                                readonly cardLast4: {
                                    readonly type: "string";
                                };
                                readonly displayName: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly isMarkRefunded: {
                            readonly type: "boolean";
                        };
                        readonly markRefundedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly markRefundedComment: {
                            readonly type: "string";
                        };
                    };
                };
                readonly isMarkRefunded: {
                    readonly type: "boolean";
                    readonly description: "Whether to mark the payment as refunded";
                };
                readonly allowPromotionCodes: {
                    readonly type: "boolean";
                    readonly description: "Enables user redeemable promotion codes.";
                };
                readonly discounts: {
                    readonly description: "The list of discounts applied to the session";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly amount: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly description: "The amount of the discount";
                                readonly examples: readonly ["9223372036854775807"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                            readonly couponId: {
                                readonly type: "string";
                                readonly description: "The coupon id of the discount";
                            };
                            readonly coupon: {
                                readonly description: "The coupon of the discount";
                                readonly type: "object";
                                readonly required: readonly ["name", "code"];
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of the coupon displayed to customers on for instance invoices or receipts.";
                                    };
                                    readonly percentOff: {
                                        readonly type: "number";
                                        readonly minimum: 0;
                                        readonly maximum: 100;
                                        readonly description: "Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.";
                                        readonly examples: readonly [1];
                                    };
                                    readonly amountOff: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "Fixed amount that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.";
                                        readonly minimum: 0;
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly description: "Name of the currency displayed to customers on for instance invoices or receipts.";
                                    };
                                    readonly code: {
                                        readonly type: "string";
                                        readonly description: "The coupon code";
                                    };
                                };
                            };
                        };
                        readonly required: readonly ["amount", "couponId", "coupon"];
                    };
                };
                readonly defaultPromotionCode: {
                    readonly type: "string";
                    readonly description: "The default promotion code to apply to the session";
                };
                readonly isManualPayment: {
                    readonly type: "boolean";
                };
            };
            readonly required: readonly ["id", "organizationId", "amountTotal", "amountSubtotal", "currency", "status", "paymentStatus", "url", "lineItems", "addresses", "paymentIntent", "discounts", "isManualPayment"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const SessionsControllerCheckoutSessionCompletedStatus: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly completed: {
                    readonly type: "boolean";
                    readonly description: "if true, the checkout session was completed";
                };
                readonly transactionHash: {
                    readonly type: "string";
                    readonly description: "The transaction hash of the payment";
                };
                readonly status: {
                    readonly description: "The status of the session\n\n`open` `complete` `incomplete` `expired`";
                    readonly type: "string";
                    readonly enum: readonly ["open", "complete", "incomplete", "expired"];
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "The date when the session was last updated";
                };
            };
            readonly required: readonly ["completed", "status", "updatedAt"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const SessionsControllerCompletePartialCheckoutSession: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly description: "Organization id of the checkout session";
                };
                readonly mode: {
                    readonly description: "The mode of the Checkout Session.\n\n`payment` `subscription`";
                    readonly type: "string";
                    readonly enum: readonly ["payment", "subscription"];
                    readonly examples: readonly ["payment"];
                };
                readonly paymentLinkId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The payment link id used to create this checkout session";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly subscriptionId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The subscription created from this checkout session";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly invoiceId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The invoice created from this checkout session";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly amountTotal: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "A non-zero amount filled in with 8 decimal places. For example, 1 USDC is 100000000.";
                    readonly minimum: 0;
                    readonly examples: readonly [100000000];
                    readonly maximum: 9223372036854776000;
                };
                readonly amountSubtotal: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "Amount subtotal is total of all line items excluding tax, shipping, application fee and discount. A non-zero amount filled in with 8 decimal places. For example, 1 USDC is 100000000.";
                    readonly minimum: 0;
                    readonly examples: readonly [100000000];
                    readonly maximum: 9223372036854776000;
                };
                readonly amountGasFee: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "Amount fee is extra amount on top of amountSubtotal. If charged from end user.";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly amountFee: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "Amount fee is extra amount on top of amountSubtotal. If charged from end user.";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly amountNet: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly amountDetails: {
                    readonly description: "The amount details of the payment";
                    readonly type: "object";
                    readonly required: readonly ["currency", "amountTotal", "amountSubtotal", "amountDiscount", "amountTax", "amountFee", "applyFee", "applyGasFee", "discountAmounts"];
                    readonly properties: {
                        readonly currency: {
                            readonly description: "The currency of the payment\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                        };
                        readonly amountTotal: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The total amount of the payment after discounts and taxes";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountSubtotal: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The total amount of the payment before discounts and taxes";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountDiscount: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The total amount of the payment discount";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountTax: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The total amount of the payment tax";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountFee: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The total amount of the payment application fee";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountGasFee: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The total amount of the transaction gas fee. If null then we are not able to calculate gasFee";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly feePercentage: {
                            readonly type: "number";
                            readonly description: "The fee percentage to apply";
                            readonly examples: readonly [1];
                        };
                        readonly applyFee: {
                            readonly type: "boolean";
                            readonly description: "The flag to apply fee";
                        };
                        readonly applyGasFee: {
                            readonly type: "boolean";
                            readonly description: "The flag to apply gas fee";
                        };
                        readonly discountAmounts: {
                            readonly description: "The list of discount amounts";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly required: readonly ["amount", "couponId"];
                                readonly properties: {
                                    readonly amount: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "The amount of the discount";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly couponId: {
                                        readonly type: "string";
                                        readonly description: "The coupon id of the discount";
                                    };
                                };
                            };
                        };
                    };
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "Currency of the amount\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                    readonly examples: readonly ["usdc"];
                };
                readonly paymentMethodTypes: {
                    readonly type: "array";
                    readonly description: "A list of the types of payment methods (e.g. wallet) this Checkout Session is allowed to accept.";
                    readonly minItems: 1;
                    readonly maxItems: 1;
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                        readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                    };
                    readonly examples: readonly ["wallet"];
                };
                readonly paymentSetting: {
                    readonly description: "The payment method settings to use for this checkout's payment";
                    readonly type: "object";
                    readonly properties: {
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly description: "A list of the types of payment methods";
                            readonly minItems: 1;
                            readonly maxItems: 1;
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                            readonly examples: readonly ["wallet"];
                        };
                        readonly allowedChains: {
                            readonly description: "The list of chains allowed for the payment. If not provided, all chains supported by the organization are enabled.";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly required: readonly ["chainId"];
                                readonly properties: {
                                    readonly chainId: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly blacklistCurrencies: {
                                        readonly type: "array";
                                        readonly description: "The list of currencies to disable for the payment. Note: This field is only used for checkout session API atm.";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                        };
                                        readonly examples: readonly ["usdc"];
                                    };
                                    readonly withdrawalAddress: {
                                        readonly type: "string";
                                        readonly description: "This is optional, default withdrawal address configured in dashboard under settings > payment methods is used. The custom withdrawal address to use for this chain instead of stored default withdrawal address.";
                                    };
                                    readonly withdrawalAddresses: {
                                        readonly description: "The list of withdrawal addresses to split the payment. If provided, the sum of all split percentages should be 100.";
                                        readonly minItems: 2;
                                        readonly maxItems: 4;
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["splitPercentage", "address"];
                                            readonly properties: {
                                                readonly splitPercentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly examples: readonly [1];
                                                };
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "The withdrawal address for the split percentage";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly preferredChainId: {
                            readonly type: "number";
                            readonly description: "The preferred chain's id";
                            readonly examples: readonly [1];
                        };
                        readonly allowSwap: {
                            readonly type: "boolean";
                            readonly description: "Whether the user can swap the payment currency";
                            readonly default: false;
                        };
                        readonly allowFiatPayment: {
                            readonly type: "boolean";
                            readonly description: "Whether to allow payment with fiat currency. If set to true, the payment will be made in fiat currency.\n      This is experimental field and supposed to change. Default: false";
                        };
                    };
                };
                readonly status: {
                    readonly description: "The status of the session\n\n`open` `complete` `incomplete` `expired`";
                    readonly type: "string";
                    readonly enum: readonly ["open", "complete", "incomplete", "expired"];
                };
                readonly paymentStatus: {
                    readonly description: "The status of the payment\n\n`unpaid` `paid`";
                    readonly type: "string";
                    readonly enum: readonly ["unpaid", "paid"];
                };
                readonly expiresAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "The time at which the session will expire. Default: 1 Hour";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly description: "The ID of the customer if you want to associate the session with a customer";
                };
                readonly customer: {
                    readonly description: "The customer detail from saved customer's information. This is only available when customer id is provided or customer is stored";
                    readonly type: "object";
                    readonly required: readonly ["id", "customerNumber"];
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Customer's id";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's created at";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's updated at";
                        };
                        readonly customerReferenceId: {
                            readonly type: "string";
                            readonly description: "Customer's reference id";
                        };
                        readonly shipping: {
                            readonly description: "Customer's shipping address";
                            readonly type: "object";
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name";
                                };
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The email";
                                };
                                readonly phone: {
                                    readonly type: "string";
                                    readonly description: "The phone";
                                };
                                readonly organizationName: {
                                    readonly type: "string";
                                    readonly description: "The organization name";
                                };
                                readonly address: {
                                    readonly description: "The address";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly line1: {
                                            readonly type: "string";
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                        };
                                        readonly postalCode: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly taxIds: {
                            readonly type: "object";
                            readonly properties: {
                                readonly object: {
                                    readonly type: "string";
                                };
                                readonly data: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "customerId"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                            readonly customerId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly visibility: {
                            readonly description: "Customer's visibility. If Dashboard then displayed on dashboard UI. If API then only returned in API response only.\n\n`10` `20`";
                            readonly type: "string";
                            readonly enum: readonly [10, 20];
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "Customer's metadata";
                            readonly additionalProperties: true;
                        };
                        readonly customerNumber: {
                            readonly type: "string";
                            readonly description: "Customer number assigned by the system";
                        };
                    };
                };
                readonly customerDetails: {
                    readonly description: "The checkout sessions's customer detail";
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly email: {
                            readonly type: "string";
                        };
                        readonly phone: {
                            readonly type: "string";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly taxIds: {
                            readonly type: "object";
                            readonly properties: {
                                readonly object: {
                                    readonly type: "string";
                                };
                                readonly data: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "customerId"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                            readonly customerId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                readonly clientReferenceId: {
                    readonly type: "string";
                    readonly description: "Unique ID string used to identify the session in your backend. This can be your payment ID, cart ID, or similar used to link this Checkout Session with your internal system.";
                };
                readonly customerCreation: {
                    readonly description: "Whether to create a customer for the session. If required, a customer will be created for subsequent payments\n\n`if_required` `always`";
                    readonly type: "string";
                    readonly enum: readonly ["if_required", "always"];
                };
                readonly customerUpdate: {
                    readonly description: "The customer update settings to use for this checkout to update existing customer details";
                    readonly type: "object";
                    readonly properties: {
                        readonly address: {
                            readonly type: "string";
                            readonly enum: readonly ["auto", "never"];
                            readonly description: "`auto` `never`";
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly enum: readonly ["auto", "never"];
                            readonly description: "`auto` `never`";
                        };
                        readonly shipping: {
                            readonly type: "string";
                            readonly enum: readonly ["auto", "never"];
                            readonly description: "`auto` `never`";
                        };
                    };
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "The URL to redirect the customer to complete payment";
                };
                readonly successUrl: {
                    readonly type: "string";
                    readonly description: "The URL to redirect the customer to after payment is completed. Only applicable when `afterCompletion` is set to `redirect`";
                };
                readonly cancelUrl: {
                    readonly type: "string";
                    readonly description: "The URL to redirect the customer to if they decide to cancel payment";
                };
                readonly submitType: {
                    readonly default: "pay";
                    readonly description: "The type of submit button to display on the Checkout page\n\n`pay` `book` `donate`";
                    readonly type: "string";
                    readonly enum: readonly ["pay", "book", "donate"];
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly description: "A set of key-value pairs that you can attach to a Checkout Session object";
                    readonly additionalProperties: true;
                };
                readonly nameCollection: {
                    readonly type: "boolean";
                    readonly description: "Whether to collect the customer's name. Default: false";
                };
                readonly emailCollection: {
                    readonly type: "boolean";
                    readonly description: "Whether to collect the customer's email address. Default: false";
                };
                readonly phoneNumberCollection: {
                    readonly type: "boolean";
                    readonly description: "Whether to collect the customer's phone number Default: false";
                };
                readonly shippingAddressCollection: {
                    readonly type: "boolean";
                    readonly description: "Whether to collect the customer's shipping address. Default: false";
                };
                readonly billingAddressCollection: {
                    readonly type: "boolean";
                    readonly description: "Whether to collect the customer's billing address. Default: false";
                };
                readonly customFields: {
                    readonly type: "object";
                    readonly properties: {
                        readonly fields: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly key: {
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly enum: readonly ["text", "numeric", "dropdown"];
                                        readonly description: "`text` `numeric` `dropdown`";
                                    };
                                    readonly label: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["custom"];
                                                readonly description: "`custom`";
                                            };
                                            readonly custom: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly required: readonly ["custom"];
                                    };
                                    readonly optional: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                    readonly text: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly maximumLength: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly minimumLength: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly required: readonly ["value"];
                                    };
                                    readonly numeric: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly maximumLength: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly minimumLength: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly required: readonly ["value"];
                                    };
                                    readonly dropdown: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly options: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly label: {
                                                            readonly type: "string";
                                                        };
                                                        readonly value: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly required: readonly ["label", "value"];
                                                };
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly required: readonly ["value"];
                                    };
                                };
                                readonly required: readonly ["key", "type", "label", "optional"];
                            };
                        };
                    };
                };
                readonly afterCompletion: {
                    readonly description: "The action to take after the payment is completed. You can choose to redirect user to your application or use the default payment confirmation page provided by Copperx\n\n`redirect` `hosted_confirmation`";
                    readonly type: "string";
                    readonly enum: readonly ["redirect", "hosted_confirmation"];
                };
                readonly afterCompletionConfirmMsg: {
                    readonly type: "string";
                    readonly description: "The message to show after successful payment. Only applicable when `afterCompletion` is set to `hosted_confirmation`";
                };
                readonly shippingDetails: {
                    readonly description: "The shipping address to use for this checkout";
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                };
                readonly billingDetails: {
                    readonly description: "The billing address to use for this checkout";
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                };
                readonly lineItems: {
                    readonly description: "The list of line items to display on the session";
                    readonly type: "object";
                    readonly properties: {
                        readonly object: {
                            readonly type: "string";
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly required: readonly ["price"];
                                readonly properties: {
                                    readonly description: {
                                        readonly type: "string";
                                    };
                                    readonly quantity: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly price: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "currency", "productId", "type", "product"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly billingScheme: {
                                                readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                                                readonly type: "string";
                                                readonly enum: readonly ["per_unit"];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                                readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                            };
                                            readonly productId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "Product's id";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                            readonly interval: {
                                                readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                                                readonly type: "string";
                                                readonly enum: readonly ["day", "week", "month", "year"];
                                            };
                                            readonly intervalCount: {
                                                readonly type: "number";
                                                readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                                                readonly examples: readonly [1];
                                            };
                                            readonly isActive: {
                                                readonly type: "boolean";
                                                readonly description: "Whether the price is currently active";
                                            };
                                            readonly usageType: {
                                                readonly description: "The usage type of the price.\n\n`licensed`";
                                                readonly type: "string";
                                                readonly enum: readonly ["licensed"];
                                            };
                                            readonly type: {
                                                readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                                                readonly type: "string";
                                                readonly enum: readonly ["one_time", "recurring", "streaming"];
                                            };
                                            readonly unitAmount: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly unitAmountDecimal: {
                                                readonly type: "string";
                                            };
                                            readonly customUnitMax: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitMin: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customPreset: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitAmountSuggestions: {
                                                readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                            readonly product: {
                                                readonly description: "The product this price belongs to";
                                                readonly type: "object";
                                                readonly required: readonly ["id", "name"];
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                    };
                                                    readonly createdAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly updatedAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the product. Displayed on the checkout page";
                                                    };
                                                    readonly description: {
                                                        readonly type: "string";
                                                        readonly description: "The description of the product. Displayed on the checkout page";
                                                    };
                                                    readonly isActive: {
                                                        readonly type: "boolean";
                                                        readonly description: "Whether the product is currently active";
                                                    };
                                                    readonly images: {
                                                        readonly maxItems: 8;
                                                        readonly description: "The url of product images. Displayed on the checkout page";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly publicImages: {
                                                        readonly description: "Product images with absolute public url";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly unitLabel: {
                                                        readonly type: "string";
                                                        readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                                    };
                                                    readonly url: {
                                                        readonly type: "string";
                                                        readonly description: "The url of the product";
                                                    };
                                                    readonly defaultPriceId: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Product's default price id";
                                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                    };
                                                    readonly metadata: {
                                                        readonly type: "object";
                                                        readonly description: "The metadata of the product";
                                                        readonly additionalProperties: true;
                                                    };
                                                    readonly visibility: {
                                                        readonly description: "The visibility of the product\n\n`10` `20`";
                                                        readonly type: "string";
                                                        readonly enum: readonly [10, 20];
                                                    };
                                                };
                                            };
                                            readonly metadata: {
                                                readonly type: "object";
                                                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                                readonly additionalProperties: true;
                                            };
                                            readonly visibility: {
                                                readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                                                readonly type: "string";
                                                readonly enum: readonly [10, 20];
                                            };
                                        };
                                    };
                                    readonly taxRates: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["id", "name", "percentage", "type", "isDefault"];
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the tax rate.";
                                                };
                                                readonly description: {
                                                    readonly type: "string";
                                                    readonly description: "The description of the tax rate.";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                    readonly description: "The country of the tax rate.";
                                                };
                                                readonly percentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly description: "Percent that will be added to subtotal as a tax.";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly type: {
                                                    readonly description: "The type of the tax rate.\n\n`exclusive` `inclusive`";
                                                    readonly type: "string";
                                                    readonly enum: readonly ["exclusive", "inclusive"];
                                                };
                                                readonly isDefault: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                        };
                                    };
                                    readonly amountTotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountSubtotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountTax: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                };
                            };
                        };
                    };
                };
                readonly addresses: {
                    readonly description: "The list of payment addresses associated with the session. It is the list of the addresses that will be used to pay the amount.";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly checkoutSessionId: {
                                readonly type: "string";
                            };
                            readonly asset: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly address: {
                                        readonly type: "string";
                                    };
                                    readonly chainId: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                    readonly symbol: {
                                        readonly type: "string";
                                    };
                                    readonly decimals: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly coingeckoId: {
                                        readonly type: "string";
                                    };
                                    readonly isPublic: {
                                        readonly type: "boolean";
                                    };
                                    readonly superToken: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly address: {
                                                readonly type: "string";
                                                readonly description: "SuperToken's address";
                                            };
                                            readonly decimals: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly symbol: {
                                                readonly type: "string";
                                                readonly description: "SuperToken's symbol";
                                            };
                                        };
                                        readonly required: readonly ["address", "decimals", "symbol"];
                                    };
                                    readonly chain: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "number";
                                                readonly description: "Chain id";
                                                readonly examples: readonly [1];
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                                readonly description: "Chain name";
                                            };
                                            readonly icon: {
                                                readonly type: "string";
                                                readonly description: "Chain icon";
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                readonly description: "Chain currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                            };
                                            readonly blockExplorerTransactionUrl: {
                                                readonly type: "string";
                                                readonly description: "Chain block explorer transaction url";
                                            };
                                            readonly blockExplorerName: {
                                                readonly type: "string";
                                                readonly description: "Chain block explorer name";
                                            };
                                            readonly type: {
                                                readonly description: "Chain type\n\n`evm` `solana` `tron` `stripe` `binance_pay`";
                                                readonly type: "string";
                                                readonly enum: readonly ["evm", "solana", "tron", "stripe", "binance_pay"];
                                            };
                                            readonly isBeta: {
                                                readonly type: "boolean";
                                                readonly description: "Is beta asset";
                                            };
                                        };
                                        readonly required: readonly ["id", "name", "icon", "currency", "blockExplorerTransactionUrl", "blockExplorerName", "type", "isBeta"];
                                    };
                                };
                                readonly required: readonly ["id", "name", "address", "chainId", "currency", "symbol", "decimals", "isPublic", "chain"];
                            };
                            readonly paymentAddress: {
                                readonly type: "string";
                            };
                            readonly gas: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly description: "This approx estimated gas required to withdraw amount from the payment address. It is in gas unit, and need to multiply by gas price to get the total gas fee in native token";
                                readonly examples: readonly ["9223372036854775807"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                            readonly gasAmount: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly description: "This the approx estimated total amount a user should pay in checkout session currency as transaction fees. This is equivalent to gas * gasPrice. This amount is in 8 (currency decimals)This can be null if gas fee is inclusive of subtotal and not additionally charged";
                                readonly examples: readonly ["9223372036854775807"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                        };
                        readonly required: readonly ["id", "checkoutSessionId", "asset", "paymentAddress"];
                    };
                };
                readonly paymentIntent: {
                    readonly description: "The payment intent associated with the session. Payment intent is created when the session is created.";
                    readonly type: "object";
                    readonly required: readonly ["id", "organizationId", "status", "paymentMethodId", "transactions"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly organizationId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly amount: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountReceived: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"];
                            readonly description: "`requires_payment_method` `requires_confirmation` `requires_action` `processing` `requires_capture` `canceled` `succeeded`";
                        };
                        readonly paymentMethodId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly description: {
                            readonly type: "string";
                        };
                        readonly paymentMethod: {
                            readonly type: "object";
                            readonly required: readonly ["id", "assetId", "asset", "type"];
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly assetId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly asset: {
                                    readonly type: "object";
                                    readonly required: readonly ["id", "name", "chainId", "address", "currency", "symbol", "decimals", "isEIP5827Supported"];
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "Asset id";
                                        };
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "Asset name";
                                        };
                                        readonly chainId: {
                                            readonly type: "number";
                                            readonly description: "Asset chain id";
                                            readonly examples: readonly [1];
                                        };
                                        readonly address: {
                                            readonly type: "string";
                                            readonly description: "Asset address on chain";
                                        };
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                            readonly description: "Asset currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                        };
                                        readonly symbol: {
                                            readonly type: "string";
                                            readonly description: "Asset symbol";
                                        };
                                        readonly decimals: {
                                            readonly type: "number";
                                            readonly description: "Asset decimals in which it is represented on chain";
                                            readonly examples: readonly [1];
                                        };
                                        readonly coingeckoId: {
                                            readonly type: "string";
                                            readonly description: "Asset coingecko id";
                                        };
                                        readonly superToken: {
                                            readonly description: "SuperToken data";
                                            readonly type: "object";
                                            readonly required: readonly ["address", "decimals", "symbol"];
                                            readonly properties: {
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's address";
                                                };
                                                readonly decimals: {
                                                    readonly type: "number";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly symbol: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's symbol";
                                                };
                                            };
                                        };
                                        readonly isEIP5827Supported: {
                                            readonly type: "boolean";
                                            readonly description: "Is EIP5827 supported";
                                        };
                                    };
                                };
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                    readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                                };
                                readonly accountAddress: {
                                    readonly type: "string";
                                };
                                readonly billingDetails: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "The name";
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                            readonly description: "The email";
                                        };
                                        readonly phone: {
                                            readonly type: "string";
                                            readonly description: "The phone";
                                        };
                                        readonly organizationName: {
                                            readonly type: "string";
                                            readonly description: "The organization name";
                                        };
                                        readonly address: {
                                            readonly description: "The address";
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly line1: {
                                                    readonly type: "string";
                                                };
                                                readonly line2: {
                                                    readonly type: "string";
                                                };
                                                readonly city: {
                                                    readonly type: "string";
                                                };
                                                readonly state: {
                                                    readonly type: "string";
                                                };
                                                readonly postalCode: {
                                                    readonly type: "string";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly customerId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                };
                            };
                        };
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                        };
                        readonly transferAccountAddress: {
                            readonly type: "string";
                        };
                        readonly transactions: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly required: readonly ["type", "fromAddress", "toAddress", "currency", "amountRaw", "assetId", "asset"];
                                readonly properties: {
                                    readonly type: {
                                        readonly description: "Transaction type\n\n`incoming` `outgoing` `event` `transfer`";
                                        readonly type: "string";
                                        readonly enum: readonly ["incoming", "outgoing", "event", "transfer"];
                                    };
                                    readonly transactionRelayId: {
                                        readonly type: "string";
                                        readonly description: "Transaction relay id";
                                    };
                                    readonly transactionHash: {
                                        readonly type: "string";
                                        readonly description: "Transaction hash";
                                    };
                                    readonly nonce: {
                                        readonly type: "number";
                                        readonly description: "Transaction nonce";
                                        readonly examples: readonly [1];
                                    };
                                    readonly gasLimit: {
                                        readonly type: "number";
                                        readonly description: "Transaction gas limit used in payment";
                                        readonly examples: readonly [1];
                                    };
                                    readonly validUntil: {
                                        readonly type: "string";
                                        readonly description: "Transaction valid until";
                                    };
                                    readonly fromAddress: {
                                        readonly type: "string";
                                        readonly description: "Transaction from address";
                                    };
                                    readonly toAddress: {
                                        readonly type: "string";
                                        readonly description: "Transaction to address";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "Transaction currency\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                        readonly description: "Transaction created at";
                                    };
                                    readonly amount: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "Transaction amount in 8 decimals";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountRaw: {
                                        readonly type: "string";
                                        readonly description: "Transaction amount raw received from alchemy";
                                    };
                                    readonly assetId: {
                                        readonly type: "string";
                                        readonly description: "Transaction asset id";
                                    };
                                    readonly asset: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "name", "address", "chainId", "currency", "symbol", "decimals", "isPublic", "chain"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly address: {
                                                readonly type: "string";
                                            };
                                            readonly chainId: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                            };
                                            readonly symbol: {
                                                readonly type: "string";
                                            };
                                            readonly decimals: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly coingeckoId: {
                                                readonly type: "string";
                                            };
                                            readonly isPublic: {
                                                readonly type: "boolean";
                                            };
                                            readonly superToken: {
                                                readonly type: "object";
                                                readonly required: readonly ["address", "decimals", "symbol"];
                                                readonly properties: {
                                                    readonly address: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's address";
                                                    };
                                                    readonly decimals: {
                                                        readonly type: "number";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly symbol: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's symbol";
                                                    };
                                                };
                                            };
                                            readonly chain: {
                                                readonly type: "object";
                                                readonly required: readonly ["id", "name", "icon", "currency", "blockExplorerTransactionUrl", "blockExplorerName", "type", "isBeta"];
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "number";
                                                        readonly description: "Chain id";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "Chain name";
                                                    };
                                                    readonly icon: {
                                                        readonly type: "string";
                                                        readonly description: "Chain icon";
                                                    };
                                                    readonly currency: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                        readonly description: "Chain currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                                    };
                                                    readonly blockExplorerTransactionUrl: {
                                                        readonly type: "string";
                                                        readonly description: "Chain block explorer transaction url";
                                                    };
                                                    readonly blockExplorerName: {
                                                        readonly type: "string";
                                                        readonly description: "Chain block explorer name";
                                                    };
                                                    readonly type: {
                                                        readonly description: "Chain type\n\n`evm` `solana` `tron` `stripe` `binance_pay`";
                                                        readonly type: "string";
                                                        readonly enum: readonly ["evm", "solana", "tron", "stripe", "binance_pay"];
                                                    };
                                                    readonly isBeta: {
                                                        readonly type: "boolean";
                                                        readonly description: "Is beta asset";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly transactionUrl: {
                                        readonly type: "string";
                                        readonly description: "Transaction url";
                                    };
                                };
                            };
                        };
                        readonly paymentReceipt: {
                            readonly type: "object";
                            readonly required: readonly ["id", "organizationId", "paymentIntentId", "receiptNumber"];
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly organizationId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly paymentIntentId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly receiptNumber: {
                                    readonly type: "string";
                                };
                                readonly uri: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly canceledAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly cancellationReason: {
                            readonly type: "string";
                        };
                        readonly stripe: {
                            readonly type: "object";
                            readonly properties: {
                                readonly paymentIntentId: {
                                    readonly type: "string";
                                };
                                readonly receiptUrl: {
                                    readonly type: "string";
                                };
                                readonly cardLast4: {
                                    readonly type: "string";
                                };
                                readonly displayName: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly isMarkRefunded: {
                            readonly type: "boolean";
                        };
                        readonly markRefundedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly markRefundedComment: {
                            readonly type: "string";
                        };
                    };
                };
                readonly isMarkRefunded: {
                    readonly type: "boolean";
                    readonly description: "Whether to mark the payment as refunded";
                };
                readonly allowPromotionCodes: {
                    readonly type: "boolean";
                    readonly description: "Enables user redeemable promotion codes.";
                };
                readonly discounts: {
                    readonly description: "The list of discounts applied to the session";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly amount: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly description: "The amount of the discount";
                                readonly examples: readonly ["9223372036854775807"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                            readonly couponId: {
                                readonly type: "string";
                                readonly description: "The coupon id of the discount";
                            };
                            readonly coupon: {
                                readonly description: "The coupon of the discount";
                                readonly type: "object";
                                readonly required: readonly ["name", "code"];
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of the coupon displayed to customers on for instance invoices or receipts.";
                                    };
                                    readonly percentOff: {
                                        readonly type: "number";
                                        readonly minimum: 0;
                                        readonly maximum: 100;
                                        readonly description: "Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.";
                                        readonly examples: readonly [1];
                                    };
                                    readonly amountOff: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "Fixed amount that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.";
                                        readonly minimum: 0;
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly description: "Name of the currency displayed to customers on for instance invoices or receipts.";
                                    };
                                    readonly code: {
                                        readonly type: "string";
                                        readonly description: "The coupon code";
                                    };
                                };
                            };
                        };
                        readonly required: readonly ["amount", "couponId", "coupon"];
                    };
                };
                readonly defaultPromotionCode: {
                    readonly type: "string";
                    readonly description: "The default promotion code to apply to the session";
                };
                readonly isManualPayment: {
                    readonly type: "boolean";
                };
            };
            readonly required: readonly ["id", "organizationId", "amountTotal", "amountSubtotal", "currency", "status", "paymentStatus", "url", "lineItems", "addresses", "paymentIntent", "discounts", "isManualPayment"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const SessionsControllerCreate: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly mode: {
                readonly description: "The mode of the Checkout Session.";
                readonly type: "string";
                readonly enum: readonly ["payment", "subscription"];
                readonly examples: readonly ["payment"];
            };
            readonly clientReferenceId: {
                readonly type: "string";
                readonly description: "Unique ID string used to identify the session in your backend. This can be your payment ID, cart ID, or similar used to link this Checkout Session with your internal system.";
            };
            readonly nameCollection: {
                readonly type: "boolean";
                readonly description: "Whether to collect the customer's name. Default: false";
            };
            readonly emailCollection: {
                readonly type: "boolean";
                readonly description: "Whether to collect the customer's email address. Default: false";
            };
            readonly phoneNumberCollection: {
                readonly type: "boolean";
                readonly description: "Whether to collect the customer's phone number Default: false";
            };
            readonly shippingAddressCollection: {
                readonly type: "boolean";
                readonly description: "Whether to collect the customer's shipping address. Default: false";
            };
            readonly billingAddressCollection: {
                readonly type: "boolean";
                readonly description: "Whether to collect the customer's billing address. Default: false";
            };
            readonly expiresAt: {
                readonly format: "date-time";
                readonly type: "string";
                readonly description: "The time at which the session will expire. Default: 1 Hour";
            };
            readonly customFields: {
                readonly type: "object";
                readonly properties: {
                    readonly fields: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly key: {
                                    readonly type: "string";
                                };
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["text", "numeric", "dropdown"];
                                };
                                readonly label: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["custom"];
                                        };
                                        readonly custom: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly required: readonly ["custom"];
                                };
                                readonly optional: {
                                    readonly type: "boolean";
                                    readonly default: false;
                                };
                                readonly text: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly maximumLength: {
                                            readonly type: "number";
                                            readonly examples: readonly [1];
                                        };
                                        readonly minimumLength: {
                                            readonly type: "number";
                                            readonly examples: readonly [1];
                                        };
                                        readonly value: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly required: readonly ["value"];
                                };
                                readonly numeric: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly maximumLength: {
                                            readonly type: "number";
                                            readonly examples: readonly [1];
                                        };
                                        readonly minimumLength: {
                                            readonly type: "number";
                                            readonly examples: readonly [1];
                                        };
                                        readonly value: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly required: readonly ["value"];
                                };
                                readonly dropdown: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly options: {
                                            readonly type: "array";
                                            readonly items: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly label: {
                                                        readonly type: "string";
                                                    };
                                                    readonly value: {
                                                        readonly type: "string";
                                                    };
                                                };
                                                readonly required: readonly ["label", "value"];
                                            };
                                        };
                                        readonly value: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly required: readonly ["value"];
                                };
                            };
                            readonly required: readonly ["key", "type", "label", "optional"];
                        };
                    };
                };
            };
            readonly afterCompletion: {
                readonly description: "The action to take after the payment is completed. You can choose to redirect user to your application or use the default payment confirmation page provided by Copperx";
                readonly type: "string";
                readonly enum: readonly ["redirect", "hosted_confirmation"];
            };
            readonly afterCompletionConfirmMsg: {
                readonly type: "string";
                readonly description: "The message to show after successful payment. Only applicable when `afterCompletion` is set to `hosted_confirmation`";
            };
            readonly customerId: {
                readonly type: "string";
                readonly description: "The ID of the customer if you want to associate the session with a customer";
            };
            readonly metadata: {
                readonly type: "object";
                readonly description: "A set of key-value pairs that you can attach to a Checkout Session object";
                readonly additionalProperties: true;
            };
            readonly submitType: {
                readonly default: "pay";
                readonly description: "The type of submit button to display on the Checkout page";
                readonly type: "string";
                readonly enum: readonly ["pay", "book", "donate"];
            };
            readonly customerCreation: {
                readonly description: "Whether to create a customer for the session. If required, a customer will be created for subsequent payments";
                readonly type: "string";
                readonly enum: readonly ["if_required", "always"];
            };
            readonly customerUpdate: {
                readonly description: "The customer update settings to use for this checkout to update existing customer details";
                readonly type: "object";
                readonly properties: {
                    readonly address: {
                        readonly type: "string";
                        readonly enum: readonly ["auto", "never"];
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly enum: readonly ["auto", "never"];
                    };
                    readonly shipping: {
                        readonly type: "string";
                        readonly enum: readonly ["auto", "never"];
                    };
                };
            };
            readonly allowPromotionCodes: {
                readonly type: "boolean";
                readonly description: "Enables user redeemable promotion codes.";
            };
            readonly successUrl: {
                readonly type: "string";
                readonly description: "The URL to redirect the customer to after payment is completed. Only applicable when `afterCompletion` is set to `redirect`";
            };
            readonly cancelUrl: {
                readonly type: "string";
                readonly description: "The URL to redirect the customer to if they decide to cancel payment";
            };
            readonly customerData: {
                readonly description: "The checkout sessions's customer data to be prefilled";
                readonly type: "object";
                readonly properties: {
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly email: {
                        readonly type: "string";
                    };
                    readonly phone: {
                        readonly type: "string";
                    };
                    readonly organizationName: {
                        readonly type: "string";
                        readonly description: "The organization name";
                    };
                    readonly address: {
                        readonly type: "object";
                        readonly properties: {
                            readonly line1: {
                                readonly type: "string";
                            };
                            readonly line2: {
                                readonly type: "string";
                            };
                            readonly city: {
                                readonly type: "string";
                            };
                            readonly state: {
                                readonly type: "string";
                            };
                            readonly postalCode: {
                                readonly type: "string";
                            };
                            readonly country: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly taxIds: {
                        readonly type: "object";
                        readonly properties: {
                            readonly object: {
                                readonly type: "string";
                            };
                            readonly data: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly name: {
                                            readonly type: "string";
                                        };
                                        readonly value: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly lineItems: {
                readonly description: "The line items to be used in checkout session. Line items are the individual prices that the customer will be charged for";
                readonly type: "object";
                readonly required: readonly ["data"];
                readonly properties: {
                    readonly data: {
                        readonly minItems: 1;
                        readonly maxItems: 1;
                        readonly description: "The line items to be used in checkout session";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly priceId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly description: "The id of the price to use in checkout session";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly priceData: {
                                    readonly description: "The price data to be created to use in checkout session";
                                    readonly type: "object";
                                    readonly required: readonly ["currency", "unitAmount"];
                                    readonly properties: {
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                            readonly description: "The currency symbol";
                                        };
                                        readonly interval: {
                                            readonly description: "The interval at which to bill for this price. Only required for subscriptions";
                                            readonly type: "string";
                                            readonly enum: readonly ["day", "week", "month", "year"];
                                        };
                                        readonly intervalCount: {
                                            readonly type: "number";
                                            readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                                            readonly examples: readonly [1];
                                        };
                                        readonly unitAmount: {
                                            readonly format: "int64";
                                            readonly type: "integer";
                                            readonly description: "The unit amount in 8 decimals, represented as a whole integer";
                                            readonly examples: readonly ["9223372036854775807"];
                                            readonly minimum: -9223372036854776000;
                                            readonly maximum: 9223372036854776000;
                                        };
                                        readonly productId: {
                                            readonly type: "string";
                                            readonly format: "uuid";
                                            readonly description: "The id of the product for which this price is associated";
                                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                        };
                                        readonly productData: {
                                            readonly description: "The product data to be created to link with this price";
                                            readonly type: "object";
                                            readonly required: readonly ["name"];
                                            readonly properties: {
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the product. Displayed on the checkout page";
                                                };
                                                readonly description: {
                                                    readonly type: "string";
                                                    readonly description: "The description of the product. Displayed on the checkout page";
                                                };
                                                readonly images: {
                                                    readonly maxItems: 8;
                                                    readonly description: "The url of product images. Displayed on the checkout page";
                                                    readonly type: "array";
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                };
                                                readonly unitLabel: {
                                                    readonly type: "string";
                                                    readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                                };
                                                readonly url: {
                                                    readonly type: "string";
                                                    readonly description: "The url of the product";
                                                };
                                                readonly metadata: {
                                                    readonly type: "object";
                                                    readonly description: "The metadata of the product";
                                                    readonly additionalProperties: true;
                                                };
                                                readonly visibility: {
                                                    readonly description: "The visibility of the product";
                                                    readonly type: "string";
                                                    readonly enum: readonly [10, 20];
                                                };
                                            };
                                        };
                                        readonly type: {
                                            readonly description: "The type of the price";
                                            readonly type: "string";
                                            readonly enum: readonly ["one_time", "recurring", "streaming"];
                                        };
                                    };
                                };
                                readonly quantity: {
                                    readonly type: "number";
                                    readonly default: 1;
                                    readonly description: "The quantity of the line item";
                                    readonly examples: readonly [1];
                                };
                                readonly periodStart: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly periodEnd: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly taxRateIds: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly paymentSetting: {
                readonly description: "The payment method settings to use for this checkout's payment";
                readonly type: "object";
                readonly properties: {
                    readonly preferredChainId: {
                        readonly type: "number";
                        readonly description: "The preferred chain's id";
                        readonly examples: readonly [1];
                    };
                    readonly allowSwap: {
                        readonly type: "boolean";
                        readonly description: "Whether the user can swap the payment currency";
                        readonly default: false;
                    };
                    readonly allowFiatPayment: {
                        readonly type: "boolean";
                        readonly description: "Whether to allow payment with fiat currency. If set to true, the payment will be made in fiat currency.\n      This is experimental field and supposed to change. Default: false";
                        readonly default: false;
                    };
                    readonly allowedChains: {
                        readonly description: "The list of chains allowed for the payment. If not provided, all chains supported by the organization are enabled.You need to provider custom withdrawal address for all allowed chains or none of them.";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly required: readonly ["chainId"];
                            readonly properties: {
                                readonly chainId: {
                                    readonly type: "number";
                                    readonly examples: readonly [1];
                                };
                                readonly blacklistCurrencies: {
                                    readonly type: "array";
                                    readonly description: "The list of currencies to disable for the payment. Note: This field is only used for checkout session API atm.";
                                    readonly items: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                    };
                                    readonly examples: readonly ["usdc"];
                                };
                                readonly withdrawalAddress: {
                                    readonly type: "string";
                                    readonly description: "This is optional, default withdrawal address configured in dashboard under settings > payment methods is used. The custom withdrawal address to use for this chain instead of stored default withdrawal address.";
                                };
                                readonly withdrawalAddresses: {
                                    readonly description: "The list of withdrawal addresses to split the payment. If provided, the sum of all split percentages should be 100.";
                                    readonly minItems: 2;
                                    readonly maxItems: 4;
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly required: readonly ["splitPercentage", "address"];
                                        readonly properties: {
                                            readonly splitPercentage: {
                                                readonly type: "number";
                                                readonly minimum: 0;
                                                readonly maximum: 100;
                                                readonly examples: readonly [1];
                                            };
                                            readonly address: {
                                                readonly type: "string";
                                                readonly description: "The withdrawal address for the split percentage";
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly taxRateIds: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly defaultPromotionCode: {
                readonly type: "string";
                readonly description: "The default promotion code to auto apply to this checkout session, when checkout session is created.If promotion code is invalid or expired still checkout session is created without applying promotion code.You need to check whether promotion code applied or not at your end when get create checkout session response.";
            };
        };
        readonly required: readonly ["successUrl", "lineItems"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly description: "Organization id of the checkout session";
                };
                readonly mode: {
                    readonly description: "The mode of the Checkout Session.\n\n`payment` `subscription`";
                    readonly type: "string";
                    readonly enum: readonly ["payment", "subscription"];
                    readonly examples: readonly ["payment"];
                };
                readonly paymentLinkId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The payment link id used to create this checkout session";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly subscriptionId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The subscription created from this checkout session";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly invoiceId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The invoice created from this checkout session";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly amountTotal: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "A non-zero amount filled in with 8 decimal places. For example, 1 USDC is 100000000.";
                    readonly minimum: 0;
                    readonly examples: readonly [100000000];
                    readonly maximum: 9223372036854776000;
                };
                readonly amountSubtotal: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "Amount subtotal is total of all line items excluding tax, shipping, application fee and discount. A non-zero amount filled in with 8 decimal places. For example, 1 USDC is 100000000.";
                    readonly minimum: 0;
                    readonly examples: readonly [100000000];
                    readonly maximum: 9223372036854776000;
                };
                readonly amountGasFee: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "Amount fee is extra amount on top of amountSubtotal. If charged from end user.";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly amountFee: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "Amount fee is extra amount on top of amountSubtotal. If charged from end user.";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly amountNet: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly amountDetails: {
                    readonly description: "The amount details of the payment";
                    readonly type: "object";
                    readonly required: readonly ["currency", "amountTotal", "amountSubtotal", "amountDiscount", "amountTax", "amountFee", "applyFee", "applyGasFee", "discountAmounts"];
                    readonly properties: {
                        readonly currency: {
                            readonly description: "The currency of the payment\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                        };
                        readonly amountTotal: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The total amount of the payment after discounts and taxes";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountSubtotal: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The total amount of the payment before discounts and taxes";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountDiscount: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The total amount of the payment discount";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountTax: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The total amount of the payment tax";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountFee: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The total amount of the payment application fee";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountGasFee: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The total amount of the transaction gas fee. If null then we are not able to calculate gasFee";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly feePercentage: {
                            readonly type: "number";
                            readonly description: "The fee percentage to apply";
                            readonly examples: readonly [1];
                        };
                        readonly applyFee: {
                            readonly type: "boolean";
                            readonly description: "The flag to apply fee";
                        };
                        readonly applyGasFee: {
                            readonly type: "boolean";
                            readonly description: "The flag to apply gas fee";
                        };
                        readonly discountAmounts: {
                            readonly description: "The list of discount amounts";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly required: readonly ["amount", "couponId"];
                                readonly properties: {
                                    readonly amount: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "The amount of the discount";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly couponId: {
                                        readonly type: "string";
                                        readonly description: "The coupon id of the discount";
                                    };
                                };
                            };
                        };
                    };
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "Currency of the amount\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                    readonly examples: readonly ["usdc"];
                };
                readonly paymentMethodTypes: {
                    readonly type: "array";
                    readonly description: "A list of the types of payment methods (e.g. wallet) this Checkout Session is allowed to accept.";
                    readonly minItems: 1;
                    readonly maxItems: 1;
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                        readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                    };
                    readonly examples: readonly ["wallet"];
                };
                readonly paymentSetting: {
                    readonly description: "The payment method settings to use for this checkout's payment";
                    readonly type: "object";
                    readonly properties: {
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly description: "A list of the types of payment methods";
                            readonly minItems: 1;
                            readonly maxItems: 1;
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                            readonly examples: readonly ["wallet"];
                        };
                        readonly allowedChains: {
                            readonly description: "The list of chains allowed for the payment. If not provided, all chains supported by the organization are enabled.";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly required: readonly ["chainId"];
                                readonly properties: {
                                    readonly chainId: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly blacklistCurrencies: {
                                        readonly type: "array";
                                        readonly description: "The list of currencies to disable for the payment. Note: This field is only used for checkout session API atm.";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                        };
                                        readonly examples: readonly ["usdc"];
                                    };
                                    readonly withdrawalAddress: {
                                        readonly type: "string";
                                        readonly description: "This is optional, default withdrawal address configured in dashboard under settings > payment methods is used. The custom withdrawal address to use for this chain instead of stored default withdrawal address.";
                                    };
                                    readonly withdrawalAddresses: {
                                        readonly description: "The list of withdrawal addresses to split the payment. If provided, the sum of all split percentages should be 100.";
                                        readonly minItems: 2;
                                        readonly maxItems: 4;
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["splitPercentage", "address"];
                                            readonly properties: {
                                                readonly splitPercentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly examples: readonly [1];
                                                };
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "The withdrawal address for the split percentage";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly preferredChainId: {
                            readonly type: "number";
                            readonly description: "The preferred chain's id";
                            readonly examples: readonly [1];
                        };
                        readonly allowSwap: {
                            readonly type: "boolean";
                            readonly description: "Whether the user can swap the payment currency";
                            readonly default: false;
                        };
                        readonly allowFiatPayment: {
                            readonly type: "boolean";
                            readonly description: "Whether to allow payment with fiat currency. If set to true, the payment will be made in fiat currency.\n      This is experimental field and supposed to change. Default: false";
                        };
                    };
                };
                readonly status: {
                    readonly description: "The status of the session\n\n`open` `complete` `incomplete` `expired`";
                    readonly type: "string";
                    readonly enum: readonly ["open", "complete", "incomplete", "expired"];
                };
                readonly paymentStatus: {
                    readonly description: "The status of the payment\n\n`unpaid` `paid`";
                    readonly type: "string";
                    readonly enum: readonly ["unpaid", "paid"];
                };
                readonly expiresAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "The time at which the session will expire. Default: 1 Hour";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly description: "The ID of the customer if you want to associate the session with a customer";
                };
                readonly customer: {
                    readonly description: "The customer detail from saved customer's information. This is only available when customer id is provided or customer is stored";
                    readonly type: "object";
                    readonly required: readonly ["id", "customerNumber"];
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Customer's id";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's created at";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's updated at";
                        };
                        readonly customerReferenceId: {
                            readonly type: "string";
                            readonly description: "Customer's reference id";
                        };
                        readonly shipping: {
                            readonly description: "Customer's shipping address";
                            readonly type: "object";
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name";
                                };
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The email";
                                };
                                readonly phone: {
                                    readonly type: "string";
                                    readonly description: "The phone";
                                };
                                readonly organizationName: {
                                    readonly type: "string";
                                    readonly description: "The organization name";
                                };
                                readonly address: {
                                    readonly description: "The address";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly line1: {
                                            readonly type: "string";
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                        };
                                        readonly postalCode: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly taxIds: {
                            readonly type: "object";
                            readonly properties: {
                                readonly object: {
                                    readonly type: "string";
                                };
                                readonly data: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "customerId"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                            readonly customerId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly visibility: {
                            readonly description: "Customer's visibility. If Dashboard then displayed on dashboard UI. If API then only returned in API response only.\n\n`10` `20`";
                            readonly type: "string";
                            readonly enum: readonly [10, 20];
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "Customer's metadata";
                            readonly additionalProperties: true;
                        };
                        readonly customerNumber: {
                            readonly type: "string";
                            readonly description: "Customer number assigned by the system";
                        };
                    };
                };
                readonly customerDetails: {
                    readonly description: "The checkout sessions's customer detail";
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly email: {
                            readonly type: "string";
                        };
                        readonly phone: {
                            readonly type: "string";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly taxIds: {
                            readonly type: "object";
                            readonly properties: {
                                readonly object: {
                                    readonly type: "string";
                                };
                                readonly data: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "customerId"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                            readonly customerId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                readonly clientReferenceId: {
                    readonly type: "string";
                    readonly description: "Unique ID string used to identify the session in your backend. This can be your payment ID, cart ID, or similar used to link this Checkout Session with your internal system.";
                };
                readonly customerCreation: {
                    readonly description: "Whether to create a customer for the session. If required, a customer will be created for subsequent payments\n\n`if_required` `always`";
                    readonly type: "string";
                    readonly enum: readonly ["if_required", "always"];
                };
                readonly customerUpdate: {
                    readonly description: "The customer update settings to use for this checkout to update existing customer details";
                    readonly type: "object";
                    readonly properties: {
                        readonly address: {
                            readonly type: "string";
                            readonly enum: readonly ["auto", "never"];
                            readonly description: "`auto` `never`";
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly enum: readonly ["auto", "never"];
                            readonly description: "`auto` `never`";
                        };
                        readonly shipping: {
                            readonly type: "string";
                            readonly enum: readonly ["auto", "never"];
                            readonly description: "`auto` `never`";
                        };
                    };
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "The URL to redirect the customer to complete payment";
                };
                readonly successUrl: {
                    readonly type: "string";
                    readonly description: "The URL to redirect the customer to after payment is completed. Only applicable when `afterCompletion` is set to `redirect`";
                };
                readonly cancelUrl: {
                    readonly type: "string";
                    readonly description: "The URL to redirect the customer to if they decide to cancel payment";
                };
                readonly submitType: {
                    readonly default: "pay";
                    readonly description: "The type of submit button to display on the Checkout page\n\n`pay` `book` `donate`";
                    readonly type: "string";
                    readonly enum: readonly ["pay", "book", "donate"];
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly description: "A set of key-value pairs that you can attach to a Checkout Session object";
                    readonly additionalProperties: true;
                };
                readonly nameCollection: {
                    readonly type: "boolean";
                    readonly description: "Whether to collect the customer's name. Default: false";
                };
                readonly emailCollection: {
                    readonly type: "boolean";
                    readonly description: "Whether to collect the customer's email address. Default: false";
                };
                readonly phoneNumberCollection: {
                    readonly type: "boolean";
                    readonly description: "Whether to collect the customer's phone number Default: false";
                };
                readonly shippingAddressCollection: {
                    readonly type: "boolean";
                    readonly description: "Whether to collect the customer's shipping address. Default: false";
                };
                readonly billingAddressCollection: {
                    readonly type: "boolean";
                    readonly description: "Whether to collect the customer's billing address. Default: false";
                };
                readonly customFields: {
                    readonly type: "object";
                    readonly properties: {
                        readonly fields: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly key: {
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly enum: readonly ["text", "numeric", "dropdown"];
                                        readonly description: "`text` `numeric` `dropdown`";
                                    };
                                    readonly label: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["custom"];
                                                readonly description: "`custom`";
                                            };
                                            readonly custom: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly required: readonly ["custom"];
                                    };
                                    readonly optional: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                    readonly text: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly maximumLength: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly minimumLength: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly required: readonly ["value"];
                                    };
                                    readonly numeric: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly maximumLength: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly minimumLength: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly required: readonly ["value"];
                                    };
                                    readonly dropdown: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly options: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly label: {
                                                            readonly type: "string";
                                                        };
                                                        readonly value: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly required: readonly ["label", "value"];
                                                };
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly required: readonly ["value"];
                                    };
                                };
                                readonly required: readonly ["key", "type", "label", "optional"];
                            };
                        };
                    };
                };
                readonly afterCompletion: {
                    readonly description: "The action to take after the payment is completed. You can choose to redirect user to your application or use the default payment confirmation page provided by Copperx\n\n`redirect` `hosted_confirmation`";
                    readonly type: "string";
                    readonly enum: readonly ["redirect", "hosted_confirmation"];
                };
                readonly afterCompletionConfirmMsg: {
                    readonly type: "string";
                    readonly description: "The message to show after successful payment. Only applicable when `afterCompletion` is set to `hosted_confirmation`";
                };
                readonly shippingDetails: {
                    readonly description: "The shipping address to use for this checkout";
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                };
                readonly billingDetails: {
                    readonly description: "The billing address to use for this checkout";
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                };
                readonly lineItems: {
                    readonly description: "The list of line items to display on the session";
                    readonly type: "object";
                    readonly properties: {
                        readonly object: {
                            readonly type: "string";
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly required: readonly ["price"];
                                readonly properties: {
                                    readonly description: {
                                        readonly type: "string";
                                    };
                                    readonly quantity: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly price: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "currency", "productId", "type", "product"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly billingScheme: {
                                                readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                                                readonly type: "string";
                                                readonly enum: readonly ["per_unit"];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                                readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                            };
                                            readonly productId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "Product's id";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                            readonly interval: {
                                                readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                                                readonly type: "string";
                                                readonly enum: readonly ["day", "week", "month", "year"];
                                            };
                                            readonly intervalCount: {
                                                readonly type: "number";
                                                readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                                                readonly examples: readonly [1];
                                            };
                                            readonly isActive: {
                                                readonly type: "boolean";
                                                readonly description: "Whether the price is currently active";
                                            };
                                            readonly usageType: {
                                                readonly description: "The usage type of the price.\n\n`licensed`";
                                                readonly type: "string";
                                                readonly enum: readonly ["licensed"];
                                            };
                                            readonly type: {
                                                readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                                                readonly type: "string";
                                                readonly enum: readonly ["one_time", "recurring", "streaming"];
                                            };
                                            readonly unitAmount: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly unitAmountDecimal: {
                                                readonly type: "string";
                                            };
                                            readonly customUnitMax: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitMin: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customPreset: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitAmountSuggestions: {
                                                readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                            readonly product: {
                                                readonly description: "The product this price belongs to";
                                                readonly type: "object";
                                                readonly required: readonly ["id", "name"];
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                    };
                                                    readonly createdAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly updatedAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the product. Displayed on the checkout page";
                                                    };
                                                    readonly description: {
                                                        readonly type: "string";
                                                        readonly description: "The description of the product. Displayed on the checkout page";
                                                    };
                                                    readonly isActive: {
                                                        readonly type: "boolean";
                                                        readonly description: "Whether the product is currently active";
                                                    };
                                                    readonly images: {
                                                        readonly maxItems: 8;
                                                        readonly description: "The url of product images. Displayed on the checkout page";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly publicImages: {
                                                        readonly description: "Product images with absolute public url";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly unitLabel: {
                                                        readonly type: "string";
                                                        readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                                    };
                                                    readonly url: {
                                                        readonly type: "string";
                                                        readonly description: "The url of the product";
                                                    };
                                                    readonly defaultPriceId: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Product's default price id";
                                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                    };
                                                    readonly metadata: {
                                                        readonly type: "object";
                                                        readonly description: "The metadata of the product";
                                                        readonly additionalProperties: true;
                                                    };
                                                    readonly visibility: {
                                                        readonly description: "The visibility of the product\n\n`10` `20`";
                                                        readonly type: "string";
                                                        readonly enum: readonly [10, 20];
                                                    };
                                                };
                                            };
                                            readonly metadata: {
                                                readonly type: "object";
                                                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                                readonly additionalProperties: true;
                                            };
                                            readonly visibility: {
                                                readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                                                readonly type: "string";
                                                readonly enum: readonly [10, 20];
                                            };
                                        };
                                    };
                                    readonly taxRates: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["id", "name", "percentage", "type", "isDefault"];
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the tax rate.";
                                                };
                                                readonly description: {
                                                    readonly type: "string";
                                                    readonly description: "The description of the tax rate.";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                    readonly description: "The country of the tax rate.";
                                                };
                                                readonly percentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly description: "Percent that will be added to subtotal as a tax.";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly type: {
                                                    readonly description: "The type of the tax rate.\n\n`exclusive` `inclusive`";
                                                    readonly type: "string";
                                                    readonly enum: readonly ["exclusive", "inclusive"];
                                                };
                                                readonly isDefault: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                        };
                                    };
                                    readonly amountTotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountSubtotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountTax: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                };
                            };
                        };
                    };
                };
                readonly addresses: {
                    readonly description: "The list of payment addresses associated with the session. It is the list of the addresses that will be used to pay the amount.";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly checkoutSessionId: {
                                readonly type: "string";
                            };
                            readonly asset: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly address: {
                                        readonly type: "string";
                                    };
                                    readonly chainId: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                    readonly symbol: {
                                        readonly type: "string";
                                    };
                                    readonly decimals: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly coingeckoId: {
                                        readonly type: "string";
                                    };
                                    readonly isPublic: {
                                        readonly type: "boolean";
                                    };
                                    readonly superToken: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly address: {
                                                readonly type: "string";
                                                readonly description: "SuperToken's address";
                                            };
                                            readonly decimals: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly symbol: {
                                                readonly type: "string";
                                                readonly description: "SuperToken's symbol";
                                            };
                                        };
                                        readonly required: readonly ["address", "decimals", "symbol"];
                                    };
                                    readonly chain: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "number";
                                                readonly description: "Chain id";
                                                readonly examples: readonly [1];
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                                readonly description: "Chain name";
                                            };
                                            readonly icon: {
                                                readonly type: "string";
                                                readonly description: "Chain icon";
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                readonly description: "Chain currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                            };
                                            readonly blockExplorerTransactionUrl: {
                                                readonly type: "string";
                                                readonly description: "Chain block explorer transaction url";
                                            };
                                            readonly blockExplorerName: {
                                                readonly type: "string";
                                                readonly description: "Chain block explorer name";
                                            };
                                            readonly type: {
                                                readonly description: "Chain type\n\n`evm` `solana` `tron` `stripe` `binance_pay`";
                                                readonly type: "string";
                                                readonly enum: readonly ["evm", "solana", "tron", "stripe", "binance_pay"];
                                            };
                                            readonly isBeta: {
                                                readonly type: "boolean";
                                                readonly description: "Is beta asset";
                                            };
                                        };
                                        readonly required: readonly ["id", "name", "icon", "currency", "blockExplorerTransactionUrl", "blockExplorerName", "type", "isBeta"];
                                    };
                                };
                                readonly required: readonly ["id", "name", "address", "chainId", "currency", "symbol", "decimals", "isPublic", "chain"];
                            };
                            readonly paymentAddress: {
                                readonly type: "string";
                            };
                            readonly gas: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly description: "This approx estimated gas required to withdraw amount from the payment address. It is in gas unit, and need to multiply by gas price to get the total gas fee in native token";
                                readonly examples: readonly ["9223372036854775807"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                            readonly gasAmount: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly description: "This the approx estimated total amount a user should pay in checkout session currency as transaction fees. This is equivalent to gas * gasPrice. This amount is in 8 (currency decimals)This can be null if gas fee is inclusive of subtotal and not additionally charged";
                                readonly examples: readonly ["9223372036854775807"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                        };
                        readonly required: readonly ["id", "checkoutSessionId", "asset", "paymentAddress"];
                    };
                };
                readonly paymentIntent: {
                    readonly description: "The payment intent associated with the session. Payment intent is created when the session is created.";
                    readonly type: "object";
                    readonly required: readonly ["id", "organizationId", "status", "paymentMethodId", "transactions"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly organizationId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly amount: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountReceived: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"];
                            readonly description: "`requires_payment_method` `requires_confirmation` `requires_action` `processing` `requires_capture` `canceled` `succeeded`";
                        };
                        readonly paymentMethodId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly description: {
                            readonly type: "string";
                        };
                        readonly paymentMethod: {
                            readonly type: "object";
                            readonly required: readonly ["id", "assetId", "asset", "type"];
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly assetId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly asset: {
                                    readonly type: "object";
                                    readonly required: readonly ["id", "name", "chainId", "address", "currency", "symbol", "decimals", "isEIP5827Supported"];
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "Asset id";
                                        };
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "Asset name";
                                        };
                                        readonly chainId: {
                                            readonly type: "number";
                                            readonly description: "Asset chain id";
                                            readonly examples: readonly [1];
                                        };
                                        readonly address: {
                                            readonly type: "string";
                                            readonly description: "Asset address on chain";
                                        };
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                            readonly description: "Asset currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                        };
                                        readonly symbol: {
                                            readonly type: "string";
                                            readonly description: "Asset symbol";
                                        };
                                        readonly decimals: {
                                            readonly type: "number";
                                            readonly description: "Asset decimals in which it is represented on chain";
                                            readonly examples: readonly [1];
                                        };
                                        readonly coingeckoId: {
                                            readonly type: "string";
                                            readonly description: "Asset coingecko id";
                                        };
                                        readonly superToken: {
                                            readonly description: "SuperToken data";
                                            readonly type: "object";
                                            readonly required: readonly ["address", "decimals", "symbol"];
                                            readonly properties: {
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's address";
                                                };
                                                readonly decimals: {
                                                    readonly type: "number";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly symbol: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's symbol";
                                                };
                                            };
                                        };
                                        readonly isEIP5827Supported: {
                                            readonly type: "boolean";
                                            readonly description: "Is EIP5827 supported";
                                        };
                                    };
                                };
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                    readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                                };
                                readonly accountAddress: {
                                    readonly type: "string";
                                };
                                readonly billingDetails: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "The name";
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                            readonly description: "The email";
                                        };
                                        readonly phone: {
                                            readonly type: "string";
                                            readonly description: "The phone";
                                        };
                                        readonly organizationName: {
                                            readonly type: "string";
                                            readonly description: "The organization name";
                                        };
                                        readonly address: {
                                            readonly description: "The address";
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly line1: {
                                                    readonly type: "string";
                                                };
                                                readonly line2: {
                                                    readonly type: "string";
                                                };
                                                readonly city: {
                                                    readonly type: "string";
                                                };
                                                readonly state: {
                                                    readonly type: "string";
                                                };
                                                readonly postalCode: {
                                                    readonly type: "string";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly customerId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                };
                            };
                        };
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                        };
                        readonly transferAccountAddress: {
                            readonly type: "string";
                        };
                        readonly transactions: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly required: readonly ["type", "fromAddress", "toAddress", "currency", "amountRaw", "assetId", "asset"];
                                readonly properties: {
                                    readonly type: {
                                        readonly description: "Transaction type\n\n`incoming` `outgoing` `event` `transfer`";
                                        readonly type: "string";
                                        readonly enum: readonly ["incoming", "outgoing", "event", "transfer"];
                                    };
                                    readonly transactionRelayId: {
                                        readonly type: "string";
                                        readonly description: "Transaction relay id";
                                    };
                                    readonly transactionHash: {
                                        readonly type: "string";
                                        readonly description: "Transaction hash";
                                    };
                                    readonly nonce: {
                                        readonly type: "number";
                                        readonly description: "Transaction nonce";
                                        readonly examples: readonly [1];
                                    };
                                    readonly gasLimit: {
                                        readonly type: "number";
                                        readonly description: "Transaction gas limit used in payment";
                                        readonly examples: readonly [1];
                                    };
                                    readonly validUntil: {
                                        readonly type: "string";
                                        readonly description: "Transaction valid until";
                                    };
                                    readonly fromAddress: {
                                        readonly type: "string";
                                        readonly description: "Transaction from address";
                                    };
                                    readonly toAddress: {
                                        readonly type: "string";
                                        readonly description: "Transaction to address";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "Transaction currency\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                        readonly description: "Transaction created at";
                                    };
                                    readonly amount: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "Transaction amount in 8 decimals";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountRaw: {
                                        readonly type: "string";
                                        readonly description: "Transaction amount raw received from alchemy";
                                    };
                                    readonly assetId: {
                                        readonly type: "string";
                                        readonly description: "Transaction asset id";
                                    };
                                    readonly asset: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "name", "address", "chainId", "currency", "symbol", "decimals", "isPublic", "chain"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly address: {
                                                readonly type: "string";
                                            };
                                            readonly chainId: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                            };
                                            readonly symbol: {
                                                readonly type: "string";
                                            };
                                            readonly decimals: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly coingeckoId: {
                                                readonly type: "string";
                                            };
                                            readonly isPublic: {
                                                readonly type: "boolean";
                                            };
                                            readonly superToken: {
                                                readonly type: "object";
                                                readonly required: readonly ["address", "decimals", "symbol"];
                                                readonly properties: {
                                                    readonly address: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's address";
                                                    };
                                                    readonly decimals: {
                                                        readonly type: "number";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly symbol: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's symbol";
                                                    };
                                                };
                                            };
                                            readonly chain: {
                                                readonly type: "object";
                                                readonly required: readonly ["id", "name", "icon", "currency", "blockExplorerTransactionUrl", "blockExplorerName", "type", "isBeta"];
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "number";
                                                        readonly description: "Chain id";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "Chain name";
                                                    };
                                                    readonly icon: {
                                                        readonly type: "string";
                                                        readonly description: "Chain icon";
                                                    };
                                                    readonly currency: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                        readonly description: "Chain currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                                    };
                                                    readonly blockExplorerTransactionUrl: {
                                                        readonly type: "string";
                                                        readonly description: "Chain block explorer transaction url";
                                                    };
                                                    readonly blockExplorerName: {
                                                        readonly type: "string";
                                                        readonly description: "Chain block explorer name";
                                                    };
                                                    readonly type: {
                                                        readonly description: "Chain type\n\n`evm` `solana` `tron` `stripe` `binance_pay`";
                                                        readonly type: "string";
                                                        readonly enum: readonly ["evm", "solana", "tron", "stripe", "binance_pay"];
                                                    };
                                                    readonly isBeta: {
                                                        readonly type: "boolean";
                                                        readonly description: "Is beta asset";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly transactionUrl: {
                                        readonly type: "string";
                                        readonly description: "Transaction url";
                                    };
                                };
                            };
                        };
                        readonly paymentReceipt: {
                            readonly type: "object";
                            readonly required: readonly ["id", "organizationId", "paymentIntentId", "receiptNumber"];
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly organizationId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly paymentIntentId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly receiptNumber: {
                                    readonly type: "string";
                                };
                                readonly uri: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly canceledAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly cancellationReason: {
                            readonly type: "string";
                        };
                        readonly stripe: {
                            readonly type: "object";
                            readonly properties: {
                                readonly paymentIntentId: {
                                    readonly type: "string";
                                };
                                readonly receiptUrl: {
                                    readonly type: "string";
                                };
                                readonly cardLast4: {
                                    readonly type: "string";
                                };
                                readonly displayName: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly isMarkRefunded: {
                            readonly type: "boolean";
                        };
                        readonly markRefundedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly markRefundedComment: {
                            readonly type: "string";
                        };
                    };
                };
                readonly isMarkRefunded: {
                    readonly type: "boolean";
                    readonly description: "Whether to mark the payment as refunded";
                };
                readonly allowPromotionCodes: {
                    readonly type: "boolean";
                    readonly description: "Enables user redeemable promotion codes.";
                };
                readonly discounts: {
                    readonly description: "The list of discounts applied to the session";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly amount: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly description: "The amount of the discount";
                                readonly examples: readonly ["9223372036854775807"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                            readonly couponId: {
                                readonly type: "string";
                                readonly description: "The coupon id of the discount";
                            };
                            readonly coupon: {
                                readonly description: "The coupon of the discount";
                                readonly type: "object";
                                readonly required: readonly ["name", "code"];
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of the coupon displayed to customers on for instance invoices or receipts.";
                                    };
                                    readonly percentOff: {
                                        readonly type: "number";
                                        readonly minimum: 0;
                                        readonly maximum: 100;
                                        readonly description: "Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.";
                                        readonly examples: readonly [1];
                                    };
                                    readonly amountOff: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "Fixed amount that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.";
                                        readonly minimum: 0;
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly description: "Name of the currency displayed to customers on for instance invoices or receipts.";
                                    };
                                    readonly code: {
                                        readonly type: "string";
                                        readonly description: "The coupon code";
                                    };
                                };
                            };
                        };
                        readonly required: readonly ["amount", "couponId", "coupon"];
                    };
                };
                readonly defaultPromotionCode: {
                    readonly type: "string";
                    readonly description: "The default promotion code to apply to the session";
                };
                readonly isManualPayment: {
                    readonly type: "boolean";
                };
            };
            readonly required: readonly ["id", "organizationId", "amountTotal", "amountSubtotal", "currency", "status", "paymentStatus", "url", "lineItems", "addresses", "paymentIntent", "discounts", "isManualPayment"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "401": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const SessionsControllerExportCheckoutSessions: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly createdAt: {
                    readonly type: "object";
                    readonly properties: {
                        readonly isnull: {
                            readonly type: "boolean";
                            readonly description: "Returns null values";
                        };
                        readonly notnull: {
                            readonly type: "boolean";
                            readonly description: "Returns not null values";
                        };
                        readonly gt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than the given date";
                            readonly examples: readonly ["2020-01-01"];
                        };
                        readonly gte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than or equal to the given date";
                        };
                        readonly lt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than the given date";
                        };
                        readonly lte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than or equal to the given date";
                        };
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by created date";
                };
                readonly ids: {
                    readonly type: "string";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0", "c3611c05-df51-4b47-b601-f2eac02f4ef2"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by id. Returns items with given ids";
                };
                readonly paymentLinkId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter checkout sessions by payment link id";
                };
                readonly subscriptionId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter checkout sessions by subscription id";
                };
                readonly invoiceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter checkout sessions by invoice ids";
                };
                readonly mode: {
                    readonly type: "string";
                    readonly enum: readonly ["payment", "subscription"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter checkout sessions by mode";
                };
                readonly paymentMethodTypes: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter checkout sessions by payment method type";
                };
                readonly status: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter checkout sessions by status";
                };
                readonly paymentStatus: {
                    readonly type: "string";
                    readonly enum: readonly ["unpaid", "paid"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter checkout sessions by payment status";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter checkout sessions by customer id";
                };
                readonly couponId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter checkout sessions by applied coupon id";
                };
                readonly from: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter checkout sessions by created date from";
                };
                readonly to: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter checkout sessions by created date to";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const SessionsControllerFindAll: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number. Starts from 1";
                };
                readonly limit: {
                    readonly type: "number";
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of items per page";
                };
                readonly createdAt: {
                    readonly type: "object";
                    readonly properties: {
                        readonly isnull: {
                            readonly type: "boolean";
                            readonly description: "Returns null values";
                        };
                        readonly notnull: {
                            readonly type: "boolean";
                            readonly description: "Returns not null values";
                        };
                        readonly gt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than the given date";
                            readonly examples: readonly ["2020-01-01"];
                        };
                        readonly gte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than or equal to the given date";
                        };
                        readonly lt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than the given date";
                        };
                        readonly lte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than or equal to the given date";
                        };
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by created date";
                };
                readonly ids: {
                    readonly type: "string";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0", "c3611c05-df51-4b47-b601-f2eac02f4ef2"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by id. Returns items with given ids";
                };
                readonly paymentLinkId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter checkout sessions by payment link id";
                };
                readonly subscriptionId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter checkout sessions by subscription id";
                };
                readonly invoiceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter checkout sessions by invoice ids";
                };
                readonly mode: {
                    readonly type: "string";
                    readonly enum: readonly ["payment", "subscription"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter checkout sessions by mode";
                };
                readonly paymentMethodTypes: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter checkout sessions by payment method type";
                };
                readonly status: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter checkout sessions by status";
                };
                readonly paymentStatus: {
                    readonly type: "string";
                    readonly enum: readonly ["unpaid", "paid"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter checkout sessions by payment status";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter checkout sessions by customer id";
                };
                readonly couponId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter checkout sessions by applied coupon id";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["page", "limit", "count", "hasMore", "data"];
            readonly properties: {
                readonly page: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly description: "Page number. Starts from 1";
                    readonly examples: readonly [1];
                };
                readonly limit: {
                    readonly type: "number";
                    readonly default: 200;
                    readonly description: "Number of items per page";
                    readonly examples: readonly [10];
                };
                readonly count: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly hasMore: {
                    readonly type: "boolean";
                };
                readonly query: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly default: 1;
                            readonly description: "Page number. Starts from 1";
                            readonly examples: readonly [1];
                        };
                        readonly limit: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly maximum: 200;
                            readonly default: 200;
                            readonly description: "Number of items per page";
                            readonly examples: readonly [10];
                        };
                        readonly createdAt: {
                            readonly description: "Filter by created date";
                            readonly type: "object";
                            readonly properties: {
                                readonly isnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns null values";
                                };
                                readonly notnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns not null values";
                                };
                                readonly gt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than the given date";
                                    readonly examples: readonly ["2020-01-01"];
                                };
                                readonly gte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than or equal to the given date";
                                };
                                readonly lt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than the given date";
                                };
                                readonly lte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than or equal to the given date";
                                };
                            };
                        };
                    };
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["id", "organizationId", "amountTotal", "amountSubtotal", "currency", "status", "paymentStatus", "url", "lineItems", "isManualPayment", "paymentIntent"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly organizationId: {
                                readonly type: "string";
                                readonly description: "Organization id of the checkout session";
                            };
                            readonly mode: {
                                readonly type: "string";
                                readonly enum: readonly ["payment", "subscription"];
                                readonly description: "The mode of the Checkout Session.\n\n`payment` `subscription`";
                                readonly examples: readonly ["payment"];
                            };
                            readonly paymentLinkId: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "The payment link id used to create this checkout session";
                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                            };
                            readonly subscriptionId: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "The subscription created from this checkout session";
                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                            };
                            readonly invoiceId: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly description: "The invoice created from this checkout session";
                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                            };
                            readonly amountTotal: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly description: "A non-zero amount filled in with 8 decimal places. For example, 1 USDC is 100000000.";
                                readonly minimum: 0;
                                readonly examples: readonly [100000000];
                                readonly maximum: 9223372036854776000;
                            };
                            readonly amountSubtotal: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly description: "Amount subtotal is total of all line items excluding tax, shipping, application fee and discount. A non-zero amount filled in with 8 decimal places. For example, 1 USDC is 100000000.";
                                readonly minimum: 0;
                                readonly examples: readonly [100000000];
                                readonly maximum: 9223372036854776000;
                            };
                            readonly amountGasFee: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly description: "Amount fee is extra amount on top of amountSubtotal. If charged from end user.";
                                readonly examples: readonly ["9223372036854775807"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                            readonly amountFee: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly description: "Amount fee is extra amount on top of amountSubtotal. If charged from end user.";
                                readonly examples: readonly ["9223372036854775807"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                            readonly amountNet: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly examples: readonly ["9223372036854775807"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                            readonly amountDetails: {
                                readonly description: "The amount details of the payment";
                                readonly type: "object";
                                readonly required: readonly ["currency", "amountTotal", "amountSubtotal", "amountDiscount", "amountTax", "amountFee", "applyFee", "applyGasFee", "discountAmounts"];
                                readonly properties: {
                                    readonly currency: {
                                        readonly description: "The currency of the payment\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                    };
                                    readonly amountTotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "The total amount of the payment after discounts and taxes";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountSubtotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "The total amount of the payment before discounts and taxes";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountDiscount: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "The total amount of the payment discount";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountTax: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "The total amount of the payment tax";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountFee: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "The total amount of the payment application fee";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountGasFee: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "The total amount of the transaction gas fee. If null then we are not able to calculate gasFee";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly feePercentage: {
                                        readonly type: "number";
                                        readonly description: "The fee percentage to apply";
                                        readonly examples: readonly [1];
                                    };
                                    readonly applyFee: {
                                        readonly type: "boolean";
                                        readonly description: "The flag to apply fee";
                                    };
                                    readonly applyGasFee: {
                                        readonly type: "boolean";
                                        readonly description: "The flag to apply gas fee";
                                    };
                                    readonly discountAmounts: {
                                        readonly description: "The list of discount amounts";
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["amount", "couponId"];
                                            readonly properties: {
                                                readonly amount: {
                                                    readonly format: "int64";
                                                    readonly type: "integer";
                                                    readonly description: "The amount of the discount";
                                                    readonly examples: readonly ["9223372036854775807"];
                                                    readonly minimum: -9223372036854776000;
                                                    readonly maximum: 9223372036854776000;
                                                };
                                                readonly couponId: {
                                                    readonly type: "string";
                                                    readonly description: "The coupon id of the discount";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                readonly description: "Currency of the amount\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                readonly examples: readonly ["usdc"];
                            };
                            readonly paymentMethodTypes: {
                                readonly type: "array";
                                readonly description: "A list of the types of payment methods (e.g. wallet) this Checkout Session is allowed to accept.";
                                readonly minItems: 1;
                                readonly maxItems: 1;
                                readonly items: {
                                    readonly type: "string";
                                    readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                    readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                                };
                                readonly examples: readonly ["wallet"];
                            };
                            readonly paymentSetting: {
                                readonly description: "The payment method settings to use for this checkout's payment";
                                readonly type: "object";
                                readonly properties: {
                                    readonly paymentMethodTypes: {
                                        readonly type: "array";
                                        readonly description: "A list of the types of payment methods";
                                        readonly minItems: 1;
                                        readonly maxItems: 1;
                                        readonly items: {
                                            readonly type: "string";
                                            readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                            readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                                        };
                                        readonly examples: readonly ["wallet"];
                                    };
                                    readonly allowedChains: {
                                        readonly description: "The list of chains allowed for the payment. If not provided, all chains supported by the organization are enabled.";
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["chainId"];
                                            readonly properties: {
                                                readonly chainId: {
                                                    readonly type: "number";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly blacklistCurrencies: {
                                                    readonly type: "array";
                                                    readonly description: "The list of currencies to disable for the payment. Note: This field is only used for checkout session API atm.";
                                                    readonly items: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                                    };
                                                    readonly examples: readonly ["usdc"];
                                                };
                                                readonly withdrawalAddress: {
                                                    readonly type: "string";
                                                    readonly description: "This is optional, default withdrawal address configured in dashboard under settings > payment methods is used. The custom withdrawal address to use for this chain instead of stored default withdrawal address.";
                                                };
                                                readonly withdrawalAddresses: {
                                                    readonly description: "The list of withdrawal addresses to split the payment. If provided, the sum of all split percentages should be 100.";
                                                    readonly minItems: 2;
                                                    readonly maxItems: 4;
                                                    readonly type: "array";
                                                    readonly items: {
                                                        readonly type: "object";
                                                        readonly required: readonly ["splitPercentage", "address"];
                                                        readonly properties: {
                                                            readonly splitPercentage: {
                                                                readonly type: "number";
                                                                readonly minimum: 0;
                                                                readonly maximum: 100;
                                                                readonly examples: readonly [1];
                                                            };
                                                            readonly address: {
                                                                readonly type: "string";
                                                                readonly description: "The withdrawal address for the split percentage";
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly preferredChainId: {
                                        readonly type: "number";
                                        readonly description: "The preferred chain's id";
                                        readonly examples: readonly [1];
                                    };
                                    readonly allowSwap: {
                                        readonly type: "boolean";
                                        readonly description: "Whether the user can swap the payment currency";
                                        readonly default: false;
                                    };
                                    readonly allowFiatPayment: {
                                        readonly type: "boolean";
                                        readonly description: "Whether to allow payment with fiat currency. If set to true, the payment will be made in fiat currency.\n      This is experimental field and supposed to change. Default: false";
                                    };
                                };
                            };
                            readonly status: {
                                readonly description: "The status of the session\n\n`open` `complete` `incomplete` `expired`";
                                readonly type: "string";
                                readonly enum: readonly ["open", "complete", "incomplete", "expired"];
                            };
                            readonly paymentStatus: {
                                readonly type: "string";
                                readonly enum: readonly ["unpaid", "paid"];
                                readonly description: "The status of the payment\n\n`unpaid` `paid`";
                            };
                            readonly expiresAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "The time at which the session will expire. Default: 1 Hour";
                            };
                            readonly customerId: {
                                readonly type: "string";
                                readonly description: "The ID of the customer if you want to associate the session with a customer";
                            };
                            readonly customerDetails: {
                                readonly description: "The checkout sessions's customer detail";
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                    };
                                    readonly phone: {
                                        readonly type: "string";
                                    };
                                    readonly organizationName: {
                                        readonly type: "string";
                                        readonly description: "The organization name";
                                    };
                                    readonly address: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly line1: {
                                                readonly type: "string";
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                            };
                                            readonly city: {
                                                readonly type: "string";
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                            };
                                            readonly postalCode: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly taxIds: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly object: {
                                                readonly type: "string";
                                            };
                                            readonly data: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["id", "customerId"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                        };
                                                        readonly createdAt: {
                                                            readonly format: "date-time";
                                                            readonly type: "string";
                                                        };
                                                        readonly updatedAt: {
                                                            readonly format: "date-time";
                                                            readonly type: "string";
                                                        };
                                                        readonly name: {
                                                            readonly type: "string";
                                                        };
                                                        readonly value: {
                                                            readonly type: "string";
                                                        };
                                                        readonly country: {
                                                            readonly type: "string";
                                                        };
                                                        readonly customerId: {
                                                            readonly type: "string";
                                                            readonly format: "uuid";
                                                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            readonly clientReferenceId: {
                                readonly type: "string";
                                readonly description: "Unique ID string used to identify the session in your backend. This can be your payment ID, cart ID, or similar used to link this Checkout Session with your internal system.";
                            };
                            readonly customerCreation: {
                                readonly description: "Whether to create a customer for the session. If required, a customer will be created for subsequent payments\n\n`if_required` `always`";
                                readonly type: "string";
                                readonly enum: readonly ["if_required", "always"];
                            };
                            readonly url: {
                                readonly type: "string";
                                readonly description: "The URL to redirect the customer to complete payment";
                            };
                            readonly successUrl: {
                                readonly type: "string";
                                readonly description: "The URL to redirect the customer to after payment is completed. Only applicable when `afterCompletion` is set to `redirect`";
                            };
                            readonly cancelUrl: {
                                readonly type: "string";
                                readonly description: "The URL to redirect the customer to if they decide to cancel payment";
                            };
                            readonly submitType: {
                                readonly default: "pay";
                                readonly description: "The type of submit button to display on the Checkout page\n\n`pay` `book` `donate`";
                                readonly type: "string";
                                readonly enum: readonly ["pay", "book", "donate"];
                            };
                            readonly metadata: {
                                readonly type: "object";
                                readonly description: "A set of key-value pairs that you can attach to a Checkout Session object";
                                readonly additionalProperties: true;
                            };
                            readonly nameCollection: {
                                readonly type: "boolean";
                                readonly description: "Whether to collect the customer's name. Default: false";
                            };
                            readonly emailCollection: {
                                readonly type: "boolean";
                                readonly description: "Whether to collect the customer's email address. Default: false";
                            };
                            readonly phoneNumberCollection: {
                                readonly type: "boolean";
                                readonly description: "Whether to collect the customer's phone number Default: false";
                            };
                            readonly shippingAddressCollection: {
                                readonly type: "boolean";
                                readonly description: "Whether to collect the customer's shipping address. Default: false";
                            };
                            readonly billingAddressCollection: {
                                readonly type: "boolean";
                                readonly description: "Whether to collect the customer's billing address. Default: false";
                            };
                            readonly customFields: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly fields: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["key", "type", "label", "optional"];
                                            readonly properties: {
                                                readonly key: {
                                                    readonly type: "string";
                                                };
                                                readonly type: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["text", "numeric", "dropdown"];
                                                    readonly description: "`text` `numeric` `dropdown`";
                                                };
                                                readonly label: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["custom"];
                                                    readonly properties: {
                                                        readonly type: {
                                                            readonly type: "string";
                                                            readonly enum: readonly ["custom"];
                                                            readonly description: "`custom`";
                                                        };
                                                        readonly custom: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                                readonly optional: {
                                                    readonly type: "boolean";
                                                    readonly default: false;
                                                };
                                                readonly text: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["value"];
                                                    readonly properties: {
                                                        readonly maximumLength: {
                                                            readonly type: "number";
                                                            readonly examples: readonly [1];
                                                        };
                                                        readonly minimumLength: {
                                                            readonly type: "number";
                                                            readonly examples: readonly [1];
                                                        };
                                                        readonly value: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                                readonly numeric: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["value"];
                                                    readonly properties: {
                                                        readonly maximumLength: {
                                                            readonly type: "number";
                                                            readonly examples: readonly [1];
                                                        };
                                                        readonly minimumLength: {
                                                            readonly type: "number";
                                                            readonly examples: readonly [1];
                                                        };
                                                        readonly value: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                                readonly dropdown: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["value"];
                                                    readonly properties: {
                                                        readonly options: {
                                                            readonly type: "array";
                                                            readonly items: {
                                                                readonly type: "object";
                                                                readonly required: readonly ["label", "value"];
                                                                readonly properties: {
                                                                    readonly label: {
                                                                        readonly type: "string";
                                                                    };
                                                                    readonly value: {
                                                                        readonly type: "string";
                                                                    };
                                                                };
                                                            };
                                                        };
                                                        readonly value: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            readonly afterCompletion: {
                                readonly description: "The action to take after the payment is completed. You can choose to redirect user to your application or use the default payment confirmation page provided by Copperx\n\n`redirect` `hosted_confirmation`";
                                readonly type: "string";
                                readonly enum: readonly ["redirect", "hosted_confirmation"];
                            };
                            readonly afterCompletionConfirmMsg: {
                                readonly type: "string";
                                readonly description: "The message to show after successful payment. Only applicable when `afterCompletion` is set to `hosted_confirmation`";
                            };
                            readonly shippingDetails: {
                                readonly description: "The shipping address to use for this checkout";
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "The name";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                        readonly description: "The email";
                                    };
                                    readonly phone: {
                                        readonly type: "string";
                                        readonly description: "The phone";
                                    };
                                    readonly organizationName: {
                                        readonly type: "string";
                                        readonly description: "The organization name";
                                    };
                                    readonly address: {
                                        readonly description: "The address";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly line1: {
                                                readonly type: "string";
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                            };
                                            readonly city: {
                                                readonly type: "string";
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                            };
                                            readonly postalCode: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                            };
                            readonly billingDetails: {
                                readonly description: "The billing address to use for this checkout";
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "The name";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                        readonly description: "The email";
                                    };
                                    readonly phone: {
                                        readonly type: "string";
                                        readonly description: "The phone";
                                    };
                                    readonly organizationName: {
                                        readonly type: "string";
                                        readonly description: "The organization name";
                                    };
                                    readonly address: {
                                        readonly description: "The address";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly line1: {
                                                readonly type: "string";
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                            };
                                            readonly city: {
                                                readonly type: "string";
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                            };
                                            readonly postalCode: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                            };
                            readonly lineItems: {
                                readonly description: "The list of line items to display on the session";
                                readonly type: "object";
                                readonly properties: {
                                    readonly object: {
                                        readonly type: "string";
                                    };
                                    readonly data: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["price"];
                                            readonly properties: {
                                                readonly description: {
                                                    readonly type: "string";
                                                };
                                                readonly quantity: {
                                                    readonly type: "number";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly price: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["id", "currency", "productId", "type", "product"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                        };
                                                        readonly createdAt: {
                                                            readonly format: "date-time";
                                                            readonly type: "string";
                                                        };
                                                        readonly updatedAt: {
                                                            readonly format: "date-time";
                                                            readonly type: "string";
                                                        };
                                                        readonly billingScheme: {
                                                            readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                                                            readonly type: "string";
                                                            readonly enum: readonly ["per_unit"];
                                                        };
                                                        readonly currency: {
                                                            readonly type: "string";
                                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                                            readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                                        };
                                                        readonly productId: {
                                                            readonly type: "string";
                                                            readonly format: "uuid";
                                                            readonly description: "Product's id";
                                                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                        };
                                                        readonly interval: {
                                                            readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                                                            readonly type: "string";
                                                            readonly enum: readonly ["day", "week", "month", "year"];
                                                        };
                                                        readonly intervalCount: {
                                                            readonly type: "number";
                                                            readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                                                            readonly examples: readonly [1];
                                                        };
                                                        readonly isActive: {
                                                            readonly type: "boolean";
                                                            readonly description: "Whether the price is currently active";
                                                        };
                                                        readonly usageType: {
                                                            readonly description: "The usage type of the price.\n\n`licensed`";
                                                            readonly type: "string";
                                                            readonly enum: readonly ["licensed"];
                                                        };
                                                        readonly type: {
                                                            readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                                                            readonly type: "string";
                                                            readonly enum: readonly ["one_time", "recurring", "streaming"];
                                                        };
                                                        readonly unitAmount: {
                                                            readonly format: "int64";
                                                            readonly type: "integer";
                                                            readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                                                            readonly examples: readonly ["9223372036854775807"];
                                                            readonly minimum: -9223372036854776000;
                                                            readonly maximum: 9223372036854776000;
                                                        };
                                                        readonly unitAmountDecimal: {
                                                            readonly type: "string";
                                                        };
                                                        readonly customUnitMax: {
                                                            readonly format: "int64";
                                                            readonly type: "integer";
                                                            readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                            readonly examples: readonly ["9223372036854775807"];
                                                            readonly minimum: -9223372036854776000;
                                                            readonly maximum: 9223372036854776000;
                                                        };
                                                        readonly customUnitMin: {
                                                            readonly format: "int64";
                                                            readonly type: "integer";
                                                            readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                            readonly examples: readonly ["9223372036854775807"];
                                                            readonly minimum: -9223372036854776000;
                                                            readonly maximum: 9223372036854776000;
                                                        };
                                                        readonly customPreset: {
                                                            readonly format: "int64";
                                                            readonly type: "integer";
                                                            readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                                                            readonly examples: readonly ["9223372036854775807"];
                                                            readonly minimum: -9223372036854776000;
                                                            readonly maximum: 9223372036854776000;
                                                        };
                                                        readonly customUnitAmountSuggestions: {
                                                            readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                                                            readonly type: "array";
                                                            readonly items: {
                                                                readonly type: "string";
                                                            };
                                                        };
                                                        readonly product: {
                                                            readonly description: "The product this price belongs to";
                                                            readonly type: "object";
                                                            readonly required: readonly ["id", "name"];
                                                            readonly properties: {
                                                                readonly id: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly createdAt: {
                                                                    readonly format: "date-time";
                                                                    readonly type: "string";
                                                                };
                                                                readonly updatedAt: {
                                                                    readonly format: "date-time";
                                                                    readonly type: "string";
                                                                };
                                                                readonly name: {
                                                                    readonly type: "string";
                                                                    readonly description: "The name of the product. Displayed on the checkout page";
                                                                };
                                                                readonly description: {
                                                                    readonly type: "string";
                                                                    readonly description: "The description of the product. Displayed on the checkout page";
                                                                };
                                                                readonly isActive: {
                                                                    readonly type: "boolean";
                                                                    readonly description: "Whether the product is currently active";
                                                                };
                                                                readonly images: {
                                                                    readonly maxItems: 8;
                                                                    readonly description: "The url of product images. Displayed on the checkout page";
                                                                    readonly type: "array";
                                                                    readonly items: {
                                                                        readonly type: "string";
                                                                    };
                                                                };
                                                                readonly publicImages: {
                                                                    readonly description: "Product images with absolute public url";
                                                                    readonly type: "array";
                                                                    readonly items: {
                                                                        readonly type: "string";
                                                                    };
                                                                };
                                                                readonly unitLabel: {
                                                                    readonly type: "string";
                                                                    readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                                                };
                                                                readonly url: {
                                                                    readonly type: "string";
                                                                    readonly description: "The url of the product";
                                                                };
                                                                readonly defaultPriceId: {
                                                                    readonly type: "string";
                                                                    readonly format: "uuid";
                                                                    readonly description: "Product's default price id";
                                                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                                };
                                                                readonly metadata: {
                                                                    readonly type: "object";
                                                                    readonly description: "The metadata of the product";
                                                                    readonly additionalProperties: true;
                                                                };
                                                                readonly visibility: {
                                                                    readonly description: "The visibility of the product\n\n`10` `20`";
                                                                    readonly type: "string";
                                                                    readonly enum: readonly [10, 20];
                                                                };
                                                            };
                                                        };
                                                        readonly metadata: {
                                                            readonly type: "object";
                                                            readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                                            readonly additionalProperties: true;
                                                        };
                                                        readonly visibility: {
                                                            readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                                                            readonly type: "string";
                                                            readonly enum: readonly [10, 20];
                                                        };
                                                    };
                                                };
                                                readonly taxRates: {
                                                    readonly type: "array";
                                                    readonly items: {
                                                        readonly type: "object";
                                                        readonly required: readonly ["id", "name", "percentage", "type", "isDefault"];
                                                        readonly properties: {
                                                            readonly id: {
                                                                readonly type: "string";
                                                            };
                                                            readonly name: {
                                                                readonly type: "string";
                                                                readonly description: "The name of the tax rate.";
                                                            };
                                                            readonly description: {
                                                                readonly type: "string";
                                                                readonly description: "The description of the tax rate.";
                                                            };
                                                            readonly country: {
                                                                readonly type: "string";
                                                                readonly description: "The country of the tax rate.";
                                                            };
                                                            readonly percentage: {
                                                                readonly type: "number";
                                                                readonly minimum: 0;
                                                                readonly maximum: 100;
                                                                readonly description: "Percent that will be added to subtotal as a tax.";
                                                                readonly examples: readonly [1];
                                                            };
                                                            readonly type: {
                                                                readonly description: "The type of the tax rate.\n\n`exclusive` `inclusive`";
                                                                readonly type: "string";
                                                                readonly enum: readonly ["exclusive", "inclusive"];
                                                            };
                                                            readonly isDefault: {
                                                                readonly type: "boolean";
                                                            };
                                                        };
                                                    };
                                                };
                                                readonly amountTotal: {
                                                    readonly format: "int64";
                                                    readonly type: "integer";
                                                    readonly examples: readonly ["9223372036854775807"];
                                                    readonly minimum: -9223372036854776000;
                                                    readonly maximum: 9223372036854776000;
                                                };
                                                readonly amountSubtotal: {
                                                    readonly format: "int64";
                                                    readonly type: "integer";
                                                    readonly examples: readonly ["9223372036854775807"];
                                                    readonly minimum: -9223372036854776000;
                                                    readonly maximum: 9223372036854776000;
                                                };
                                                readonly amountTax: {
                                                    readonly format: "int64";
                                                    readonly type: "integer";
                                                    readonly examples: readonly ["9223372036854775807"];
                                                    readonly minimum: -9223372036854776000;
                                                    readonly maximum: 9223372036854776000;
                                                };
                                                readonly currency: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                    readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            readonly isMarkRefunded: {
                                readonly type: "boolean";
                                readonly description: "Whether to mark the payment as refunded";
                            };
                            readonly allowPromotionCodes: {
                                readonly type: "boolean";
                                readonly description: "Enables user redeemable promotion codes.";
                            };
                            readonly defaultPromotionCode: {
                                readonly type: "string";
                                readonly description: "The default promotion code to apply to the session";
                            };
                            readonly isManualPayment: {
                                readonly type: "boolean";
                            };
                            readonly paymentIntent: {
                                readonly description: "The payment intent associated with the session. Payment intent is created when the session is created.";
                                readonly type: "object";
                                readonly required: readonly ["id", "organizationId", "status", "paymentMethodId"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly updatedAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly organizationId: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                    };
                                    readonly amount: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountReceived: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                    readonly status: {
                                        readonly type: "string";
                                        readonly enum: readonly ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"];
                                        readonly description: "`requires_payment_method` `requires_confirmation` `requires_action` `processing` `requires_capture` `canceled` `succeeded`";
                                    };
                                    readonly paymentMethodId: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                    };
                                    readonly description: {
                                        readonly type: "string";
                                    };
                                    readonly paymentMethod: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "assetId", "asset", "type"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly assetId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                            readonly asset: {
                                                readonly type: "object";
                                                readonly required: readonly ["id", "name", "chainId", "address", "currency", "symbol", "decimals", "isEIP5827Supported"];
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                        readonly description: "Asset id";
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "Asset name";
                                                    };
                                                    readonly chainId: {
                                                        readonly type: "number";
                                                        readonly description: "Asset chain id";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly address: {
                                                        readonly type: "string";
                                                        readonly description: "Asset address on chain";
                                                    };
                                                    readonly currency: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                        readonly description: "Asset currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                                    };
                                                    readonly symbol: {
                                                        readonly type: "string";
                                                        readonly description: "Asset symbol";
                                                    };
                                                    readonly decimals: {
                                                        readonly type: "number";
                                                        readonly description: "Asset decimals in which it is represented on chain";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly coingeckoId: {
                                                        readonly type: "string";
                                                        readonly description: "Asset coingecko id";
                                                    };
                                                    readonly superToken: {
                                                        readonly description: "SuperToken data";
                                                        readonly type: "object";
                                                        readonly required: readonly ["address", "decimals", "symbol"];
                                                        readonly properties: {
                                                            readonly address: {
                                                                readonly type: "string";
                                                                readonly description: "SuperToken's address";
                                                            };
                                                            readonly decimals: {
                                                                readonly type: "number";
                                                                readonly examples: readonly [1];
                                                            };
                                                            readonly symbol: {
                                                                readonly type: "string";
                                                                readonly description: "SuperToken's symbol";
                                                            };
                                                        };
                                                    };
                                                    readonly isEIP5827Supported: {
                                                        readonly type: "boolean";
                                                        readonly description: "Is EIP5827 supported";
                                                    };
                                                };
                                            };
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                                            };
                                            readonly accountAddress: {
                                                readonly type: "string";
                                            };
                                            readonly billingDetails: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "The name";
                                                    };
                                                    readonly email: {
                                                        readonly type: "string";
                                                        readonly description: "The email";
                                                    };
                                                    readonly phone: {
                                                        readonly type: "string";
                                                        readonly description: "The phone";
                                                    };
                                                    readonly organizationName: {
                                                        readonly type: "string";
                                                        readonly description: "The organization name";
                                                    };
                                                    readonly address: {
                                                        readonly description: "The address";
                                                        readonly type: "object";
                                                        readonly properties: {
                                                            readonly line1: {
                                                                readonly type: "string";
                                                            };
                                                            readonly line2: {
                                                                readonly type: "string";
                                                            };
                                                            readonly city: {
                                                                readonly type: "string";
                                                            };
                                                            readonly state: {
                                                                readonly type: "string";
                                                            };
                                                            readonly postalCode: {
                                                                readonly type: "string";
                                                            };
                                                            readonly country: {
                                                                readonly type: "string";
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                            readonly customerId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                            readonly options: {
                                                readonly type: "object";
                                                readonly additionalProperties: true;
                                            };
                                        };
                                    };
                                    readonly paymentMethodTypes: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                            readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                                        };
                                    };
                                    readonly transferAccountAddress: {
                                        readonly type: "string";
                                    };
                                    readonly paymentReceipt: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "organizationId", "paymentIntentId", "receiptNumber"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly organizationId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                            readonly paymentIntentId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly receiptNumber: {
                                                readonly type: "string";
                                            };
                                            readonly uri: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly canceledAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly cancellationReason: {
                                        readonly type: "string";
                                    };
                                    readonly stripe: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly paymentIntentId: {
                                                readonly type: "string";
                                            };
                                            readonly receiptUrl: {
                                                readonly type: "string";
                                            };
                                            readonly cardLast4: {
                                                readonly type: "string";
                                            };
                                            readonly displayName: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly isMarkRefunded: {
                                        readonly type: "boolean";
                                    };
                                    readonly markRefundedAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly markRefundedComment: {
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const SessionsControllerFindOne: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly description: "Organization id of the checkout session";
                };
                readonly mode: {
                    readonly description: "The mode of the Checkout Session.\n\n`payment` `subscription`";
                    readonly type: "string";
                    readonly enum: readonly ["payment", "subscription"];
                    readonly examples: readonly ["payment"];
                };
                readonly paymentLinkId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The payment link id used to create this checkout session";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly subscriptionId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The subscription created from this checkout session";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly invoiceId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly description: "The invoice created from this checkout session";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly amountTotal: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "A non-zero amount filled in with 8 decimal places. For example, 1 USDC is 100000000.";
                    readonly minimum: 0;
                    readonly examples: readonly [100000000];
                    readonly maximum: 9223372036854776000;
                };
                readonly amountSubtotal: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "Amount subtotal is total of all line items excluding tax, shipping, application fee and discount. A non-zero amount filled in with 8 decimal places. For example, 1 USDC is 100000000.";
                    readonly minimum: 0;
                    readonly examples: readonly [100000000];
                    readonly maximum: 9223372036854776000;
                };
                readonly amountGasFee: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "Amount fee is extra amount on top of amountSubtotal. If charged from end user.";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly amountFee: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly description: "Amount fee is extra amount on top of amountSubtotal. If charged from end user.";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly amountNet: {
                    readonly format: "int64";
                    readonly type: "integer";
                    readonly examples: readonly ["9223372036854775807"];
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly amountDetails: {
                    readonly description: "The amount details of the payment";
                    readonly type: "object";
                    readonly required: readonly ["currency", "amountTotal", "amountSubtotal", "amountDiscount", "amountTax", "amountFee", "applyFee", "applyGasFee", "discountAmounts"];
                    readonly properties: {
                        readonly currency: {
                            readonly description: "The currency of the payment\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                        };
                        readonly amountTotal: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The total amount of the payment after discounts and taxes";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountSubtotal: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The total amount of the payment before discounts and taxes";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountDiscount: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The total amount of the payment discount";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountTax: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The total amount of the payment tax";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountFee: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The total amount of the payment application fee";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountGasFee: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly description: "The total amount of the transaction gas fee. If null then we are not able to calculate gasFee";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly feePercentage: {
                            readonly type: "number";
                            readonly description: "The fee percentage to apply";
                            readonly examples: readonly [1];
                        };
                        readonly applyFee: {
                            readonly type: "boolean";
                            readonly description: "The flag to apply fee";
                        };
                        readonly applyGasFee: {
                            readonly type: "boolean";
                            readonly description: "The flag to apply gas fee";
                        };
                        readonly discountAmounts: {
                            readonly description: "The list of discount amounts";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly required: readonly ["amount", "couponId"];
                                readonly properties: {
                                    readonly amount: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "The amount of the discount";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly couponId: {
                                        readonly type: "string";
                                        readonly description: "The coupon id of the discount";
                                    };
                                };
                            };
                        };
                    };
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "Currency of the amount\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                    readonly examples: readonly ["usdc"];
                };
                readonly paymentMethodTypes: {
                    readonly type: "array";
                    readonly description: "A list of the types of payment methods (e.g. wallet) this Checkout Session is allowed to accept.";
                    readonly minItems: 1;
                    readonly maxItems: 1;
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                        readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                    };
                    readonly examples: readonly ["wallet"];
                };
                readonly paymentSetting: {
                    readonly description: "The payment method settings to use for this checkout's payment";
                    readonly type: "object";
                    readonly properties: {
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly description: "A list of the types of payment methods";
                            readonly minItems: 1;
                            readonly maxItems: 1;
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                            readonly examples: readonly ["wallet"];
                        };
                        readonly allowedChains: {
                            readonly description: "The list of chains allowed for the payment. If not provided, all chains supported by the organization are enabled.";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly required: readonly ["chainId"];
                                readonly properties: {
                                    readonly chainId: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly blacklistCurrencies: {
                                        readonly type: "array";
                                        readonly description: "The list of currencies to disable for the payment. Note: This field is only used for checkout session API atm.";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                        };
                                        readonly examples: readonly ["usdc"];
                                    };
                                    readonly withdrawalAddress: {
                                        readonly type: "string";
                                        readonly description: "This is optional, default withdrawal address configured in dashboard under settings > payment methods is used. The custom withdrawal address to use for this chain instead of stored default withdrawal address.";
                                    };
                                    readonly withdrawalAddresses: {
                                        readonly description: "The list of withdrawal addresses to split the payment. If provided, the sum of all split percentages should be 100.";
                                        readonly minItems: 2;
                                        readonly maxItems: 4;
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["splitPercentage", "address"];
                                            readonly properties: {
                                                readonly splitPercentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly examples: readonly [1];
                                                };
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "The withdrawal address for the split percentage";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly preferredChainId: {
                            readonly type: "number";
                            readonly description: "The preferred chain's id";
                            readonly examples: readonly [1];
                        };
                        readonly allowSwap: {
                            readonly type: "boolean";
                            readonly description: "Whether the user can swap the payment currency";
                            readonly default: false;
                        };
                        readonly allowFiatPayment: {
                            readonly type: "boolean";
                            readonly description: "Whether to allow payment with fiat currency. If set to true, the payment will be made in fiat currency.\n      This is experimental field and supposed to change. Default: false";
                        };
                    };
                };
                readonly status: {
                    readonly description: "The status of the session\n\n`open` `complete` `incomplete` `expired`";
                    readonly type: "string";
                    readonly enum: readonly ["open", "complete", "incomplete", "expired"];
                };
                readonly paymentStatus: {
                    readonly description: "The status of the payment\n\n`unpaid` `paid`";
                    readonly type: "string";
                    readonly enum: readonly ["unpaid", "paid"];
                };
                readonly expiresAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "The time at which the session will expire. Default: 1 Hour";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly description: "The ID of the customer if you want to associate the session with a customer";
                };
                readonly customer: {
                    readonly description: "The customer detail from saved customer's information. This is only available when customer id is provided or customer is stored";
                    readonly type: "object";
                    readonly required: readonly ["id", "customerNumber"];
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Customer's id";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's created at";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's updated at";
                        };
                        readonly customerReferenceId: {
                            readonly type: "string";
                            readonly description: "Customer's reference id";
                        };
                        readonly shipping: {
                            readonly description: "Customer's shipping address";
                            readonly type: "object";
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name";
                                };
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The email";
                                };
                                readonly phone: {
                                    readonly type: "string";
                                    readonly description: "The phone";
                                };
                                readonly organizationName: {
                                    readonly type: "string";
                                    readonly description: "The organization name";
                                };
                                readonly address: {
                                    readonly description: "The address";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly line1: {
                                            readonly type: "string";
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                        };
                                        readonly postalCode: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly taxIds: {
                            readonly type: "object";
                            readonly properties: {
                                readonly object: {
                                    readonly type: "string";
                                };
                                readonly data: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "customerId"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                            readonly customerId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        readonly visibility: {
                            readonly description: "Customer's visibility. If Dashboard then displayed on dashboard UI. If API then only returned in API response only.\n\n`10` `20`";
                            readonly type: "string";
                            readonly enum: readonly [10, 20];
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "Customer's metadata";
                            readonly additionalProperties: true;
                        };
                        readonly customerNumber: {
                            readonly type: "string";
                            readonly description: "Customer number assigned by the system";
                        };
                    };
                };
                readonly customerDetails: {
                    readonly description: "The checkout sessions's customer detail";
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly email: {
                            readonly type: "string";
                        };
                        readonly phone: {
                            readonly type: "string";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly taxIds: {
                            readonly type: "object";
                            readonly properties: {
                                readonly object: {
                                    readonly type: "string";
                                };
                                readonly data: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "customerId"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                            readonly customerId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                readonly clientReferenceId: {
                    readonly type: "string";
                    readonly description: "Unique ID string used to identify the session in your backend. This can be your payment ID, cart ID, or similar used to link this Checkout Session with your internal system.";
                };
                readonly customerCreation: {
                    readonly description: "Whether to create a customer for the session. If required, a customer will be created for subsequent payments\n\n`if_required` `always`";
                    readonly type: "string";
                    readonly enum: readonly ["if_required", "always"];
                };
                readonly customerUpdate: {
                    readonly description: "The customer update settings to use for this checkout to update existing customer details";
                    readonly type: "object";
                    readonly properties: {
                        readonly address: {
                            readonly type: "string";
                            readonly enum: readonly ["auto", "never"];
                            readonly description: "`auto` `never`";
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly enum: readonly ["auto", "never"];
                            readonly description: "`auto` `never`";
                        };
                        readonly shipping: {
                            readonly type: "string";
                            readonly enum: readonly ["auto", "never"];
                            readonly description: "`auto` `never`";
                        };
                    };
                };
                readonly url: {
                    readonly type: "string";
                    readonly description: "The URL to redirect the customer to complete payment";
                };
                readonly successUrl: {
                    readonly type: "string";
                    readonly description: "The URL to redirect the customer to after payment is completed. Only applicable when `afterCompletion` is set to `redirect`";
                };
                readonly cancelUrl: {
                    readonly type: "string";
                    readonly description: "The URL to redirect the customer to if they decide to cancel payment";
                };
                readonly submitType: {
                    readonly default: "pay";
                    readonly description: "The type of submit button to display on the Checkout page\n\n`pay` `book` `donate`";
                    readonly type: "string";
                    readonly enum: readonly ["pay", "book", "donate"];
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly description: "A set of key-value pairs that you can attach to a Checkout Session object";
                    readonly additionalProperties: true;
                };
                readonly nameCollection: {
                    readonly type: "boolean";
                    readonly description: "Whether to collect the customer's name. Default: false";
                };
                readonly emailCollection: {
                    readonly type: "boolean";
                    readonly description: "Whether to collect the customer's email address. Default: false";
                };
                readonly phoneNumberCollection: {
                    readonly type: "boolean";
                    readonly description: "Whether to collect the customer's phone number Default: false";
                };
                readonly shippingAddressCollection: {
                    readonly type: "boolean";
                    readonly description: "Whether to collect the customer's shipping address. Default: false";
                };
                readonly billingAddressCollection: {
                    readonly type: "boolean";
                    readonly description: "Whether to collect the customer's billing address. Default: false";
                };
                readonly customFields: {
                    readonly type: "object";
                    readonly properties: {
                        readonly fields: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly key: {
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly enum: readonly ["text", "numeric", "dropdown"];
                                        readonly description: "`text` `numeric` `dropdown`";
                                    };
                                    readonly label: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["custom"];
                                                readonly description: "`custom`";
                                            };
                                            readonly custom: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly required: readonly ["custom"];
                                    };
                                    readonly optional: {
                                        readonly type: "boolean";
                                        readonly default: false;
                                    };
                                    readonly text: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly maximumLength: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly minimumLength: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly required: readonly ["value"];
                                    };
                                    readonly numeric: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly maximumLength: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly minimumLength: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly required: readonly ["value"];
                                    };
                                    readonly dropdown: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly options: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly label: {
                                                            readonly type: "string";
                                                        };
                                                        readonly value: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly required: readonly ["label", "value"];
                                                };
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly required: readonly ["value"];
                                    };
                                };
                                readonly required: readonly ["key", "type", "label", "optional"];
                            };
                        };
                    };
                };
                readonly afterCompletion: {
                    readonly description: "The action to take after the payment is completed. You can choose to redirect user to your application or use the default payment confirmation page provided by Copperx\n\n`redirect` `hosted_confirmation`";
                    readonly type: "string";
                    readonly enum: readonly ["redirect", "hosted_confirmation"];
                };
                readonly afterCompletionConfirmMsg: {
                    readonly type: "string";
                    readonly description: "The message to show after successful payment. Only applicable when `afterCompletion` is set to `hosted_confirmation`";
                };
                readonly shippingDetails: {
                    readonly description: "The shipping address to use for this checkout";
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                };
                readonly billingDetails: {
                    readonly description: "The billing address to use for this checkout";
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                };
                readonly lineItems: {
                    readonly description: "The list of line items to display on the session";
                    readonly type: "object";
                    readonly properties: {
                        readonly object: {
                            readonly type: "string";
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly required: readonly ["price"];
                                readonly properties: {
                                    readonly description: {
                                        readonly type: "string";
                                    };
                                    readonly quantity: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly price: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "currency", "productId", "type", "product"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly billingScheme: {
                                                readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                                                readonly type: "string";
                                                readonly enum: readonly ["per_unit"];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                                readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                            };
                                            readonly productId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "Product's id";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                            readonly interval: {
                                                readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                                                readonly type: "string";
                                                readonly enum: readonly ["day", "week", "month", "year"];
                                            };
                                            readonly intervalCount: {
                                                readonly type: "number";
                                                readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                                                readonly examples: readonly [1];
                                            };
                                            readonly isActive: {
                                                readonly type: "boolean";
                                                readonly description: "Whether the price is currently active";
                                            };
                                            readonly usageType: {
                                                readonly description: "The usage type of the price.\n\n`licensed`";
                                                readonly type: "string";
                                                readonly enum: readonly ["licensed"];
                                            };
                                            readonly type: {
                                                readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                                                readonly type: "string";
                                                readonly enum: readonly ["one_time", "recurring", "streaming"];
                                            };
                                            readonly unitAmount: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly unitAmountDecimal: {
                                                readonly type: "string";
                                            };
                                            readonly customUnitMax: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitMin: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customPreset: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitAmountSuggestions: {
                                                readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                            readonly product: {
                                                readonly description: "The product this price belongs to";
                                                readonly type: "object";
                                                readonly required: readonly ["id", "name"];
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                    };
                                                    readonly createdAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly updatedAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the product. Displayed on the checkout page";
                                                    };
                                                    readonly description: {
                                                        readonly type: "string";
                                                        readonly description: "The description of the product. Displayed on the checkout page";
                                                    };
                                                    readonly isActive: {
                                                        readonly type: "boolean";
                                                        readonly description: "Whether the product is currently active";
                                                    };
                                                    readonly images: {
                                                        readonly maxItems: 8;
                                                        readonly description: "The url of product images. Displayed on the checkout page";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly publicImages: {
                                                        readonly description: "Product images with absolute public url";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly unitLabel: {
                                                        readonly type: "string";
                                                        readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                                    };
                                                    readonly url: {
                                                        readonly type: "string";
                                                        readonly description: "The url of the product";
                                                    };
                                                    readonly defaultPriceId: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Product's default price id";
                                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                    };
                                                    readonly metadata: {
                                                        readonly type: "object";
                                                        readonly description: "The metadata of the product";
                                                        readonly additionalProperties: true;
                                                    };
                                                    readonly visibility: {
                                                        readonly description: "The visibility of the product\n\n`10` `20`";
                                                        readonly type: "string";
                                                        readonly enum: readonly [10, 20];
                                                    };
                                                };
                                            };
                                            readonly metadata: {
                                                readonly type: "object";
                                                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                                readonly additionalProperties: true;
                                            };
                                            readonly visibility: {
                                                readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                                                readonly type: "string";
                                                readonly enum: readonly [10, 20];
                                            };
                                        };
                                    };
                                    readonly taxRates: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["id", "name", "percentage", "type", "isDefault"];
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the tax rate.";
                                                };
                                                readonly description: {
                                                    readonly type: "string";
                                                    readonly description: "The description of the tax rate.";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                    readonly description: "The country of the tax rate.";
                                                };
                                                readonly percentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly description: "Percent that will be added to subtotal as a tax.";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly type: {
                                                    readonly description: "The type of the tax rate.\n\n`exclusive` `inclusive`";
                                                    readonly type: "string";
                                                    readonly enum: readonly ["exclusive", "inclusive"];
                                                };
                                                readonly isDefault: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                        };
                                    };
                                    readonly amountTotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountSubtotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountTax: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                };
                            };
                        };
                    };
                };
                readonly addresses: {
                    readonly description: "The list of payment addresses associated with the session. It is the list of the addresses that will be used to pay the amount.";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly checkoutSessionId: {
                                readonly type: "string";
                            };
                            readonly asset: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly address: {
                                        readonly type: "string";
                                    };
                                    readonly chainId: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                    readonly symbol: {
                                        readonly type: "string";
                                    };
                                    readonly decimals: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly coingeckoId: {
                                        readonly type: "string";
                                    };
                                    readonly isPublic: {
                                        readonly type: "boolean";
                                    };
                                    readonly superToken: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly address: {
                                                readonly type: "string";
                                                readonly description: "SuperToken's address";
                                            };
                                            readonly decimals: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly symbol: {
                                                readonly type: "string";
                                                readonly description: "SuperToken's symbol";
                                            };
                                        };
                                        readonly required: readonly ["address", "decimals", "symbol"];
                                    };
                                    readonly chain: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "number";
                                                readonly description: "Chain id";
                                                readonly examples: readonly [1];
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                                readonly description: "Chain name";
                                            };
                                            readonly icon: {
                                                readonly type: "string";
                                                readonly description: "Chain icon";
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                readonly description: "Chain currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                            };
                                            readonly blockExplorerTransactionUrl: {
                                                readonly type: "string";
                                                readonly description: "Chain block explorer transaction url";
                                            };
                                            readonly blockExplorerName: {
                                                readonly type: "string";
                                                readonly description: "Chain block explorer name";
                                            };
                                            readonly type: {
                                                readonly description: "Chain type\n\n`evm` `solana` `tron` `stripe` `binance_pay`";
                                                readonly type: "string";
                                                readonly enum: readonly ["evm", "solana", "tron", "stripe", "binance_pay"];
                                            };
                                            readonly isBeta: {
                                                readonly type: "boolean";
                                                readonly description: "Is beta asset";
                                            };
                                        };
                                        readonly required: readonly ["id", "name", "icon", "currency", "blockExplorerTransactionUrl", "blockExplorerName", "type", "isBeta"];
                                    };
                                };
                                readonly required: readonly ["id", "name", "address", "chainId", "currency", "symbol", "decimals", "isPublic", "chain"];
                            };
                            readonly paymentAddress: {
                                readonly type: "string";
                            };
                            readonly gas: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly description: "This approx estimated gas required to withdraw amount from the payment address. It is in gas unit, and need to multiply by gas price to get the total gas fee in native token";
                                readonly examples: readonly ["9223372036854775807"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                            readonly gasAmount: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly description: "This the approx estimated total amount a user should pay in checkout session currency as transaction fees. This is equivalent to gas * gasPrice. This amount is in 8 (currency decimals)This can be null if gas fee is inclusive of subtotal and not additionally charged";
                                readonly examples: readonly ["9223372036854775807"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                        };
                        readonly required: readonly ["id", "checkoutSessionId", "asset", "paymentAddress"];
                    };
                };
                readonly paymentIntent: {
                    readonly description: "The payment intent associated with the session. Payment intent is created when the session is created.";
                    readonly type: "object";
                    readonly required: readonly ["id", "organizationId", "status", "paymentMethodId", "transactions"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly organizationId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly amount: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly amountReceived: {
                            readonly format: "int64";
                            readonly type: "integer";
                            readonly examples: readonly ["9223372036854775807"];
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                            readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["requires_payment_method", "requires_confirmation", "requires_action", "processing", "requires_capture", "canceled", "succeeded"];
                            readonly description: "`requires_payment_method` `requires_confirmation` `requires_action` `processing` `requires_capture` `canceled` `succeeded`";
                        };
                        readonly paymentMethodId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly description: {
                            readonly type: "string";
                        };
                        readonly paymentMethod: {
                            readonly type: "object";
                            readonly required: readonly ["id", "assetId", "asset", "type"];
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly assetId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly asset: {
                                    readonly type: "object";
                                    readonly required: readonly ["id", "name", "chainId", "address", "currency", "symbol", "decimals", "isEIP5827Supported"];
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "Asset id";
                                        };
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "Asset name";
                                        };
                                        readonly chainId: {
                                            readonly type: "number";
                                            readonly description: "Asset chain id";
                                            readonly examples: readonly [1];
                                        };
                                        readonly address: {
                                            readonly type: "string";
                                            readonly description: "Asset address on chain";
                                        };
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                            readonly description: "Asset currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                        };
                                        readonly symbol: {
                                            readonly type: "string";
                                            readonly description: "Asset symbol";
                                        };
                                        readonly decimals: {
                                            readonly type: "number";
                                            readonly description: "Asset decimals in which it is represented on chain";
                                            readonly examples: readonly [1];
                                        };
                                        readonly coingeckoId: {
                                            readonly type: "string";
                                            readonly description: "Asset coingecko id";
                                        };
                                        readonly superToken: {
                                            readonly description: "SuperToken data";
                                            readonly type: "object";
                                            readonly required: readonly ["address", "decimals", "symbol"];
                                            readonly properties: {
                                                readonly address: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's address";
                                                };
                                                readonly decimals: {
                                                    readonly type: "number";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly symbol: {
                                                    readonly type: "string";
                                                    readonly description: "SuperToken's symbol";
                                                };
                                            };
                                        };
                                        readonly isEIP5827Supported: {
                                            readonly type: "boolean";
                                            readonly description: "Is EIP5827 supported";
                                        };
                                    };
                                };
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                    readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                                };
                                readonly accountAddress: {
                                    readonly type: "string";
                                };
                                readonly billingDetails: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "The name";
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                            readonly description: "The email";
                                        };
                                        readonly phone: {
                                            readonly type: "string";
                                            readonly description: "The phone";
                                        };
                                        readonly organizationName: {
                                            readonly type: "string";
                                            readonly description: "The organization name";
                                        };
                                        readonly address: {
                                            readonly description: "The address";
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly line1: {
                                                    readonly type: "string";
                                                };
                                                readonly line2: {
                                                    readonly type: "string";
                                                };
                                                readonly city: {
                                                    readonly type: "string";
                                                };
                                                readonly state: {
                                                    readonly type: "string";
                                                };
                                                readonly postalCode: {
                                                    readonly type: "string";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                };
                                readonly customerId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly options: {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                };
                            };
                        };
                        readonly paymentMethodTypes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                            };
                        };
                        readonly transferAccountAddress: {
                            readonly type: "string";
                        };
                        readonly transactions: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly required: readonly ["type", "fromAddress", "toAddress", "currency", "amountRaw", "assetId", "asset"];
                                readonly properties: {
                                    readonly type: {
                                        readonly description: "Transaction type\n\n`incoming` `outgoing` `event` `transfer`";
                                        readonly type: "string";
                                        readonly enum: readonly ["incoming", "outgoing", "event", "transfer"];
                                    };
                                    readonly transactionRelayId: {
                                        readonly type: "string";
                                        readonly description: "Transaction relay id";
                                    };
                                    readonly transactionHash: {
                                        readonly type: "string";
                                        readonly description: "Transaction hash";
                                    };
                                    readonly nonce: {
                                        readonly type: "number";
                                        readonly description: "Transaction nonce";
                                        readonly examples: readonly [1];
                                    };
                                    readonly gasLimit: {
                                        readonly type: "number";
                                        readonly description: "Transaction gas limit used in payment";
                                        readonly examples: readonly [1];
                                    };
                                    readonly validUntil: {
                                        readonly type: "string";
                                        readonly description: "Transaction valid until";
                                    };
                                    readonly fromAddress: {
                                        readonly type: "string";
                                        readonly description: "Transaction from address";
                                    };
                                    readonly toAddress: {
                                        readonly type: "string";
                                        readonly description: "Transaction to address";
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "Transaction currency\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                        readonly description: "Transaction created at";
                                    };
                                    readonly amount: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "Transaction amount in 8 decimals";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountRaw: {
                                        readonly type: "string";
                                        readonly description: "Transaction amount raw received from alchemy";
                                    };
                                    readonly assetId: {
                                        readonly type: "string";
                                        readonly description: "Transaction asset id";
                                    };
                                    readonly asset: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "name", "address", "chainId", "currency", "symbol", "decimals", "isPublic", "chain"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly address: {
                                                readonly type: "string";
                                            };
                                            readonly chainId: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                            };
                                            readonly symbol: {
                                                readonly type: "string";
                                            };
                                            readonly decimals: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly coingeckoId: {
                                                readonly type: "string";
                                            };
                                            readonly isPublic: {
                                                readonly type: "boolean";
                                            };
                                            readonly superToken: {
                                                readonly type: "object";
                                                readonly required: readonly ["address", "decimals", "symbol"];
                                                readonly properties: {
                                                    readonly address: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's address";
                                                    };
                                                    readonly decimals: {
                                                        readonly type: "number";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly symbol: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's symbol";
                                                    };
                                                };
                                            };
                                            readonly chain: {
                                                readonly type: "object";
                                                readonly required: readonly ["id", "name", "icon", "currency", "blockExplorerTransactionUrl", "blockExplorerName", "type", "isBeta"];
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "number";
                                                        readonly description: "Chain id";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "Chain name";
                                                    };
                                                    readonly icon: {
                                                        readonly type: "string";
                                                        readonly description: "Chain icon";
                                                    };
                                                    readonly currency: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                        readonly description: "Chain currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                                    };
                                                    readonly blockExplorerTransactionUrl: {
                                                        readonly type: "string";
                                                        readonly description: "Chain block explorer transaction url";
                                                    };
                                                    readonly blockExplorerName: {
                                                        readonly type: "string";
                                                        readonly description: "Chain block explorer name";
                                                    };
                                                    readonly type: {
                                                        readonly description: "Chain type\n\n`evm` `solana` `tron` `stripe` `binance_pay`";
                                                        readonly type: "string";
                                                        readonly enum: readonly ["evm", "solana", "tron", "stripe", "binance_pay"];
                                                    };
                                                    readonly isBeta: {
                                                        readonly type: "boolean";
                                                        readonly description: "Is beta asset";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly transactionUrl: {
                                        readonly type: "string";
                                        readonly description: "Transaction url";
                                    };
                                };
                            };
                        };
                        readonly paymentReceipt: {
                            readonly type: "object";
                            readonly required: readonly ["id", "organizationId", "paymentIntentId", "receiptNumber"];
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly createdAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly updatedAt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                };
                                readonly organizationId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly paymentIntentId: {
                                    readonly type: "string";
                                    readonly format: "uuid";
                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                };
                                readonly name: {
                                    readonly type: "string";
                                };
                                readonly receiptNumber: {
                                    readonly type: "string";
                                };
                                readonly uri: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly canceledAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly cancellationReason: {
                            readonly type: "string";
                        };
                        readonly stripe: {
                            readonly type: "object";
                            readonly properties: {
                                readonly paymentIntentId: {
                                    readonly type: "string";
                                };
                                readonly receiptUrl: {
                                    readonly type: "string";
                                };
                                readonly cardLast4: {
                                    readonly type: "string";
                                };
                                readonly displayName: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly isMarkRefunded: {
                            readonly type: "boolean";
                        };
                        readonly markRefundedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly markRefundedComment: {
                            readonly type: "string";
                        };
                    };
                };
                readonly isMarkRefunded: {
                    readonly type: "boolean";
                    readonly description: "Whether to mark the payment as refunded";
                };
                readonly allowPromotionCodes: {
                    readonly type: "boolean";
                    readonly description: "Enables user redeemable promotion codes.";
                };
                readonly discounts: {
                    readonly description: "The list of discounts applied to the session";
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly amount: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly description: "The amount of the discount";
                                readonly examples: readonly ["9223372036854775807"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                            readonly couponId: {
                                readonly type: "string";
                                readonly description: "The coupon id of the discount";
                            };
                            readonly coupon: {
                                readonly description: "The coupon of the discount";
                                readonly type: "object";
                                readonly required: readonly ["name", "code"];
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name of the coupon displayed to customers on for instance invoices or receipts.";
                                    };
                                    readonly percentOff: {
                                        readonly type: "number";
                                        readonly minimum: 0;
                                        readonly maximum: 100;
                                        readonly description: "Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.";
                                        readonly examples: readonly [1];
                                    };
                                    readonly amountOff: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly description: "Fixed amount that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.";
                                        readonly minimum: 0;
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly description: "Name of the currency displayed to customers on for instance invoices or receipts.";
                                    };
                                    readonly code: {
                                        readonly type: "string";
                                        readonly description: "The coupon code";
                                    };
                                };
                            };
                        };
                        readonly required: readonly ["amount", "couponId", "coupon"];
                    };
                };
                readonly defaultPromotionCode: {
                    readonly type: "string";
                    readonly description: "The default promotion code to apply to the session";
                };
                readonly isManualPayment: {
                    readonly type: "boolean";
                };
            };
            readonly required: readonly ["id", "organizationId", "amountTotal", "amountSubtotal", "currency", "status", "paymentStatus", "url", "lineItems", "addresses", "paymentIntent", "discounts", "isManualPayment"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const StorageFileControllerPost: {
    readonly body: {
        readonly properties: {
            readonly image: {
                readonly type: "string";
                readonly format: "binary";
            };
        };
        readonly type: "object";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly storageType: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["storageType"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly filePath: {
                    readonly type: "string";
                };
                readonly imageUrl: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["filePath", "imageUrl"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const SubscriptionControllerCancel: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly cancellationComment: {
                readonly type: "string";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly tags: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly clientReferenceId: {
                    readonly type: "string";
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly collectionMethod: {
                    readonly type: "string";
                    readonly enum: readonly ["superfluid", "charge_automatically", "send_invoice"];
                    readonly description: "`superfluid` `charge_automatically` `send_invoice`";
                };
                readonly interval: {
                    readonly type: "string";
                    readonly enum: readonly ["day", "week", "month", "year"];
                    readonly description: "`day` `week` `month` `year`";
                };
                readonly intervalCount: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly paymentMethodTypes: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                        readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                    };
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["incomplete", "incomplete_expired", "trialing", "active", "past_due", "canceled", "unpaid", "paused"];
                    readonly description: "`incomplete` `incomplete_expired` `trialing` `active` `past_due` `canceled` `unpaid` `paused`";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly defaultPaymentMethodId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly defaultPaymentMethod: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly assetId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly asset: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "Asset id";
                                };
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "Asset name";
                                };
                                readonly chainId: {
                                    readonly type: "number";
                                    readonly description: "Asset chain id";
                                    readonly examples: readonly [1];
                                };
                                readonly address: {
                                    readonly type: "string";
                                    readonly description: "Asset address on chain";
                                };
                                readonly currency: {
                                    readonly type: "string";
                                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                    readonly description: "Asset currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                };
                                readonly symbol: {
                                    readonly type: "string";
                                    readonly description: "Asset symbol";
                                };
                                readonly decimals: {
                                    readonly type: "number";
                                    readonly description: "Asset decimals in which it is represented on chain";
                                    readonly examples: readonly [1];
                                };
                                readonly coingeckoId: {
                                    readonly type: "string";
                                    readonly description: "Asset coingecko id";
                                };
                                readonly superToken: {
                                    readonly description: "SuperToken data";
                                    readonly type: "object";
                                    readonly required: readonly ["address", "decimals", "symbol"];
                                    readonly properties: {
                                        readonly address: {
                                            readonly type: "string";
                                            readonly description: "SuperToken's address";
                                        };
                                        readonly decimals: {
                                            readonly type: "number";
                                            readonly examples: readonly [1];
                                        };
                                        readonly symbol: {
                                            readonly type: "string";
                                            readonly description: "SuperToken's symbol";
                                        };
                                    };
                                };
                                readonly isEIP5827Supported: {
                                    readonly type: "boolean";
                                    readonly description: "Is EIP5827 supported";
                                };
                            };
                            readonly required: readonly ["id", "name", "chainId", "address", "currency", "symbol", "decimals", "isEIP5827Supported"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                            readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                        };
                        readonly accountAddress: {
                            readonly type: "string";
                        };
                        readonly billingDetails: {
                            readonly type: "object";
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name";
                                };
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The email";
                                };
                                readonly phone: {
                                    readonly type: "string";
                                    readonly description: "The phone";
                                };
                                readonly organizationName: {
                                    readonly type: "string";
                                    readonly description: "The organization name";
                                };
                                readonly address: {
                                    readonly description: "The address";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly line1: {
                                            readonly type: "string";
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                        };
                                        readonly postalCode: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly customerId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly options: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                    };
                    readonly required: readonly ["id", "assetId", "asset", "type"];
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly customer: {
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Customer's id";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's created at";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's updated at";
                        };
                        readonly customerReferenceId: {
                            readonly type: "string";
                            readonly description: "Customer's reference id";
                        };
                        readonly shipping: {
                            readonly description: "Customer's shipping address";
                            readonly type: "object";
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name";
                                };
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The email";
                                };
                                readonly phone: {
                                    readonly type: "string";
                                    readonly description: "The phone";
                                };
                                readonly organizationName: {
                                    readonly type: "string";
                                    readonly description: "The organization name";
                                };
                                readonly address: {
                                    readonly description: "The address";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly line1: {
                                            readonly type: "string";
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                        };
                                        readonly postalCode: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly taxIds: {
                            readonly type: "object";
                            readonly properties: {
                                readonly object: {
                                    readonly type: "string";
                                };
                                readonly data: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                            readonly customerId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                        };
                                        readonly required: readonly ["id", "customerId"];
                                    };
                                };
                            };
                        };
                        readonly visibility: {
                            readonly description: "Customer's visibility. If Dashboard then displayed on dashboard UI. If API then only returned in API response only.\n\n`10` `20`";
                            readonly type: "string";
                            readonly enum: readonly [10, 20];
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "Customer's metadata";
                            readonly additionalProperties: true;
                        };
                        readonly customerNumber: {
                            readonly type: "string";
                            readonly description: "Customer number assigned by the system";
                        };
                    };
                    readonly required: readonly ["id", "customerNumber"];
                };
                readonly startDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly endedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly cancelAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly canceledAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly lineItems: {
                    readonly type: "object";
                    readonly properties: {
                        readonly object: {
                            readonly type: "string";
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly description: {
                                        readonly type: "string";
                                    };
                                    readonly quantity: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly price: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly billingScheme: {
                                                readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                                                readonly type: "string";
                                                readonly enum: readonly ["per_unit"];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                                readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                            };
                                            readonly productId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "Product's id";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                            readonly interval: {
                                                readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                                                readonly type: "string";
                                                readonly enum: readonly ["day", "week", "month", "year"];
                                            };
                                            readonly intervalCount: {
                                                readonly type: "number";
                                                readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                                                readonly examples: readonly [1];
                                            };
                                            readonly isActive: {
                                                readonly type: "boolean";
                                                readonly description: "Whether the price is currently active";
                                            };
                                            readonly usageType: {
                                                readonly description: "The usage type of the price.\n\n`licensed`";
                                                readonly type: "string";
                                                readonly enum: readonly ["licensed"];
                                            };
                                            readonly type: {
                                                readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                                                readonly type: "string";
                                                readonly enum: readonly ["one_time", "recurring", "streaming"];
                                            };
                                            readonly unitAmount: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly unitAmountDecimal: {
                                                readonly type: "string";
                                            };
                                            readonly customUnitMax: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitMin: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customPreset: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitAmountSuggestions: {
                                                readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                            readonly product: {
                                                readonly description: "The product this price belongs to";
                                                readonly type: "object";
                                                readonly required: readonly ["id", "name"];
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                    };
                                                    readonly createdAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly updatedAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the product. Displayed on the checkout page";
                                                    };
                                                    readonly description: {
                                                        readonly type: "string";
                                                        readonly description: "The description of the product. Displayed on the checkout page";
                                                    };
                                                    readonly isActive: {
                                                        readonly type: "boolean";
                                                        readonly description: "Whether the product is currently active";
                                                    };
                                                    readonly images: {
                                                        readonly maxItems: 8;
                                                        readonly description: "The url of product images. Displayed on the checkout page";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly publicImages: {
                                                        readonly description: "Product images with absolute public url";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly unitLabel: {
                                                        readonly type: "string";
                                                        readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                                    };
                                                    readonly url: {
                                                        readonly type: "string";
                                                        readonly description: "The url of the product";
                                                    };
                                                    readonly defaultPriceId: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Product's default price id";
                                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                    };
                                                    readonly metadata: {
                                                        readonly type: "object";
                                                        readonly description: "The metadata of the product";
                                                        readonly additionalProperties: true;
                                                    };
                                                    readonly visibility: {
                                                        readonly description: "The visibility of the product\n\n`10` `20`";
                                                        readonly type: "string";
                                                        readonly enum: readonly [10, 20];
                                                    };
                                                };
                                            };
                                            readonly metadata: {
                                                readonly type: "object";
                                                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                                readonly additionalProperties: true;
                                            };
                                            readonly visibility: {
                                                readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                                                readonly type: "string";
                                                readonly enum: readonly [10, 20];
                                            };
                                        };
                                        readonly required: readonly ["id", "currency", "productId", "type", "product"];
                                    };
                                    readonly taxRates: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the tax rate.";
                                                };
                                                readonly description: {
                                                    readonly type: "string";
                                                    readonly description: "The description of the tax rate.";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                    readonly description: "The country of the tax rate.";
                                                };
                                                readonly percentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly description: "Percent that will be added to subtotal as a tax.";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly type: {
                                                    readonly description: "The type of the tax rate.\n\n`exclusive` `inclusive`";
                                                    readonly type: "string";
                                                    readonly enum: readonly ["exclusive", "inclusive"];
                                                };
                                                readonly isDefault: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                            readonly required: readonly ["id", "name", "percentage", "type", "isDefault"];
                                        };
                                    };
                                    readonly amountTotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountSubtotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountTax: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                };
                                readonly required: readonly ["price"];
                            };
                        };
                    };
                };
                readonly cancellationReason: {
                    readonly type: "string";
                };
                readonly currentPeriodEnd: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly currentPeriodStart: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly cancelAtPeriodEnd: {
                    readonly type: "boolean";
                };
            };
            readonly required: readonly ["id", "currency", "interval", "status", "lineItems"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const SubscriptionControllerEnd: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly cancellationComment: {
                readonly type: "string";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly tags: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly clientReferenceId: {
                    readonly type: "string";
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly collectionMethod: {
                    readonly type: "string";
                    readonly enum: readonly ["superfluid", "charge_automatically", "send_invoice"];
                    readonly description: "`superfluid` `charge_automatically` `send_invoice`";
                };
                readonly interval: {
                    readonly type: "string";
                    readonly enum: readonly ["day", "week", "month", "year"];
                    readonly description: "`day` `week` `month` `year`";
                };
                readonly intervalCount: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly paymentMethodTypes: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                        readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                    };
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["incomplete", "incomplete_expired", "trialing", "active", "past_due", "canceled", "unpaid", "paused"];
                    readonly description: "`incomplete` `incomplete_expired` `trialing` `active` `past_due` `canceled` `unpaid` `paused`";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly defaultPaymentMethodId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly defaultPaymentMethod: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly assetId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly asset: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "Asset id";
                                };
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "Asset name";
                                };
                                readonly chainId: {
                                    readonly type: "number";
                                    readonly description: "Asset chain id";
                                    readonly examples: readonly [1];
                                };
                                readonly address: {
                                    readonly type: "string";
                                    readonly description: "Asset address on chain";
                                };
                                readonly currency: {
                                    readonly type: "string";
                                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                    readonly description: "Asset currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                };
                                readonly symbol: {
                                    readonly type: "string";
                                    readonly description: "Asset symbol";
                                };
                                readonly decimals: {
                                    readonly type: "number";
                                    readonly description: "Asset decimals in which it is represented on chain";
                                    readonly examples: readonly [1];
                                };
                                readonly coingeckoId: {
                                    readonly type: "string";
                                    readonly description: "Asset coingecko id";
                                };
                                readonly superToken: {
                                    readonly description: "SuperToken data";
                                    readonly type: "object";
                                    readonly required: readonly ["address", "decimals", "symbol"];
                                    readonly properties: {
                                        readonly address: {
                                            readonly type: "string";
                                            readonly description: "SuperToken's address";
                                        };
                                        readonly decimals: {
                                            readonly type: "number";
                                            readonly examples: readonly [1];
                                        };
                                        readonly symbol: {
                                            readonly type: "string";
                                            readonly description: "SuperToken's symbol";
                                        };
                                    };
                                };
                                readonly isEIP5827Supported: {
                                    readonly type: "boolean";
                                    readonly description: "Is EIP5827 supported";
                                };
                            };
                            readonly required: readonly ["id", "name", "chainId", "address", "currency", "symbol", "decimals", "isEIP5827Supported"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                            readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                        };
                        readonly accountAddress: {
                            readonly type: "string";
                        };
                        readonly billingDetails: {
                            readonly type: "object";
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name";
                                };
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The email";
                                };
                                readonly phone: {
                                    readonly type: "string";
                                    readonly description: "The phone";
                                };
                                readonly organizationName: {
                                    readonly type: "string";
                                    readonly description: "The organization name";
                                };
                                readonly address: {
                                    readonly description: "The address";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly line1: {
                                            readonly type: "string";
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                        };
                                        readonly postalCode: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly customerId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly options: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                    };
                    readonly required: readonly ["id", "assetId", "asset", "type"];
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly customer: {
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Customer's id";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's created at";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's updated at";
                        };
                        readonly customerReferenceId: {
                            readonly type: "string";
                            readonly description: "Customer's reference id";
                        };
                        readonly shipping: {
                            readonly description: "Customer's shipping address";
                            readonly type: "object";
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name";
                                };
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The email";
                                };
                                readonly phone: {
                                    readonly type: "string";
                                    readonly description: "The phone";
                                };
                                readonly organizationName: {
                                    readonly type: "string";
                                    readonly description: "The organization name";
                                };
                                readonly address: {
                                    readonly description: "The address";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly line1: {
                                            readonly type: "string";
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                        };
                                        readonly postalCode: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly taxIds: {
                            readonly type: "object";
                            readonly properties: {
                                readonly object: {
                                    readonly type: "string";
                                };
                                readonly data: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                            readonly customerId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                        };
                                        readonly required: readonly ["id", "customerId"];
                                    };
                                };
                            };
                        };
                        readonly visibility: {
                            readonly description: "Customer's visibility. If Dashboard then displayed on dashboard UI. If API then only returned in API response only.\n\n`10` `20`";
                            readonly type: "string";
                            readonly enum: readonly [10, 20];
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "Customer's metadata";
                            readonly additionalProperties: true;
                        };
                        readonly customerNumber: {
                            readonly type: "string";
                            readonly description: "Customer number assigned by the system";
                        };
                    };
                    readonly required: readonly ["id", "customerNumber"];
                };
                readonly startDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly endedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly cancelAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly canceledAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly lineItems: {
                    readonly type: "object";
                    readonly properties: {
                        readonly object: {
                            readonly type: "string";
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly description: {
                                        readonly type: "string";
                                    };
                                    readonly quantity: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly price: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly billingScheme: {
                                                readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                                                readonly type: "string";
                                                readonly enum: readonly ["per_unit"];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                                readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                            };
                                            readonly productId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "Product's id";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                            readonly interval: {
                                                readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                                                readonly type: "string";
                                                readonly enum: readonly ["day", "week", "month", "year"];
                                            };
                                            readonly intervalCount: {
                                                readonly type: "number";
                                                readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                                                readonly examples: readonly [1];
                                            };
                                            readonly isActive: {
                                                readonly type: "boolean";
                                                readonly description: "Whether the price is currently active";
                                            };
                                            readonly usageType: {
                                                readonly description: "The usage type of the price.\n\n`licensed`";
                                                readonly type: "string";
                                                readonly enum: readonly ["licensed"];
                                            };
                                            readonly type: {
                                                readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                                                readonly type: "string";
                                                readonly enum: readonly ["one_time", "recurring", "streaming"];
                                            };
                                            readonly unitAmount: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly unitAmountDecimal: {
                                                readonly type: "string";
                                            };
                                            readonly customUnitMax: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitMin: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customPreset: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitAmountSuggestions: {
                                                readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                            readonly product: {
                                                readonly description: "The product this price belongs to";
                                                readonly type: "object";
                                                readonly required: readonly ["id", "name"];
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                    };
                                                    readonly createdAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly updatedAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the product. Displayed on the checkout page";
                                                    };
                                                    readonly description: {
                                                        readonly type: "string";
                                                        readonly description: "The description of the product. Displayed on the checkout page";
                                                    };
                                                    readonly isActive: {
                                                        readonly type: "boolean";
                                                        readonly description: "Whether the product is currently active";
                                                    };
                                                    readonly images: {
                                                        readonly maxItems: 8;
                                                        readonly description: "The url of product images. Displayed on the checkout page";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly publicImages: {
                                                        readonly description: "Product images with absolute public url";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly unitLabel: {
                                                        readonly type: "string";
                                                        readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                                    };
                                                    readonly url: {
                                                        readonly type: "string";
                                                        readonly description: "The url of the product";
                                                    };
                                                    readonly defaultPriceId: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Product's default price id";
                                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                    };
                                                    readonly metadata: {
                                                        readonly type: "object";
                                                        readonly description: "The metadata of the product";
                                                        readonly additionalProperties: true;
                                                    };
                                                    readonly visibility: {
                                                        readonly description: "The visibility of the product\n\n`10` `20`";
                                                        readonly type: "string";
                                                        readonly enum: readonly [10, 20];
                                                    };
                                                };
                                            };
                                            readonly metadata: {
                                                readonly type: "object";
                                                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                                readonly additionalProperties: true;
                                            };
                                            readonly visibility: {
                                                readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                                                readonly type: "string";
                                                readonly enum: readonly [10, 20];
                                            };
                                        };
                                        readonly required: readonly ["id", "currency", "productId", "type", "product"];
                                    };
                                    readonly taxRates: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the tax rate.";
                                                };
                                                readonly description: {
                                                    readonly type: "string";
                                                    readonly description: "The description of the tax rate.";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                    readonly description: "The country of the tax rate.";
                                                };
                                                readonly percentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly description: "Percent that will be added to subtotal as a tax.";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly type: {
                                                    readonly description: "The type of the tax rate.\n\n`exclusive` `inclusive`";
                                                    readonly type: "string";
                                                    readonly enum: readonly ["exclusive", "inclusive"];
                                                };
                                                readonly isDefault: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                            readonly required: readonly ["id", "name", "percentage", "type", "isDefault"];
                                        };
                                    };
                                    readonly amountTotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountSubtotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountTax: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                };
                                readonly required: readonly ["price"];
                            };
                        };
                    };
                };
                readonly cancellationReason: {
                    readonly type: "string";
                };
                readonly currentPeriodEnd: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly currentPeriodStart: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly cancelAtPeriodEnd: {
                    readonly type: "boolean";
                };
            };
            readonly required: readonly ["id", "currency", "interval", "status", "lineItems"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const SubscriptionControllerFindAll: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number. Starts from 1";
                };
                readonly limit: {
                    readonly type: "number";
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of items per page";
                };
                readonly createdAt: {
                    readonly type: "object";
                    readonly properties: {
                        readonly isnull: {
                            readonly type: "boolean";
                            readonly description: "Returns null values";
                        };
                        readonly notnull: {
                            readonly type: "boolean";
                            readonly description: "Returns not null values";
                        };
                        readonly gt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than the given date";
                            readonly examples: readonly ["2020-01-01"];
                        };
                        readonly gte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than or equal to the given date";
                        };
                        readonly lt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than the given date";
                        };
                        readonly lte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than or equal to the given date";
                        };
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by created date";
                };
                readonly ids: {
                    readonly type: "string";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0", "c3611c05-df51-4b47-b601-f2eac02f4ef2"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by id. Returns items with given ids";
                };
                readonly clientReferenceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly currency: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly status: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly startDate: {
                    readonly type: "object";
                    readonly properties: {
                        readonly isnull: {
                            readonly type: "boolean";
                            readonly description: "Returns null values";
                        };
                        readonly notnull: {
                            readonly type: "boolean";
                            readonly description: "Returns not null values";
                        };
                        readonly gt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than the given date";
                        };
                        readonly gte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than or equal to the given date";
                        };
                        readonly lt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than the given date";
                        };
                        readonly lte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than or equal to the given date";
                        };
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly endedAt: {
                    readonly type: "object";
                    readonly properties: {
                        readonly isnull: {
                            readonly type: "boolean";
                            readonly description: "Returns null values";
                        };
                        readonly notnull: {
                            readonly type: "boolean";
                            readonly description: "Returns not null values";
                        };
                        readonly gt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than the given date";
                        };
                        readonly gte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than or equal to the given date";
                        };
                        readonly lt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than the given date";
                        };
                        readonly lte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than or equal to the given date";
                        };
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly priceId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly productId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["page", "limit", "count", "hasMore", "data"];
            readonly properties: {
                readonly page: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly description: "Page number. Starts from 1";
                    readonly examples: readonly [1];
                };
                readonly limit: {
                    readonly type: "number";
                    readonly default: 200;
                    readonly description: "Number of items per page";
                    readonly examples: readonly [10];
                };
                readonly count: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly hasMore: {
                    readonly type: "boolean";
                };
                readonly query: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly default: 1;
                            readonly description: "Page number. Starts from 1";
                            readonly examples: readonly [1];
                        };
                        readonly limit: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly maximum: 200;
                            readonly default: 200;
                            readonly description: "Number of items per page";
                            readonly examples: readonly [10];
                        };
                        readonly createdAt: {
                            readonly description: "Filter by created date";
                            readonly type: "object";
                            readonly properties: {
                                readonly isnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns null values";
                                };
                                readonly notnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns not null values";
                                };
                                readonly gt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than the given date";
                                    readonly examples: readonly ["2020-01-01"];
                                };
                                readonly gte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than or equal to the given date";
                                };
                                readonly lt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than the given date";
                                };
                                readonly lte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than or equal to the given date";
                                };
                            };
                        };
                    };
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["id", "currency", "interval", "status", "lineItems"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly organizationId: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                            };
                            readonly tags: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly clientReferenceId: {
                                readonly type: "string";
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                            };
                            readonly collectionMethod: {
                                readonly type: "string";
                                readonly enum: readonly ["superfluid", "charge_automatically", "send_invoice"];
                                readonly description: "`superfluid` `charge_automatically` `send_invoice`";
                            };
                            readonly interval: {
                                readonly type: "string";
                                readonly enum: readonly ["day", "week", "month", "year"];
                                readonly description: "`day` `week` `month` `year`";
                            };
                            readonly intervalCount: {
                                readonly type: "number";
                                readonly examples: readonly [1];
                            };
                            readonly paymentMethodTypes: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                    readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                    readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                                };
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["incomplete", "incomplete_expired", "trialing", "active", "past_due", "canceled", "unpaid", "paused"];
                                readonly description: "`incomplete` `incomplete_expired` `trialing` `active` `past_due` `canceled` `unpaid` `paused`";
                            };
                            readonly description: {
                                readonly type: "string";
                            };
                            readonly metadata: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                            };
                            readonly defaultPaymentMethodId: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                            };
                            readonly defaultPaymentMethod: {
                                readonly type: "object";
                                readonly required: readonly ["id", "assetId", "asset", "type"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly updatedAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                    };
                                    readonly assetId: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                    };
                                    readonly asset: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "name", "chainId", "address", "currency", "symbol", "decimals", "isEIP5827Supported"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                                readonly description: "Asset id";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                                readonly description: "Asset name";
                                            };
                                            readonly chainId: {
                                                readonly type: "number";
                                                readonly description: "Asset chain id";
                                                readonly examples: readonly [1];
                                            };
                                            readonly address: {
                                                readonly type: "string";
                                                readonly description: "Asset address on chain";
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                readonly description: "Asset currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                            };
                                            readonly symbol: {
                                                readonly type: "string";
                                                readonly description: "Asset symbol";
                                            };
                                            readonly decimals: {
                                                readonly type: "number";
                                                readonly description: "Asset decimals in which it is represented on chain";
                                                readonly examples: readonly [1];
                                            };
                                            readonly coingeckoId: {
                                                readonly type: "string";
                                                readonly description: "Asset coingecko id";
                                            };
                                            readonly superToken: {
                                                readonly description: "SuperToken data";
                                                readonly type: "object";
                                                readonly required: readonly ["address", "decimals", "symbol"];
                                                readonly properties: {
                                                    readonly address: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's address";
                                                    };
                                                    readonly decimals: {
                                                        readonly type: "number";
                                                        readonly examples: readonly [1];
                                                    };
                                                    readonly symbol: {
                                                        readonly type: "string";
                                                        readonly description: "SuperToken's symbol";
                                                    };
                                                };
                                            };
                                            readonly isEIP5827Supported: {
                                                readonly type: "boolean";
                                                readonly description: "Is EIP5827 supported";
                                            };
                                        };
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                                        readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                                    };
                                    readonly accountAddress: {
                                        readonly type: "string";
                                    };
                                    readonly billingDetails: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly name: {
                                                readonly type: "string";
                                                readonly description: "The name";
                                            };
                                            readonly email: {
                                                readonly type: "string";
                                                readonly description: "The email";
                                            };
                                            readonly phone: {
                                                readonly type: "string";
                                                readonly description: "The phone";
                                            };
                                            readonly organizationName: {
                                                readonly type: "string";
                                                readonly description: "The organization name";
                                            };
                                            readonly address: {
                                                readonly description: "The address";
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly line1: {
                                                        readonly type: "string";
                                                    };
                                                    readonly line2: {
                                                        readonly type: "string";
                                                    };
                                                    readonly city: {
                                                        readonly type: "string";
                                                    };
                                                    readonly state: {
                                                        readonly type: "string";
                                                    };
                                                    readonly postalCode: {
                                                        readonly type: "string";
                                                    };
                                                    readonly country: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly customerId: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                    };
                                    readonly options: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            };
                            readonly customerId: {
                                readonly type: "string";
                                readonly format: "uuid";
                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                            };
                            readonly customer: {
                                readonly type: "object";
                                readonly required: readonly ["id", "customerNumber"];
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "The name";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                        readonly description: "The email";
                                    };
                                    readonly phone: {
                                        readonly type: "string";
                                        readonly description: "The phone";
                                    };
                                    readonly organizationName: {
                                        readonly type: "string";
                                        readonly description: "The organization name";
                                    };
                                    readonly address: {
                                        readonly description: "The address";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly line1: {
                                                readonly type: "string";
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                            };
                                            readonly city: {
                                                readonly type: "string";
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                            };
                                            readonly postalCode: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly format: "uuid";
                                        readonly description: "Customer's id";
                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                    };
                                    readonly createdAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                        readonly description: "Customer's created at";
                                    };
                                    readonly updatedAt: {
                                        readonly format: "date-time";
                                        readonly type: "string";
                                        readonly description: "Customer's updated at";
                                    };
                                    readonly customerReferenceId: {
                                        readonly type: "string";
                                        readonly description: "Customer's reference id";
                                    };
                                    readonly shipping: {
                                        readonly description: "Customer's shipping address";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly name: {
                                                readonly type: "string";
                                                readonly description: "The name";
                                            };
                                            readonly email: {
                                                readonly type: "string";
                                                readonly description: "The email";
                                            };
                                            readonly phone: {
                                                readonly type: "string";
                                                readonly description: "The phone";
                                            };
                                            readonly organizationName: {
                                                readonly type: "string";
                                                readonly description: "The organization name";
                                            };
                                            readonly address: {
                                                readonly description: "The address";
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly line1: {
                                                        readonly type: "string";
                                                    };
                                                    readonly line2: {
                                                        readonly type: "string";
                                                    };
                                                    readonly city: {
                                                        readonly type: "string";
                                                    };
                                                    readonly state: {
                                                        readonly type: "string";
                                                    };
                                                    readonly postalCode: {
                                                        readonly type: "string";
                                                    };
                                                    readonly country: {
                                                        readonly type: "string";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly taxIds: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly object: {
                                                readonly type: "string";
                                            };
                                            readonly data: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["id", "customerId"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                        };
                                                        readonly createdAt: {
                                                            readonly format: "date-time";
                                                            readonly type: "string";
                                                        };
                                                        readonly updatedAt: {
                                                            readonly format: "date-time";
                                                            readonly type: "string";
                                                        };
                                                        readonly name: {
                                                            readonly type: "string";
                                                        };
                                                        readonly value: {
                                                            readonly type: "string";
                                                        };
                                                        readonly country: {
                                                            readonly type: "string";
                                                        };
                                                        readonly customerId: {
                                                            readonly type: "string";
                                                            readonly format: "uuid";
                                                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly visibility: {
                                        readonly description: "Customer's visibility. If Dashboard then displayed on dashboard UI. If API then only returned in API response only.\n\n`10` `20`";
                                        readonly type: "string";
                                        readonly enum: readonly [10, 20];
                                    };
                                    readonly metadata: {
                                        readonly type: "object";
                                        readonly description: "Customer's metadata";
                                        readonly additionalProperties: true;
                                    };
                                    readonly customerNumber: {
                                        readonly type: "string";
                                        readonly description: "Customer number assigned by the system";
                                    };
                                };
                            };
                            readonly startDate: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly endedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly cancelAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly canceledAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly lineItems: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly object: {
                                        readonly type: "string";
                                    };
                                    readonly data: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly required: readonly ["price"];
                                            readonly properties: {
                                                readonly description: {
                                                    readonly type: "string";
                                                };
                                                readonly quantity: {
                                                    readonly type: "number";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly price: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["id", "currency", "productId", "type", "product"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly type: "string";
                                                        };
                                                        readonly createdAt: {
                                                            readonly format: "date-time";
                                                            readonly type: "string";
                                                        };
                                                        readonly updatedAt: {
                                                            readonly format: "date-time";
                                                            readonly type: "string";
                                                        };
                                                        readonly billingScheme: {
                                                            readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                                                            readonly type: "string";
                                                            readonly enum: readonly ["per_unit"];
                                                        };
                                                        readonly currency: {
                                                            readonly type: "string";
                                                            readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                                            readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                                        };
                                                        readonly productId: {
                                                            readonly type: "string";
                                                            readonly format: "uuid";
                                                            readonly description: "Product's id";
                                                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                        };
                                                        readonly interval: {
                                                            readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                                                            readonly type: "string";
                                                            readonly enum: readonly ["day", "week", "month", "year"];
                                                        };
                                                        readonly intervalCount: {
                                                            readonly type: "number";
                                                            readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                                                            readonly examples: readonly [1];
                                                        };
                                                        readonly isActive: {
                                                            readonly type: "boolean";
                                                            readonly description: "Whether the price is currently active";
                                                        };
                                                        readonly usageType: {
                                                            readonly description: "The usage type of the price.\n\n`licensed`";
                                                            readonly type: "string";
                                                            readonly enum: readonly ["licensed"];
                                                        };
                                                        readonly type: {
                                                            readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                                                            readonly type: "string";
                                                            readonly enum: readonly ["one_time", "recurring", "streaming"];
                                                        };
                                                        readonly unitAmount: {
                                                            readonly format: "int64";
                                                            readonly type: "integer";
                                                            readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                                                            readonly examples: readonly ["9223372036854775807"];
                                                            readonly minimum: -9223372036854776000;
                                                            readonly maximum: 9223372036854776000;
                                                        };
                                                        readonly unitAmountDecimal: {
                                                            readonly type: "string";
                                                        };
                                                        readonly customUnitMax: {
                                                            readonly format: "int64";
                                                            readonly type: "integer";
                                                            readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                            readonly examples: readonly ["9223372036854775807"];
                                                            readonly minimum: -9223372036854776000;
                                                            readonly maximum: 9223372036854776000;
                                                        };
                                                        readonly customUnitMin: {
                                                            readonly format: "int64";
                                                            readonly type: "integer";
                                                            readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                            readonly examples: readonly ["9223372036854775807"];
                                                            readonly minimum: -9223372036854776000;
                                                            readonly maximum: 9223372036854776000;
                                                        };
                                                        readonly customPreset: {
                                                            readonly format: "int64";
                                                            readonly type: "integer";
                                                            readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                                                            readonly examples: readonly ["9223372036854775807"];
                                                            readonly minimum: -9223372036854776000;
                                                            readonly maximum: 9223372036854776000;
                                                        };
                                                        readonly customUnitAmountSuggestions: {
                                                            readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                                                            readonly type: "array";
                                                            readonly items: {
                                                                readonly type: "string";
                                                            };
                                                        };
                                                        readonly product: {
                                                            readonly description: "The product this price belongs to";
                                                            readonly type: "object";
                                                            readonly required: readonly ["id", "name"];
                                                            readonly properties: {
                                                                readonly id: {
                                                                    readonly type: "string";
                                                                };
                                                                readonly createdAt: {
                                                                    readonly format: "date-time";
                                                                    readonly type: "string";
                                                                };
                                                                readonly updatedAt: {
                                                                    readonly format: "date-time";
                                                                    readonly type: "string";
                                                                };
                                                                readonly name: {
                                                                    readonly type: "string";
                                                                    readonly description: "The name of the product. Displayed on the checkout page";
                                                                };
                                                                readonly description: {
                                                                    readonly type: "string";
                                                                    readonly description: "The description of the product. Displayed on the checkout page";
                                                                };
                                                                readonly isActive: {
                                                                    readonly type: "boolean";
                                                                    readonly description: "Whether the product is currently active";
                                                                };
                                                                readonly images: {
                                                                    readonly maxItems: 8;
                                                                    readonly description: "The url of product images. Displayed on the checkout page";
                                                                    readonly type: "array";
                                                                    readonly items: {
                                                                        readonly type: "string";
                                                                    };
                                                                };
                                                                readonly publicImages: {
                                                                    readonly description: "Product images with absolute public url";
                                                                    readonly type: "array";
                                                                    readonly items: {
                                                                        readonly type: "string";
                                                                    };
                                                                };
                                                                readonly unitLabel: {
                                                                    readonly type: "string";
                                                                    readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                                                };
                                                                readonly url: {
                                                                    readonly type: "string";
                                                                    readonly description: "The url of the product";
                                                                };
                                                                readonly defaultPriceId: {
                                                                    readonly type: "string";
                                                                    readonly format: "uuid";
                                                                    readonly description: "Product's default price id";
                                                                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                                };
                                                                readonly metadata: {
                                                                    readonly type: "object";
                                                                    readonly description: "The metadata of the product";
                                                                    readonly additionalProperties: true;
                                                                };
                                                                readonly visibility: {
                                                                    readonly description: "The visibility of the product\n\n`10` `20`";
                                                                    readonly type: "string";
                                                                    readonly enum: readonly [10, 20];
                                                                };
                                                            };
                                                        };
                                                        readonly metadata: {
                                                            readonly type: "object";
                                                            readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                                            readonly additionalProperties: true;
                                                        };
                                                        readonly visibility: {
                                                            readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                                                            readonly type: "string";
                                                            readonly enum: readonly [10, 20];
                                                        };
                                                    };
                                                };
                                                readonly taxRates: {
                                                    readonly type: "array";
                                                    readonly items: {
                                                        readonly type: "object";
                                                        readonly required: readonly ["id", "name", "percentage", "type", "isDefault"];
                                                        readonly properties: {
                                                            readonly id: {
                                                                readonly type: "string";
                                                            };
                                                            readonly name: {
                                                                readonly type: "string";
                                                                readonly description: "The name of the tax rate.";
                                                            };
                                                            readonly description: {
                                                                readonly type: "string";
                                                                readonly description: "The description of the tax rate.";
                                                            };
                                                            readonly country: {
                                                                readonly type: "string";
                                                                readonly description: "The country of the tax rate.";
                                                            };
                                                            readonly percentage: {
                                                                readonly type: "number";
                                                                readonly minimum: 0;
                                                                readonly maximum: 100;
                                                                readonly description: "Percent that will be added to subtotal as a tax.";
                                                                readonly examples: readonly [1];
                                                            };
                                                            readonly type: {
                                                                readonly description: "The type of the tax rate.\n\n`exclusive` `inclusive`";
                                                                readonly type: "string";
                                                                readonly enum: readonly ["exclusive", "inclusive"];
                                                            };
                                                            readonly isDefault: {
                                                                readonly type: "boolean";
                                                            };
                                                        };
                                                    };
                                                };
                                                readonly amountTotal: {
                                                    readonly format: "int64";
                                                    readonly type: "integer";
                                                    readonly examples: readonly ["9223372036854775807"];
                                                    readonly minimum: -9223372036854776000;
                                                    readonly maximum: 9223372036854776000;
                                                };
                                                readonly amountSubtotal: {
                                                    readonly format: "int64";
                                                    readonly type: "integer";
                                                    readonly examples: readonly ["9223372036854775807"];
                                                    readonly minimum: -9223372036854776000;
                                                    readonly maximum: 9223372036854776000;
                                                };
                                                readonly amountTax: {
                                                    readonly format: "int64";
                                                    readonly type: "integer";
                                                    readonly examples: readonly ["9223372036854775807"];
                                                    readonly minimum: -9223372036854776000;
                                                    readonly maximum: 9223372036854776000;
                                                };
                                                readonly currency: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                    readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            readonly cancellationReason: {
                                readonly type: "string";
                            };
                            readonly currentPeriodEnd: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly currentPeriodStart: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly cancelAtPeriodEnd: {
                                readonly type: "boolean";
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const SubscriptionControllerGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly tags: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly clientReferenceId: {
                    readonly type: "string";
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly collectionMethod: {
                    readonly type: "string";
                    readonly enum: readonly ["superfluid", "charge_automatically", "send_invoice"];
                    readonly description: "`superfluid` `charge_automatically` `send_invoice`";
                };
                readonly interval: {
                    readonly type: "string";
                    readonly enum: readonly ["day", "week", "month", "year"];
                    readonly description: "`day` `week` `month` `year`";
                };
                readonly intervalCount: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly paymentMethodTypes: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                        readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                    };
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["incomplete", "incomplete_expired", "trialing", "active", "past_due", "canceled", "unpaid", "paused"];
                    readonly description: "`incomplete` `incomplete_expired` `trialing` `active` `past_due` `canceled` `unpaid` `paused`";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly defaultPaymentMethodId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly defaultPaymentMethod: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly assetId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly asset: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "Asset id";
                                };
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "Asset name";
                                };
                                readonly chainId: {
                                    readonly type: "number";
                                    readonly description: "Asset chain id";
                                    readonly examples: readonly [1];
                                };
                                readonly address: {
                                    readonly type: "string";
                                    readonly description: "Asset address on chain";
                                };
                                readonly currency: {
                                    readonly type: "string";
                                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                    readonly description: "Asset currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                };
                                readonly symbol: {
                                    readonly type: "string";
                                    readonly description: "Asset symbol";
                                };
                                readonly decimals: {
                                    readonly type: "number";
                                    readonly description: "Asset decimals in which it is represented on chain";
                                    readonly examples: readonly [1];
                                };
                                readonly coingeckoId: {
                                    readonly type: "string";
                                    readonly description: "Asset coingecko id";
                                };
                                readonly superToken: {
                                    readonly description: "SuperToken data";
                                    readonly type: "object";
                                    readonly required: readonly ["address", "decimals", "symbol"];
                                    readonly properties: {
                                        readonly address: {
                                            readonly type: "string";
                                            readonly description: "SuperToken's address";
                                        };
                                        readonly decimals: {
                                            readonly type: "number";
                                            readonly examples: readonly [1];
                                        };
                                        readonly symbol: {
                                            readonly type: "string";
                                            readonly description: "SuperToken's symbol";
                                        };
                                    };
                                };
                                readonly isEIP5827Supported: {
                                    readonly type: "boolean";
                                    readonly description: "Is EIP5827 supported";
                                };
                            };
                            readonly required: readonly ["id", "name", "chainId", "address", "currency", "symbol", "decimals", "isEIP5827Supported"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                            readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                        };
                        readonly accountAddress: {
                            readonly type: "string";
                        };
                        readonly billingDetails: {
                            readonly type: "object";
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name";
                                };
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The email";
                                };
                                readonly phone: {
                                    readonly type: "string";
                                    readonly description: "The phone";
                                };
                                readonly organizationName: {
                                    readonly type: "string";
                                    readonly description: "The organization name";
                                };
                                readonly address: {
                                    readonly description: "The address";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly line1: {
                                            readonly type: "string";
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                        };
                                        readonly postalCode: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly customerId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly options: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                    };
                    readonly required: readonly ["id", "assetId", "asset", "type"];
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly customer: {
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Customer's id";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's created at";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's updated at";
                        };
                        readonly customerReferenceId: {
                            readonly type: "string";
                            readonly description: "Customer's reference id";
                        };
                        readonly shipping: {
                            readonly description: "Customer's shipping address";
                            readonly type: "object";
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name";
                                };
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The email";
                                };
                                readonly phone: {
                                    readonly type: "string";
                                    readonly description: "The phone";
                                };
                                readonly organizationName: {
                                    readonly type: "string";
                                    readonly description: "The organization name";
                                };
                                readonly address: {
                                    readonly description: "The address";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly line1: {
                                            readonly type: "string";
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                        };
                                        readonly postalCode: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly taxIds: {
                            readonly type: "object";
                            readonly properties: {
                                readonly object: {
                                    readonly type: "string";
                                };
                                readonly data: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                            readonly customerId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                        };
                                        readonly required: readonly ["id", "customerId"];
                                    };
                                };
                            };
                        };
                        readonly visibility: {
                            readonly description: "Customer's visibility. If Dashboard then displayed on dashboard UI. If API then only returned in API response only.\n\n`10` `20`";
                            readonly type: "string";
                            readonly enum: readonly [10, 20];
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "Customer's metadata";
                            readonly additionalProperties: true;
                        };
                        readonly customerNumber: {
                            readonly type: "string";
                            readonly description: "Customer number assigned by the system";
                        };
                    };
                    readonly required: readonly ["id", "customerNumber"];
                };
                readonly startDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly endedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly cancelAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly canceledAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly lineItems: {
                    readonly type: "object";
                    readonly properties: {
                        readonly object: {
                            readonly type: "string";
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly description: {
                                        readonly type: "string";
                                    };
                                    readonly quantity: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly price: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly billingScheme: {
                                                readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                                                readonly type: "string";
                                                readonly enum: readonly ["per_unit"];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                                readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                            };
                                            readonly productId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "Product's id";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                            readonly interval: {
                                                readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                                                readonly type: "string";
                                                readonly enum: readonly ["day", "week", "month", "year"];
                                            };
                                            readonly intervalCount: {
                                                readonly type: "number";
                                                readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                                                readonly examples: readonly [1];
                                            };
                                            readonly isActive: {
                                                readonly type: "boolean";
                                                readonly description: "Whether the price is currently active";
                                            };
                                            readonly usageType: {
                                                readonly description: "The usage type of the price.\n\n`licensed`";
                                                readonly type: "string";
                                                readonly enum: readonly ["licensed"];
                                            };
                                            readonly type: {
                                                readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                                                readonly type: "string";
                                                readonly enum: readonly ["one_time", "recurring", "streaming"];
                                            };
                                            readonly unitAmount: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly unitAmountDecimal: {
                                                readonly type: "string";
                                            };
                                            readonly customUnitMax: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitMin: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customPreset: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitAmountSuggestions: {
                                                readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                            readonly product: {
                                                readonly description: "The product this price belongs to";
                                                readonly type: "object";
                                                readonly required: readonly ["id", "name"];
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                    };
                                                    readonly createdAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly updatedAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the product. Displayed on the checkout page";
                                                    };
                                                    readonly description: {
                                                        readonly type: "string";
                                                        readonly description: "The description of the product. Displayed on the checkout page";
                                                    };
                                                    readonly isActive: {
                                                        readonly type: "boolean";
                                                        readonly description: "Whether the product is currently active";
                                                    };
                                                    readonly images: {
                                                        readonly maxItems: 8;
                                                        readonly description: "The url of product images. Displayed on the checkout page";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly publicImages: {
                                                        readonly description: "Product images with absolute public url";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly unitLabel: {
                                                        readonly type: "string";
                                                        readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                                    };
                                                    readonly url: {
                                                        readonly type: "string";
                                                        readonly description: "The url of the product";
                                                    };
                                                    readonly defaultPriceId: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Product's default price id";
                                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                    };
                                                    readonly metadata: {
                                                        readonly type: "object";
                                                        readonly description: "The metadata of the product";
                                                        readonly additionalProperties: true;
                                                    };
                                                    readonly visibility: {
                                                        readonly description: "The visibility of the product\n\n`10` `20`";
                                                        readonly type: "string";
                                                        readonly enum: readonly [10, 20];
                                                    };
                                                };
                                            };
                                            readonly metadata: {
                                                readonly type: "object";
                                                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                                readonly additionalProperties: true;
                                            };
                                            readonly visibility: {
                                                readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                                                readonly type: "string";
                                                readonly enum: readonly [10, 20];
                                            };
                                        };
                                        readonly required: readonly ["id", "currency", "productId", "type", "product"];
                                    };
                                    readonly taxRates: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the tax rate.";
                                                };
                                                readonly description: {
                                                    readonly type: "string";
                                                    readonly description: "The description of the tax rate.";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                    readonly description: "The country of the tax rate.";
                                                };
                                                readonly percentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly description: "Percent that will be added to subtotal as a tax.";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly type: {
                                                    readonly description: "The type of the tax rate.\n\n`exclusive` `inclusive`";
                                                    readonly type: "string";
                                                    readonly enum: readonly ["exclusive", "inclusive"];
                                                };
                                                readonly isDefault: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                            readonly required: readonly ["id", "name", "percentage", "type", "isDefault"];
                                        };
                                    };
                                    readonly amountTotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountSubtotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountTax: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                };
                                readonly required: readonly ["price"];
                            };
                        };
                    };
                };
                readonly cancellationReason: {
                    readonly type: "string";
                };
                readonly currentPeriodEnd: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly currentPeriodStart: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly cancelAtPeriodEnd: {
                    readonly type: "boolean";
                };
            };
            readonly required: readonly ["id", "currency", "interval", "status", "lineItems"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const SubscriptionControllerResume: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly organizationId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly tags: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly clientReferenceId: {
                    readonly type: "string";
                };
                readonly currency: {
                    readonly type: "string";
                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                    readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                };
                readonly collectionMethod: {
                    readonly type: "string";
                    readonly enum: readonly ["superfluid", "charge_automatically", "send_invoice"];
                    readonly description: "`superfluid` `charge_automatically` `send_invoice`";
                };
                readonly interval: {
                    readonly type: "string";
                    readonly enum: readonly ["day", "week", "month", "year"];
                    readonly description: "`day` `week` `month` `year`";
                };
                readonly intervalCount: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly paymentMethodTypes: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                        readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                    };
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["incomplete", "incomplete_expired", "trialing", "active", "past_due", "canceled", "unpaid", "paused"];
                    readonly description: "`incomplete` `incomplete_expired` `trialing` `active` `past_due` `canceled` `unpaid` `paused`";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly defaultPaymentMethodId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly defaultPaymentMethod: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                        };
                        readonly assetId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly asset: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "Asset id";
                                };
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "Asset name";
                                };
                                readonly chainId: {
                                    readonly type: "number";
                                    readonly description: "Asset chain id";
                                    readonly examples: readonly [1];
                                };
                                readonly address: {
                                    readonly type: "string";
                                    readonly description: "Asset address on chain";
                                };
                                readonly currency: {
                                    readonly type: "string";
                                    readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                    readonly description: "Asset currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                };
                                readonly symbol: {
                                    readonly type: "string";
                                    readonly description: "Asset symbol";
                                };
                                readonly decimals: {
                                    readonly type: "number";
                                    readonly description: "Asset decimals in which it is represented on chain";
                                    readonly examples: readonly [1];
                                };
                                readonly coingeckoId: {
                                    readonly type: "string";
                                    readonly description: "Asset coingecko id";
                                };
                                readonly superToken: {
                                    readonly description: "SuperToken data";
                                    readonly type: "object";
                                    readonly required: readonly ["address", "decimals", "symbol"];
                                    readonly properties: {
                                        readonly address: {
                                            readonly type: "string";
                                            readonly description: "SuperToken's address";
                                        };
                                        readonly decimals: {
                                            readonly type: "number";
                                            readonly examples: readonly [1];
                                        };
                                        readonly symbol: {
                                            readonly type: "string";
                                            readonly description: "SuperToken's symbol";
                                        };
                                    };
                                };
                                readonly isEIP5827Supported: {
                                    readonly type: "boolean";
                                    readonly description: "Is EIP5827 supported";
                                };
                            };
                            readonly required: readonly ["id", "name", "chainId", "address", "currency", "symbol", "decimals", "isEIP5827Supported"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["superfluid", "wallet", "allowance_based_recurring", "stripe", "binance_pay"];
                            readonly description: "`superfluid` `wallet` `allowance_based_recurring` `stripe` `binance_pay`";
                        };
                        readonly accountAddress: {
                            readonly type: "string";
                        };
                        readonly billingDetails: {
                            readonly type: "object";
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name";
                                };
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The email";
                                };
                                readonly phone: {
                                    readonly type: "string";
                                    readonly description: "The phone";
                                };
                                readonly organizationName: {
                                    readonly type: "string";
                                    readonly description: "The organization name";
                                };
                                readonly address: {
                                    readonly description: "The address";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly line1: {
                                            readonly type: "string";
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                        };
                                        readonly postalCode: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly customerId: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly options: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                    };
                    readonly required: readonly ["id", "assetId", "asset", "type"];
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly format: "uuid";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                };
                readonly customer: {
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The name";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The email";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "The phone";
                        };
                        readonly organizationName: {
                            readonly type: "string";
                            readonly description: "The organization name";
                        };
                        readonly address: {
                            readonly description: "The address";
                            readonly type: "object";
                            readonly properties: {
                                readonly line1: {
                                    readonly type: "string";
                                };
                                readonly line2: {
                                    readonly type: "string";
                                };
                                readonly city: {
                                    readonly type: "string";
                                };
                                readonly state: {
                                    readonly type: "string";
                                };
                                readonly postalCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly id: {
                            readonly type: "string";
                            readonly format: "uuid";
                            readonly description: "Customer's id";
                            readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                        };
                        readonly createdAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's created at";
                        };
                        readonly updatedAt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Customer's updated at";
                        };
                        readonly customerReferenceId: {
                            readonly type: "string";
                            readonly description: "Customer's reference id";
                        };
                        readonly shipping: {
                            readonly description: "Customer's shipping address";
                            readonly type: "object";
                            readonly properties: {
                                readonly name: {
                                    readonly type: "string";
                                    readonly description: "The name";
                                };
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The email";
                                };
                                readonly phone: {
                                    readonly type: "string";
                                    readonly description: "The phone";
                                };
                                readonly organizationName: {
                                    readonly type: "string";
                                    readonly description: "The organization name";
                                };
                                readonly address: {
                                    readonly description: "The address";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly line1: {
                                            readonly type: "string";
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                        };
                                        readonly city: {
                                            readonly type: "string";
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                        };
                                        readonly postalCode: {
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                        readonly taxIds: {
                            readonly type: "object";
                            readonly properties: {
                                readonly object: {
                                    readonly type: "string";
                                };
                                readonly data: {
                                    readonly type: "array";
                                    readonly items: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                            };
                                            readonly value: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                            readonly customerId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                        };
                                        readonly required: readonly ["id", "customerId"];
                                    };
                                };
                            };
                        };
                        readonly visibility: {
                            readonly description: "Customer's visibility. If Dashboard then displayed on dashboard UI. If API then only returned in API response only.\n\n`10` `20`";
                            readonly type: "string";
                            readonly enum: readonly [10, 20];
                        };
                        readonly metadata: {
                            readonly type: "object";
                            readonly description: "Customer's metadata";
                            readonly additionalProperties: true;
                        };
                        readonly customerNumber: {
                            readonly type: "string";
                            readonly description: "Customer number assigned by the system";
                        };
                    };
                    readonly required: readonly ["id", "customerNumber"];
                };
                readonly startDate: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly endedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly cancelAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly canceledAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly lineItems: {
                    readonly type: "object";
                    readonly properties: {
                        readonly object: {
                            readonly type: "string";
                        };
                        readonly data: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly description: {
                                        readonly type: "string";
                                    };
                                    readonly quantity: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly price: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "string";
                                            };
                                            readonly createdAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly updatedAt: {
                                                readonly format: "date-time";
                                                readonly type: "string";
                                            };
                                            readonly billingScheme: {
                                                readonly description: "The billing scheme to use for this price\n\n`per_unit`";
                                                readonly type: "string";
                                                readonly enum: readonly ["per_unit"];
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu"];
                                                readonly description: "The currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu`";
                                            };
                                            readonly productId: {
                                                readonly type: "string";
                                                readonly format: "uuid";
                                                readonly description: "Product's id";
                                                readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                            };
                                            readonly interval: {
                                                readonly description: "The interval at which to bill for this price. Only required for subscriptions\n\n`day` `week` `month` `year`";
                                                readonly type: "string";
                                                readonly enum: readonly ["day", "week", "month", "year"];
                                            };
                                            readonly intervalCount: {
                                                readonly type: "number";
                                                readonly description: "It is used to determine the frequency at which the subscription is billed. Only required for subscriptions";
                                                readonly examples: readonly [1];
                                            };
                                            readonly isActive: {
                                                readonly type: "boolean";
                                                readonly description: "Whether the price is currently active";
                                            };
                                            readonly usageType: {
                                                readonly description: "The usage type of the price.\n\n`licensed`";
                                                readonly type: "string";
                                                readonly enum: readonly ["licensed"];
                                            };
                                            readonly type: {
                                                readonly description: "The type of the price\n\n`one_time` `recurring` `streaming`";
                                                readonly type: "string";
                                                readonly enum: readonly ["one_time", "recurring", "streaming"];
                                            };
                                            readonly unitAmount: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The unit amount in 8 decimals, represented as a whole integer. If not provided, the unit amount will be calculated from unit_amount_decimal.";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly unitAmountDecimal: {
                                                readonly type: "string";
                                            };
                                            readonly customUnitMax: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The maximum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitMin: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The minimum amount that can be billed per unit for this price. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customPreset: {
                                                readonly format: "int64";
                                                readonly type: "integer";
                                                readonly description: "The default amount to fill in the amount field for this price on checkout. Only if unit amount is not provided";
                                                readonly examples: readonly ["9223372036854775807"];
                                                readonly minimum: -9223372036854776000;
                                                readonly maximum: 9223372036854776000;
                                            };
                                            readonly customUnitAmountSuggestions: {
                                                readonly description: "Amount suggestions for this price. Only if unit amount is not provided";
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                            };
                                            readonly product: {
                                                readonly description: "The product this price belongs to";
                                                readonly type: "object";
                                                readonly required: readonly ["id", "name"];
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly type: "string";
                                                    };
                                                    readonly createdAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly updatedAt: {
                                                        readonly format: "date-time";
                                                        readonly type: "string";
                                                    };
                                                    readonly name: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the product. Displayed on the checkout page";
                                                    };
                                                    readonly description: {
                                                        readonly type: "string";
                                                        readonly description: "The description of the product. Displayed on the checkout page";
                                                    };
                                                    readonly isActive: {
                                                        readonly type: "boolean";
                                                        readonly description: "Whether the product is currently active";
                                                    };
                                                    readonly images: {
                                                        readonly maxItems: 8;
                                                        readonly description: "The url of product images. Displayed on the checkout page";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly publicImages: {
                                                        readonly description: "Product images with absolute public url";
                                                        readonly type: "array";
                                                        readonly items: {
                                                            readonly type: "string";
                                                        };
                                                    };
                                                    readonly unitLabel: {
                                                        readonly type: "string";
                                                        readonly description: "The label of the unit of the product. Displayed on the checkout page";
                                                    };
                                                    readonly url: {
                                                        readonly type: "string";
                                                        readonly description: "The url of the product";
                                                    };
                                                    readonly defaultPriceId: {
                                                        readonly type: "string";
                                                        readonly format: "uuid";
                                                        readonly description: "Product's default price id";
                                                        readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0"];
                                                    };
                                                    readonly metadata: {
                                                        readonly type: "object";
                                                        readonly description: "The metadata of the product";
                                                        readonly additionalProperties: true;
                                                    };
                                                    readonly visibility: {
                                                        readonly description: "The visibility of the product\n\n`10` `20`";
                                                        readonly type: "string";
                                                        readonly enum: readonly [10, 20];
                                                    };
                                                };
                                            };
                                            readonly metadata: {
                                                readonly type: "object";
                                                readonly description: "A set of key-value pairs that you can attach to an object. It can be useful for storing additional information about the object in a structured format.";
                                                readonly additionalProperties: true;
                                            };
                                            readonly visibility: {
                                                readonly description: "The visibility of the price. If dashboard, the price is visible in the dashboard\n\n`10` `20`";
                                                readonly type: "string";
                                                readonly enum: readonly [10, 20];
                                            };
                                        };
                                        readonly required: readonly ["id", "currency", "productId", "type", "product"];
                                    };
                                    readonly taxRates: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly type: "string";
                                                };
                                                readonly name: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the tax rate.";
                                                };
                                                readonly description: {
                                                    readonly type: "string";
                                                    readonly description: "The description of the tax rate.";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                    readonly description: "The country of the tax rate.";
                                                };
                                                readonly percentage: {
                                                    readonly type: "number";
                                                    readonly minimum: 0;
                                                    readonly maximum: 100;
                                                    readonly description: "Percent that will be added to subtotal as a tax.";
                                                    readonly examples: readonly [1];
                                                };
                                                readonly type: {
                                                    readonly description: "The type of the tax rate.\n\n`exclusive` `inclusive`";
                                                    readonly type: "string";
                                                    readonly enum: readonly ["exclusive", "inclusive"];
                                                };
                                                readonly isDefault: {
                                                    readonly type: "boolean";
                                                };
                                            };
                                            readonly required: readonly ["id", "name", "percentage", "type", "isDefault"];
                                        };
                                    };
                                    readonly amountTotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountSubtotal: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly amountTax: {
                                        readonly format: "int64";
                                        readonly type: "integer";
                                        readonly examples: readonly ["9223372036854775807"];
                                        readonly minimum: -9223372036854776000;
                                        readonly maximum: 9223372036854776000;
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                };
                                readonly required: readonly ["price"];
                            };
                        };
                    };
                };
                readonly cancellationReason: {
                    readonly type: "string";
                };
                readonly currentPeriodEnd: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly currentPeriodStart: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly cancelAtPeriodEnd: {
                    readonly type: "boolean";
                };
            };
            readonly required: readonly ["id", "currency", "interval", "status", "lineItems"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const TaxRateControllerActivate: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "The name of the tax rate.";
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "The description of the tax rate.";
                };
                readonly country: {
                    readonly type: "string";
                    readonly description: "The country of the tax rate.";
                };
                readonly percentage: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly maximum: 100;
                    readonly description: "Percent that will be added to subtotal as a tax.";
                    readonly examples: readonly [1];
                };
                readonly type: {
                    readonly description: "The type of the tax rate.\n\n`exclusive` `inclusive`";
                    readonly type: "string";
                    readonly enum: readonly ["exclusive", "inclusive"];
                };
                readonly isActive: {
                    readonly type: "boolean";
                    readonly description: "Whether the tax rate is currently active";
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly description: "The metadata of the tax rate";
                    readonly additionalProperties: true;
                };
            };
            readonly required: readonly ["id", "name", "percentage", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const TaxRateControllerCreate: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "The name of the tax rate.";
            };
            readonly description: {
                readonly type: "string";
                readonly description: "The description of the tax rate.";
            };
            readonly country: {
                readonly type: "string";
                readonly description: "The country of the tax rate.";
            };
            readonly percentage: {
                readonly type: "number";
                readonly minimum: 0;
                readonly maximum: 100;
                readonly description: "Percent that will be added to subtotal as a tax.";
                readonly examples: readonly [1];
            };
            readonly isActive: {
                readonly type: "boolean";
                readonly description: "Whether the tax rate is currently active";
            };
            readonly metadata: {
                readonly type: "object";
                readonly description: "The metadata of the tax rate";
                readonly additionalProperties: true;
            };
        };
        readonly required: readonly ["name", "percentage"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "The name of the tax rate.";
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "The description of the tax rate.";
                };
                readonly country: {
                    readonly type: "string";
                    readonly description: "The country of the tax rate.";
                };
                readonly percentage: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly maximum: 100;
                    readonly description: "Percent that will be added to subtotal as a tax.";
                    readonly examples: readonly [1];
                };
                readonly type: {
                    readonly description: "The type of the tax rate.\n\n`exclusive` `inclusive`";
                    readonly type: "string";
                    readonly enum: readonly ["exclusive", "inclusive"];
                };
                readonly isActive: {
                    readonly type: "boolean";
                    readonly description: "Whether the tax rate is currently active";
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly description: "The metadata of the tax rate";
                    readonly additionalProperties: true;
                };
            };
            readonly required: readonly ["id", "name", "percentage", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const TaxRateControllerDeactivate: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "The name of the tax rate.";
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "The description of the tax rate.";
                };
                readonly country: {
                    readonly type: "string";
                    readonly description: "The country of the tax rate.";
                };
                readonly percentage: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly maximum: 100;
                    readonly description: "Percent that will be added to subtotal as a tax.";
                    readonly examples: readonly [1];
                };
                readonly type: {
                    readonly description: "The type of the tax rate.\n\n`exclusive` `inclusive`";
                    readonly type: "string";
                    readonly enum: readonly ["exclusive", "inclusive"];
                };
                readonly isActive: {
                    readonly type: "boolean";
                    readonly description: "Whether the tax rate is currently active";
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly description: "The metadata of the tax rate";
                    readonly additionalProperties: true;
                };
            };
            readonly required: readonly ["id", "name", "percentage", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const TaxRateControllerFindAll: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number. Starts from 1";
                };
                readonly limit: {
                    readonly type: "number";
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of items per page";
                };
                readonly createdAt: {
                    readonly type: "object";
                    readonly properties: {
                        readonly isnull: {
                            readonly type: "boolean";
                            readonly description: "Returns null values";
                        };
                        readonly notnull: {
                            readonly type: "boolean";
                            readonly description: "Returns not null values";
                        };
                        readonly gt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than the given date";
                            readonly examples: readonly ["2020-01-01"];
                        };
                        readonly gte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than or equal to the given date";
                        };
                        readonly lt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than the given date";
                        };
                        readonly lte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than or equal to the given date";
                        };
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by created date";
                };
                readonly ids: {
                    readonly type: "string";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0", "c3611c05-df51-4b47-b601-f2eac02f4ef2"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by id. Returns items with given ids";
                };
                readonly isActive: {
                    readonly type: "boolean";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "If true, only active tax rates will be returned";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["page", "limit", "count", "hasMore", "data"];
            readonly properties: {
                readonly page: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly description: "Page number. Starts from 1";
                    readonly examples: readonly [1];
                };
                readonly limit: {
                    readonly type: "number";
                    readonly default: 200;
                    readonly description: "Number of items per page";
                    readonly examples: readonly [10];
                };
                readonly count: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly hasMore: {
                    readonly type: "boolean";
                };
                readonly query: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly default: 1;
                            readonly description: "Page number. Starts from 1";
                            readonly examples: readonly [1];
                        };
                        readonly limit: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly maximum: 200;
                            readonly default: 200;
                            readonly description: "Number of items per page";
                            readonly examples: readonly [10];
                        };
                        readonly createdAt: {
                            readonly description: "Filter by created date";
                            readonly type: "object";
                            readonly properties: {
                                readonly isnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns null values";
                                };
                                readonly notnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns not null values";
                                };
                                readonly gt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than the given date";
                                    readonly examples: readonly ["2020-01-01"];
                                };
                                readonly gte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than or equal to the given date";
                                };
                                readonly lt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than the given date";
                                };
                                readonly lte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than or equal to the given date";
                                };
                            };
                        };
                    };
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["id", "name", "percentage", "type"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "The name of the tax rate.";
                            };
                            readonly description: {
                                readonly type: "string";
                                readonly description: "The description of the tax rate.";
                            };
                            readonly country: {
                                readonly type: "string";
                                readonly description: "The country of the tax rate.";
                            };
                            readonly percentage: {
                                readonly type: "number";
                                readonly minimum: 0;
                                readonly maximum: 100;
                                readonly description: "Percent that will be added to subtotal as a tax.";
                                readonly examples: readonly [1];
                            };
                            readonly type: {
                                readonly description: "The type of the tax rate.\n\n`exclusive` `inclusive`";
                                readonly type: "string";
                                readonly enum: readonly ["exclusive", "inclusive"];
                            };
                            readonly isActive: {
                                readonly type: "boolean";
                                readonly description: "Whether the tax rate is currently active";
                            };
                            readonly metadata: {
                                readonly type: "object";
                                readonly description: "The metadata of the tax rate";
                                readonly additionalProperties: true;
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const TaxRateControllerGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "The name of the tax rate.";
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "The description of the tax rate.";
                };
                readonly country: {
                    readonly type: "string";
                    readonly description: "The country of the tax rate.";
                };
                readonly percentage: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly maximum: 100;
                    readonly description: "Percent that will be added to subtotal as a tax.";
                    readonly examples: readonly [1];
                };
                readonly type: {
                    readonly description: "The type of the tax rate.\n\n`exclusive` `inclusive`";
                    readonly type: "string";
                    readonly enum: readonly ["exclusive", "inclusive"];
                };
                readonly isActive: {
                    readonly type: "boolean";
                    readonly description: "Whether the tax rate is currently active";
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly description: "The metadata of the tax rate";
                    readonly additionalProperties: true;
                };
            };
            readonly required: readonly ["id", "name", "percentage", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const TaxRateControllerUpdate: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "The name of the tax rate.";
            };
            readonly description: {
                readonly type: "string";
                readonly description: "The description of the tax rate.";
            };
            readonly country: {
                readonly type: "string";
                readonly description: "The country of the tax rate.";
            };
            readonly isActive: {
                readonly type: "boolean";
                readonly description: "Whether the tax rate is currently active";
            };
            readonly metadata: {
                readonly type: "object";
                readonly description: "The metadata of the tax rate";
                readonly additionalProperties: true;
            };
        };
        readonly required: readonly ["name"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "The name of the tax rate.";
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "The description of the tax rate.";
                };
                readonly country: {
                    readonly type: "string";
                    readonly description: "The country of the tax rate.";
                };
                readonly percentage: {
                    readonly type: "number";
                    readonly minimum: 0;
                    readonly maximum: 100;
                    readonly description: "Percent that will be added to subtotal as a tax.";
                    readonly examples: readonly [1];
                };
                readonly type: {
                    readonly description: "The type of the tax rate.\n\n`exclusive` `inclusive`";
                    readonly type: "string";
                    readonly enum: readonly ["exclusive", "inclusive"];
                };
                readonly isActive: {
                    readonly type: "boolean";
                    readonly description: "Whether the tax rate is currently active";
                };
                readonly metadata: {
                    readonly type: "object";
                    readonly description: "The metadata of the tax rate";
                    readonly additionalProperties: true;
                };
            };
            readonly required: readonly ["id", "name", "percentage", "type"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const TransactionControllerFindAll: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number. Starts from 1";
                };
                readonly limit: {
                    readonly type: "number";
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of items per page";
                };
                readonly createdAt: {
                    readonly type: "object";
                    readonly properties: {
                        readonly isnull: {
                            readonly type: "boolean";
                            readonly description: "Returns null values";
                        };
                        readonly notnull: {
                            readonly type: "boolean";
                            readonly description: "Returns not null values";
                        };
                        readonly gt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than the given date";
                            readonly examples: readonly ["2020-01-01"];
                        };
                        readonly gte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than or equal to the given date";
                        };
                        readonly lt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than the given date";
                        };
                        readonly lte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than or equal to the given date";
                        };
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by created date";
                };
                readonly ids: {
                    readonly type: "string";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0", "c3611c05-df51-4b47-b601-f2eac02f4ef2"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by id. Returns items with given ids";
                };
                readonly subscriptionId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly paymentIntentId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly type: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["page", "limit", "count", "hasMore", "data"];
            readonly properties: {
                readonly page: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly description: "Page number. Starts from 1";
                    readonly examples: readonly [1];
                };
                readonly limit: {
                    readonly type: "number";
                    readonly default: 200;
                    readonly description: "Number of items per page";
                    readonly examples: readonly [10];
                };
                readonly count: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly hasMore: {
                    readonly type: "boolean";
                };
                readonly query: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly default: 1;
                            readonly description: "Page number. Starts from 1";
                            readonly examples: readonly [1];
                        };
                        readonly limit: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly maximum: 200;
                            readonly default: 200;
                            readonly description: "Number of items per page";
                            readonly examples: readonly [10];
                        };
                        readonly createdAt: {
                            readonly description: "Filter by created date";
                            readonly type: "object";
                            readonly properties: {
                                readonly isnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns null values";
                                };
                                readonly notnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns not null values";
                                };
                                readonly gt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than the given date";
                                    readonly examples: readonly ["2020-01-01"];
                                };
                                readonly gte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than or equal to the given date";
                                };
                                readonly lt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than the given date";
                                };
                                readonly lte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than or equal to the given date";
                                };
                            };
                        };
                    };
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["type", "fromAddress", "toAddress", "currency", "amountRaw", "assetId", "asset"];
                        readonly properties: {
                            readonly type: {
                                readonly description: "Transaction type\n\n`incoming` `outgoing` `event` `transfer`";
                                readonly type: "string";
                                readonly enum: readonly ["incoming", "outgoing", "event", "transfer"];
                            };
                            readonly transactionRelayId: {
                                readonly type: "string";
                                readonly description: "Transaction relay id";
                            };
                            readonly transactionHash: {
                                readonly type: "string";
                                readonly description: "Transaction hash";
                            };
                            readonly nonce: {
                                readonly type: "number";
                                readonly description: "Transaction nonce";
                                readonly examples: readonly [1];
                            };
                            readonly gasLimit: {
                                readonly type: "number";
                                readonly description: "Transaction gas limit used in payment";
                                readonly examples: readonly [1];
                            };
                            readonly validUntil: {
                                readonly type: "string";
                                readonly description: "Transaction valid until";
                            };
                            readonly fromAddress: {
                                readonly type: "string";
                                readonly description: "Transaction from address";
                            };
                            readonly toAddress: {
                                readonly type: "string";
                                readonly description: "Transaction to address";
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                readonly description: "Transaction currency\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                                readonly description: "Transaction created at";
                            };
                            readonly amount: {
                                readonly format: "int64";
                                readonly type: "integer";
                                readonly description: "Transaction amount in 8 decimals";
                                readonly examples: readonly ["9223372036854775807"];
                                readonly minimum: -9223372036854776000;
                                readonly maximum: 9223372036854776000;
                            };
                            readonly amountRaw: {
                                readonly type: "string";
                                readonly description: "Transaction amount raw received from alchemy";
                            };
                            readonly assetId: {
                                readonly type: "string";
                                readonly description: "Transaction asset id";
                            };
                            readonly asset: {
                                readonly type: "object";
                                readonly required: readonly ["id", "name", "address", "chainId", "currency", "symbol", "decimals", "isPublic", "chain"];
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly address: {
                                        readonly type: "string";
                                    };
                                    readonly chainId: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                        readonly description: "`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                    };
                                    readonly symbol: {
                                        readonly type: "string";
                                    };
                                    readonly decimals: {
                                        readonly type: "number";
                                        readonly examples: readonly [1];
                                    };
                                    readonly coingeckoId: {
                                        readonly type: "string";
                                    };
                                    readonly isPublic: {
                                        readonly type: "boolean";
                                    };
                                    readonly superToken: {
                                        readonly type: "object";
                                        readonly required: readonly ["address", "decimals", "symbol"];
                                        readonly properties: {
                                            readonly address: {
                                                readonly type: "string";
                                                readonly description: "SuperToken's address";
                                            };
                                            readonly decimals: {
                                                readonly type: "number";
                                                readonly examples: readonly [1];
                                            };
                                            readonly symbol: {
                                                readonly type: "string";
                                                readonly description: "SuperToken's symbol";
                                            };
                                        };
                                    };
                                    readonly chain: {
                                        readonly type: "object";
                                        readonly required: readonly ["id", "name", "icon", "currency", "blockExplorerTransactionUrl", "blockExplorerName", "type", "isBeta"];
                                        readonly properties: {
                                            readonly id: {
                                                readonly type: "number";
                                                readonly description: "Chain id";
                                                readonly examples: readonly [1];
                                            };
                                            readonly name: {
                                                readonly type: "string";
                                                readonly description: "Chain name";
                                            };
                                            readonly icon: {
                                                readonly type: "string";
                                                readonly description: "Chain icon";
                                            };
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly enum: readonly ["usdc", "usdt", "pyusd", "eurc", "brett", "dai", "btc", "eth", "matic", "bnb", "sol", "busd", "trx", "food", "bonk", "wif", "goat", "spx", "truf", "pengu", "usd", "inr"];
                                                readonly description: "Chain currency symbol\n\n`usdc` `usdt` `pyusd` `eurc` `brett` `dai` `btc` `eth` `matic` `bnb` `sol` `busd` `trx` `food` `bonk` `wif` `goat` `spx` `truf` `pengu` `usd` `inr`";
                                            };
                                            readonly blockExplorerTransactionUrl: {
                                                readonly type: "string";
                                                readonly description: "Chain block explorer transaction url";
                                            };
                                            readonly blockExplorerName: {
                                                readonly type: "string";
                                                readonly description: "Chain block explorer name";
                                            };
                                            readonly type: {
                                                readonly description: "Chain type\n\n`evm` `solana` `tron` `stripe` `binance_pay`";
                                                readonly type: "string";
                                                readonly enum: readonly ["evm", "solana", "tron", "stripe", "binance_pay"];
                                            };
                                            readonly isBeta: {
                                                readonly type: "boolean";
                                                readonly description: "Is beta asset";
                                            };
                                        };
                                    };
                                };
                            };
                            readonly transactionUrl: {
                                readonly type: "string";
                                readonly description: "Transaction url";
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UserControllerDeleteUser: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "string";
                };
                readonly statusCode: {
                    readonly type: "number";
                };
            };
            readonly required: readonly ["message", "statusCode"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UserControllerGetUsers: {
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly firstName: {
                        readonly type: "string";
                    };
                    readonly lastName: {
                        readonly type: "string";
                    };
                    readonly email: {
                        readonly type: "string";
                    };
                    readonly role: {
                        readonly type: "string";
                    };
                    readonly profilePicture: {
                        readonly type: "string";
                    };
                    readonly phone: {
                        readonly type: "string";
                    };
                    readonly position: {
                        readonly type: "string";
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly enum: readonly ["pending", "active", "suspended"];
                        readonly description: "`pending` `active` `suspended`";
                    };
                    readonly createdAt: {
                        readonly format: "date-time";
                        readonly type: "string";
                    };
                    readonly updatedAt: {
                        readonly format: "date-time";
                        readonly type: "string";
                    };
                    readonly flags: {
                        readonly type: "object";
                        readonly properties: {
                            readonly introModal: {
                                readonly type: "boolean";
                            };
                        };
                    };
                };
                readonly required: readonly ["id", "firstName", "lastName", "role", "status"];
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UserControllerUpdateUserRole: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly role: {
                readonly type: "string";
            };
        };
        readonly required: readonly ["role"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly firstName: {
                    readonly type: "string";
                };
                readonly lastName: {
                    readonly type: "string";
                };
                readonly email: {
                    readonly type: "string";
                };
                readonly role: {
                    readonly type: "string";
                };
                readonly profilePicture: {
                    readonly type: "string";
                };
                readonly phone: {
                    readonly type: "string";
                };
                readonly position: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["pending", "active", "suspended"];
                    readonly description: "`pending` `active` `suspended`";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly flags: {
                    readonly type: "object";
                    readonly properties: {
                        readonly introModal: {
                            readonly type: "boolean";
                        };
                    };
                };
            };
            readonly required: readonly ["id", "firstName", "lastName", "role", "status"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UserInviteControllerGetInvites: {
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly email: {
                        readonly type: "string";
                    };
                    readonly role: {
                        readonly type: "string";
                    };
                    readonly organizationId: {
                        readonly type: "string";
                    };
                    readonly inviteUrl: {
                        readonly type: "string";
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly enum: readonly ["pending", "accepted", "rejected"];
                        readonly description: "`pending` `accepted` `rejected`";
                    };
                    readonly expireAt: {
                        readonly format: "date-time";
                        readonly type: "string";
                    };
                };
                readonly required: readonly ["id", "email", "role", "organizationId", "inviteUrl", "status", "expireAt"];
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UserInviteControllerInviteUser: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly email: {
                readonly type: "string";
            };
            readonly role: {
                readonly type: "string";
            };
        };
        readonly required: readonly ["email", "role"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly email: {
                    readonly type: "string";
                };
                readonly role: {
                    readonly type: "string";
                };
                readonly organizationId: {
                    readonly type: "string";
                };
                readonly inviteUrl: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["pending", "accepted", "rejected"];
                    readonly description: "`pending` `accepted` `rejected`";
                };
                readonly expireAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["id", "email", "role", "organizationId", "inviteUrl", "status", "expireAt"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UserInviteControllerRemoveInvite: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "string";
                };
                readonly statusCode: {
                    readonly type: "number";
                };
            };
            readonly required: readonly ["message", "statusCode"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UserInviteControllerResendInvite: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly email: {
                    readonly type: "string";
                };
                readonly role: {
                    readonly type: "string";
                };
                readonly organizationId: {
                    readonly type: "string";
                };
                readonly inviteUrl: {
                    readonly type: "string";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["pending", "accepted", "rejected"];
                    readonly description: "`pending` `accepted` `rejected`";
                };
                readonly expireAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["id", "email", "role", "organizationId", "inviteUrl", "status", "expireAt"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const WebhookEndpointControllerCreate: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly description: {
                readonly type: "string";
            };
            readonly url: {
                readonly type: "string";
            };
            readonly enabledEvents: {
                readonly type: "object";
                readonly properties: {
                    readonly events: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly enum: readonly ["*", "withdrawal_address.created", "withdrawal_address.updated", "withdrawal_address.deleted", "checkout_session.completed", "checkout_session.expired", "checkout_session.canceled", "customer.subscription.created", "customer.subscription.started", "customer.subscription.deleted", "customer.subscription.past_due", "customer.subscription.unpaid", "customer.subscription.incomplete_expired", "payment_intent.payment_failed", "payment_intent.canceled", "payment_intent.succeeded", "invoice.finalized", "invoice.paid", "invoice.marked_as_paid", "invoice.marked_uncollectible", "invoice.payment_failed"];
                        };
                    };
                };
                readonly required: readonly ["events"];
            };
        };
        readonly required: readonly ["description", "url", "enabledEvents"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly url: {
                    readonly type: "string";
                };
                readonly secret: {
                    readonly type: "string";
                };
                readonly isDisabled: {
                    readonly type: "boolean";
                };
                readonly enabledEvents: {
                    readonly type: "object";
                    readonly properties: {
                        readonly events: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["*", "withdrawal_address.created", "withdrawal_address.updated", "withdrawal_address.deleted", "checkout_session.completed", "checkout_session.expired", "checkout_session.canceled", "customer.subscription.created", "customer.subscription.started", "customer.subscription.deleted", "customer.subscription.past_due", "customer.subscription.unpaid", "customer.subscription.incomplete_expired", "payment_intent.payment_failed", "payment_intent.canceled", "payment_intent.succeeded", "invoice.finalized", "invoice.paid", "invoice.marked_as_paid", "invoice.marked_uncollectible", "invoice.payment_failed"];
                                readonly description: "`*` `withdrawal_address.created` `withdrawal_address.updated` `withdrawal_address.deleted` `checkout_session.completed` `checkout_session.expired` `checkout_session.canceled` `customer.subscription.created` `customer.subscription.started` `customer.subscription.deleted` `customer.subscription.past_due` `customer.subscription.unpaid` `customer.subscription.incomplete_expired` `payment_intent.payment_failed` `payment_intent.canceled` `payment_intent.succeeded` `invoice.finalized` `invoice.paid` `invoice.marked_as_paid` `invoice.marked_uncollectible` `invoice.payment_failed`";
                            };
                        };
                    };
                    readonly required: readonly ["events"];
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["id", "description", "url", "secret", "enabledEvents", "createdAt", "updatedAt"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const WebhookEndpointControllerDelete: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "string";
                };
                readonly statusCode: {
                    readonly type: "number";
                };
            };
            readonly required: readonly ["message", "statusCode"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const WebhookEndpointControllerGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly url: {
                    readonly type: "string";
                };
                readonly secret: {
                    readonly type: "string";
                };
                readonly isDisabled: {
                    readonly type: "boolean";
                };
                readonly enabledEvents: {
                    readonly type: "object";
                    readonly properties: {
                        readonly events: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["*", "withdrawal_address.created", "withdrawal_address.updated", "withdrawal_address.deleted", "checkout_session.completed", "checkout_session.expired", "checkout_session.canceled", "customer.subscription.created", "customer.subscription.started", "customer.subscription.deleted", "customer.subscription.past_due", "customer.subscription.unpaid", "customer.subscription.incomplete_expired", "payment_intent.payment_failed", "payment_intent.canceled", "payment_intent.succeeded", "invoice.finalized", "invoice.paid", "invoice.marked_as_paid", "invoice.marked_uncollectible", "invoice.payment_failed"];
                                readonly description: "`*` `withdrawal_address.created` `withdrawal_address.updated` `withdrawal_address.deleted` `checkout_session.completed` `checkout_session.expired` `checkout_session.canceled` `customer.subscription.created` `customer.subscription.started` `customer.subscription.deleted` `customer.subscription.past_due` `customer.subscription.unpaid` `customer.subscription.incomplete_expired` `payment_intent.payment_failed` `payment_intent.canceled` `payment_intent.succeeded` `invoice.finalized` `invoice.paid` `invoice.marked_as_paid` `invoice.marked_uncollectible` `invoice.payment_failed`";
                            };
                        };
                    };
                    readonly required: readonly ["events"];
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["id", "description", "url", "secret", "enabledEvents", "createdAt", "updatedAt"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const WebhookEndpointControllerGetAll: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page number. Starts from 1";
                };
                readonly limit: {
                    readonly type: "number";
                    readonly examples: readonly [10];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Number of items per page";
                };
                readonly createdAt: {
                    readonly type: "object";
                    readonly properties: {
                        readonly isnull: {
                            readonly type: "boolean";
                            readonly description: "Returns null values";
                        };
                        readonly notnull: {
                            readonly type: "boolean";
                            readonly description: "Returns not null values";
                        };
                        readonly gt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than the given date";
                            readonly examples: readonly ["2020-01-01"];
                        };
                        readonly gte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values greater than or equal to the given date";
                        };
                        readonly lt: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than the given date";
                        };
                        readonly lte: {
                            readonly format: "date-time";
                            readonly type: "string";
                            readonly description: "Returns values less than or equal to the given date";
                        };
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by created date";
                };
                readonly ids: {
                    readonly type: "string";
                    readonly examples: readonly ["c3611c05-df51-4b47-b601-f2eac02f4ef0", "c3611c05-df51-4b47-b601-f2eac02f4ef2"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter by id. Returns items with given ids";
                };
                readonly isDisabled: {
                    readonly type: "boolean";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "To filter if webhook endpoint is disabled";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly required: readonly ["page", "limit", "count", "hasMore", "data"];
            readonly properties: {
                readonly page: {
                    readonly type: "number";
                    readonly default: 1;
                    readonly description: "Page number. Starts from 1";
                    readonly examples: readonly [1];
                };
                readonly limit: {
                    readonly type: "number";
                    readonly default: 200;
                    readonly description: "Number of items per page";
                    readonly examples: readonly [10];
                };
                readonly count: {
                    readonly type: "number";
                    readonly examples: readonly [1];
                };
                readonly hasMore: {
                    readonly type: "boolean";
                };
                readonly query: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly default: 1;
                            readonly description: "Page number. Starts from 1";
                            readonly examples: readonly [1];
                        };
                        readonly limit: {
                            readonly type: "number";
                            readonly minimum: 1;
                            readonly maximum: 200;
                            readonly default: 200;
                            readonly description: "Number of items per page";
                            readonly examples: readonly [10];
                        };
                        readonly createdAt: {
                            readonly description: "Filter by created date";
                            readonly type: "object";
                            readonly properties: {
                                readonly isnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns null values";
                                };
                                readonly notnull: {
                                    readonly type: "boolean";
                                    readonly description: "Returns not null values";
                                };
                                readonly gt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than the given date";
                                    readonly examples: readonly ["2020-01-01"];
                                };
                                readonly gte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values greater than or equal to the given date";
                                };
                                readonly lt: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than the given date";
                                };
                                readonly lte: {
                                    readonly format: "date-time";
                                    readonly type: "string";
                                    readonly description: "Returns values less than or equal to the given date";
                                };
                            };
                        };
                    };
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["id", "description", "url", "secret", "enabledEvents", "createdAt", "updatedAt"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                            readonly description: {
                                readonly type: "string";
                            };
                            readonly url: {
                                readonly type: "string";
                            };
                            readonly secret: {
                                readonly type: "string";
                            };
                            readonly isDisabled: {
                                readonly type: "boolean";
                            };
                            readonly enabledEvents: {
                                readonly type: "object";
                                readonly required: readonly ["events"];
                                readonly properties: {
                                    readonly events: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly enum: readonly ["*", "withdrawal_address.created", "withdrawal_address.updated", "withdrawal_address.deleted", "checkout_session.completed", "checkout_session.expired", "checkout_session.canceled", "customer.subscription.created", "customer.subscription.started", "customer.subscription.deleted", "customer.subscription.past_due", "customer.subscription.unpaid", "customer.subscription.incomplete_expired", "payment_intent.payment_failed", "payment_intent.canceled", "payment_intent.succeeded", "invoice.finalized", "invoice.paid", "invoice.marked_as_paid", "invoice.marked_uncollectible", "invoice.payment_failed"];
                                            readonly description: "`*` `withdrawal_address.created` `withdrawal_address.updated` `withdrawal_address.deleted` `checkout_session.completed` `checkout_session.expired` `checkout_session.canceled` `customer.subscription.created` `customer.subscription.started` `customer.subscription.deleted` `customer.subscription.past_due` `customer.subscription.unpaid` `customer.subscription.incomplete_expired` `payment_intent.payment_failed` `payment_intent.canceled` `payment_intent.succeeded` `invoice.finalized` `invoice.paid` `invoice.marked_as_paid` `invoice.marked_uncollectible` `invoice.payment_failed`";
                                        };
                                    };
                                };
                            };
                            readonly createdAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                            readonly updatedAt: {
                                readonly format: "date-time";
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const WebhookEndpointControllerRegenerate: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly url: {
                    readonly type: "string";
                };
                readonly secret: {
                    readonly type: "string";
                };
                readonly isDisabled: {
                    readonly type: "boolean";
                };
                readonly enabledEvents: {
                    readonly type: "object";
                    readonly properties: {
                        readonly events: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["*", "withdrawal_address.created", "withdrawal_address.updated", "withdrawal_address.deleted", "checkout_session.completed", "checkout_session.expired", "checkout_session.canceled", "customer.subscription.created", "customer.subscription.started", "customer.subscription.deleted", "customer.subscription.past_due", "customer.subscription.unpaid", "customer.subscription.incomplete_expired", "payment_intent.payment_failed", "payment_intent.canceled", "payment_intent.succeeded", "invoice.finalized", "invoice.paid", "invoice.marked_as_paid", "invoice.marked_uncollectible", "invoice.payment_failed"];
                                readonly description: "`*` `withdrawal_address.created` `withdrawal_address.updated` `withdrawal_address.deleted` `checkout_session.completed` `checkout_session.expired` `checkout_session.canceled` `customer.subscription.created` `customer.subscription.started` `customer.subscription.deleted` `customer.subscription.past_due` `customer.subscription.unpaid` `customer.subscription.incomplete_expired` `payment_intent.payment_failed` `payment_intent.canceled` `payment_intent.succeeded` `invoice.finalized` `invoice.paid` `invoice.marked_as_paid` `invoice.marked_uncollectible` `invoice.payment_failed`";
                            };
                        };
                    };
                    readonly required: readonly ["events"];
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["id", "description", "url", "secret", "enabledEvents", "createdAt", "updatedAt"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const WebhookEndpointControllerTest: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "string";
                };
                readonly statusCode: {
                    readonly type: "number";
                };
            };
            readonly required: readonly ["message", "statusCode"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const WebhookEndpointControllerUpdate: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly description: {
                readonly type: "string";
            };
            readonly url: {
                readonly type: "string";
            };
            readonly isDisabled: {
                readonly type: "boolean";
            };
            readonly enabledEvents: {
                readonly type: "object";
                readonly properties: {
                    readonly events: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly enum: readonly ["*", "withdrawal_address.created", "withdrawal_address.updated", "withdrawal_address.deleted", "checkout_session.completed", "checkout_session.expired", "checkout_session.canceled", "customer.subscription.created", "customer.subscription.started", "customer.subscription.deleted", "customer.subscription.past_due", "customer.subscription.unpaid", "customer.subscription.incomplete_expired", "payment_intent.payment_failed", "payment_intent.canceled", "payment_intent.succeeded", "invoice.finalized", "invoice.paid", "invoice.marked_as_paid", "invoice.marked_uncollectible", "invoice.payment_failed"];
                        };
                    };
                };
                readonly required: readonly ["events"];
            };
        };
        readonly required: readonly ["description", "url", "enabledEvents"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly url: {
                    readonly type: "string";
                };
                readonly secret: {
                    readonly type: "string";
                };
                readonly isDisabled: {
                    readonly type: "boolean";
                };
                readonly enabledEvents: {
                    readonly type: "object";
                    readonly properties: {
                        readonly events: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly enum: readonly ["*", "withdrawal_address.created", "withdrawal_address.updated", "withdrawal_address.deleted", "checkout_session.completed", "checkout_session.expired", "checkout_session.canceled", "customer.subscription.created", "customer.subscription.started", "customer.subscription.deleted", "customer.subscription.past_due", "customer.subscription.unpaid", "customer.subscription.incomplete_expired", "payment_intent.payment_failed", "payment_intent.canceled", "payment_intent.succeeded", "invoice.finalized", "invoice.paid", "invoice.marked_as_paid", "invoice.marked_uncollectible", "invoice.payment_failed"];
                                readonly description: "`*` `withdrawal_address.created` `withdrawal_address.updated` `withdrawal_address.deleted` `checkout_session.completed` `checkout_session.expired` `checkout_session.canceled` `customer.subscription.created` `customer.subscription.started` `customer.subscription.deleted` `customer.subscription.past_due` `customer.subscription.unpaid` `customer.subscription.incomplete_expired` `payment_intent.payment_failed` `payment_intent.canceled` `payment_intent.succeeded` `invoice.finalized` `invoice.paid` `invoice.marked_as_paid` `invoice.marked_uncollectible` `invoice.payment_failed`";
                            };
                        };
                    };
                    readonly required: readonly ["events"];
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                };
            };
            readonly required: readonly ["id", "description", "url", "secret", "enabledEvents", "createdAt", "updatedAt"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const WithdrawalAddressControllerCreate: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "Withdrawal address name";
            };
            readonly address: {
                readonly type: "string";
                readonly description: "Withdrawal address";
            };
            readonly chainId: {
                readonly type: "number";
                readonly description: "Withdrawal address chain id";
                readonly examples: readonly [1];
            };
        };
        readonly required: readonly ["name", "address", "chainId"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Withdrawal address id";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Withdrawal address name";
                };
                readonly address: {
                    readonly type: "string";
                    readonly description: "Withdrawal address";
                };
                readonly chainId: {
                    readonly type: "number";
                    readonly description: "Withdrawal address chain id";
                    readonly examples: readonly [1];
                };
                readonly isDefault: {
                    readonly type: "boolean";
                    readonly description: "Is default withdrawal address";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Withdrawal address creation date";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Withdrawal address update date";
                };
            };
            readonly required: readonly ["id", "name", "address", "chainId", "isDefault", "createdAt", "updatedAt"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const WithdrawalAddressControllerDelete: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "string";
                };
                readonly statusCode: {
                    readonly type: "number";
                };
            };
            readonly required: readonly ["message", "statusCode"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const WithdrawalAddressControllerGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Withdrawal address id";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Withdrawal address name";
                };
                readonly address: {
                    readonly type: "string";
                    readonly description: "Withdrawal address";
                };
                readonly chainId: {
                    readonly type: "number";
                    readonly description: "Withdrawal address chain id";
                    readonly examples: readonly [1];
                };
                readonly isDefault: {
                    readonly type: "boolean";
                    readonly description: "Is default withdrawal address";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Withdrawal address creation date";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Withdrawal address update date";
                };
            };
            readonly required: readonly ["id", "name", "address", "chainId", "isDefault", "createdAt", "updatedAt"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const WithdrawalAddressControllerGetAll: {
    readonly response: {
        readonly "200": {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "Withdrawal address id";
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "Withdrawal address name";
                    };
                    readonly address: {
                        readonly type: "string";
                        readonly description: "Withdrawal address";
                    };
                    readonly chainId: {
                        readonly type: "number";
                        readonly description: "Withdrawal address chain id";
                        readonly examples: readonly [1];
                    };
                    readonly isDefault: {
                        readonly type: "boolean";
                        readonly description: "Is default withdrawal address";
                    };
                    readonly createdAt: {
                        readonly format: "date-time";
                        readonly type: "string";
                        readonly description: "Withdrawal address creation date";
                    };
                    readonly updatedAt: {
                        readonly format: "date-time";
                        readonly type: "string";
                        readonly description: "Withdrawal address update date";
                    };
                };
                readonly required: readonly ["id", "name", "address", "chainId", "isDefault", "createdAt", "updatedAt"];
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const WithdrawalAddressControllerMarkAsDefault: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "string";
                };
                readonly statusCode: {
                    readonly type: "number";
                };
            };
            readonly required: readonly ["message", "statusCode"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const WithdrawalAddressControllerUpdate: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly type: "string";
                readonly description: "Withdrawal address name";
            };
            readonly address: {
                readonly type: "string";
                readonly description: "Withdrawal address";
            };
        };
        readonly required: readonly ["name", "address"];
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Withdrawal address id";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Withdrawal address name";
                };
                readonly address: {
                    readonly type: "string";
                    readonly description: "Withdrawal address";
                };
                readonly chainId: {
                    readonly type: "number";
                    readonly description: "Withdrawal address chain id";
                    readonly examples: readonly [1];
                };
                readonly isDefault: {
                    readonly type: "boolean";
                    readonly description: "Is default withdrawal address";
                };
                readonly createdAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Withdrawal address creation date";
                };
                readonly updatedAt: {
                    readonly format: "date-time";
                    readonly type: "string";
                    readonly description: "Withdrawal address update date";
                };
            };
            readonly required: readonly ["id", "name", "address", "chainId", "isDefault", "createdAt", "updatedAt"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly "500": {
            readonly type: "object";
            readonly properties: {
                readonly message: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly statusCode: {
                    readonly type: "number";
                };
                readonly error: {
                    readonly type: "string";
                };
            };
            readonly required: readonly ["message", "statusCode", "error"];
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
export { AssetControllerFindAll, AssetControllerGet, AuthControllerGetCurrentUser, AuthControllerGetPointsAccessToken, ChainControllerFindAll, ChainControllerGet, ConstantsControllerGetPrices, CouponControllerArchive, CouponControllerCreate, CouponControllerDisable, CouponControllerEnable, CouponControllerGet, CouponControllerSearch, CouponControllerUpdate, CustomerControllerCreate, CustomerControllerDelete, CustomerControllerFindAll, CustomerControllerGet, CustomerControllerUpdate, InvoiceControllerCreate, InvoiceControllerDelete, InvoiceControllerDuplicateInvoice, InvoiceControllerFinalizeAndSendInvoice, InvoiceControllerFinalizeInvoice, InvoiceControllerGet, InvoiceControllerGetAll, InvoiceControllerMarkUncollectibleInvoice, InvoiceControllerPayInvoice, InvoiceControllerUpdate, InvoiceControllerVoidInvoice, InvoiceSettingControllerGet, OrganizationControllerDeleteBrandLogo, OrganizationControllerGetOrganizationInfo, OrganizationControllerUpdateBranding, PartnerControllerCreateAccount, PartnerControllerGetAccount, PaymentIntentControllerMarkAsRefunded, PaymentIntentControllerSendCheckoutSessionPaymentReceipt, PaymentLinkControllerActivate, PaymentLinkControllerCreate, PaymentLinkControllerDeactivate, PaymentLinkControllerDelete, PaymentLinkControllerFindAll, PaymentLinkControllerGet, PaymentLinkControllerUpdate, PaymentSettingControllerGet, PriceControllerCreate, PriceControllerFindAll, PriceControllerGet, PriceControllerUpdate, ProductControllerActivate, ProductControllerCreate, ProductControllerDeactivate, ProductControllerDelete, ProductControllerFindAll, ProductControllerGet, ProductControllerUpdate, SessionsControllerAutoRecoverCheckoutSession, SessionsControllerAutoRecoverCheckoutSessionByHash, SessionsControllerCheckoutSessionCompletedStatus, SessionsControllerCompletePartialCheckoutSession, SessionsControllerCreate, SessionsControllerExportCheckoutSessions, SessionsControllerFindAll, SessionsControllerFindOne, StorageFileControllerPost, SubscriptionControllerCancel, SubscriptionControllerEnd, SubscriptionControllerFindAll, SubscriptionControllerGet, SubscriptionControllerResume, TaxRateControllerActivate, TaxRateControllerCreate, TaxRateControllerDeactivate, TaxRateControllerFindAll, TaxRateControllerGet, TaxRateControllerUpdate, TransactionControllerFindAll, UserControllerDeleteUser, UserControllerGetUsers, UserControllerUpdateUserRole, UserInviteControllerGetInvites, UserInviteControllerInviteUser, UserInviteControllerRemoveInvite, UserInviteControllerResendInvite, WebhookEndpointControllerCreate, WebhookEndpointControllerDelete, WebhookEndpointControllerGet, WebhookEndpointControllerGetAll, WebhookEndpointControllerRegenerate, WebhookEndpointControllerTest, WebhookEndpointControllerUpdate, WithdrawalAddressControllerCreate, WithdrawalAddressControllerDelete, WithdrawalAddressControllerGet, WithdrawalAddressControllerGetAll, WithdrawalAddressControllerMarkAsDefault, WithdrawalAddressControllerUpdate };
